2eca45e0bff2c8b860e963933a58e8d2
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateTodoSuccess = exports.updateTodoItem = exports.updateTodoFailure = exports.todosListSuccess = exports.todosListFailure = exports.requestTodosList = exports.deleteTodoSuccess = exports.deleteTodoItem = exports.deleteTodoFailure = exports.default = exports.createTodoSuccess = exports.createTodoItem = exports.createTodoFailure = exports.TodosReducer = exports.TodosActions = exports.INITIAL_STATE = void 0;

var SI = _interopRequireWildcard(require("seamless-immutable"));

var _typesafeActions = require("typesafe-actions");

var _ReduxHelpers = require("../../Lib/ReduxHelpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var createAction = _typesafeActions.deprecated.createAction,
    createStandardAction = _typesafeActions.deprecated.createStandardAction;
var actionCreators = {
  requestTodosList: createStandardAction("REQUEST_TODOS_LIST")(),
  todosListSuccess: createStandardAction("REQUEST_TODOS_LIST_SUCCESS")(),
  todosListFailure: createAction("REQUEST_TODOS_LIST_FAILURE"),
  updateTodoItem: createStandardAction("UPDATE_TODO_ITEM")(),
  updateTodoSuccess: createAction("UPDATE_TODO_ITEM_SUCCESS"),
  updateTodoFailure: createAction("UPDATE_TODO_ITEM_FAILURE"),
  createTodoItem: createStandardAction("CREATE_TODO_ITEM")(),
  createTodoSuccess: createAction("CREATE_TODO_ITEM_SUCCESS"),
  createTodoFailure: createAction("CREATE_TODO_ITEM_FAILURE"),
  deleteTodoItem: createStandardAction("DELETE_TODO_ITEM")(),
  deleteTodoSuccess: createAction("DELETE_TODO_ITEM_SUCCESS"),
  deleteTodoFailure: createAction("DELETE_TODO_ITEM_FAILURE")
};
var TodosActions = actionCreators;
exports.TodosActions = TodosActions;
var INITIAL_STATE = SI.from({
  todos: undefined,
  fetching: false
});
exports.INITIAL_STATE = INITIAL_STATE;

var requestTodosList = function requestTodosList(state) {
  return state.merge({
    fetching: true
  });
};

exports.requestTodosList = requestTodosList;

var todosListSuccess = function todosListSuccess(state, _ref) {
  var payload = _ref.payload;
  return state.merge({
    fetching: false,
    todos: payload
  });
};

exports.todosListSuccess = todosListSuccess;

var todosListFailure = function todosListFailure(state) {
  return state.merge({
    fetching: false,
    todos: undefined
  });
};

exports.todosListFailure = todosListFailure;

var updateTodoItem = function updateTodoItem(state) {
  return state.merge({
    fetching: true
  });
};

exports.updateTodoItem = updateTodoItem;

var updateTodoSuccess = function updateTodoSuccess(state) {
  return state.merge({
    fetching: false
  });
};

exports.updateTodoSuccess = updateTodoSuccess;

var updateTodoFailure = function updateTodoFailure(state) {
  return state.merge({
    fetching: false
  });
};

exports.updateTodoFailure = updateTodoFailure;

var createTodoItem = function createTodoItem(state) {
  return state.merge({
    fetching: true
  });
};

exports.createTodoItem = createTodoItem;

var createTodoSuccess = function createTodoSuccess(state) {
  return state.merge({
    fetching: false
  });
};

exports.createTodoSuccess = createTodoSuccess;

var createTodoFailure = function createTodoFailure(state) {
  return state.merge({
    fetching: false
  });
};

exports.createTodoFailure = createTodoFailure;

var deleteTodoItem = function deleteTodoItem(state) {
  return state.merge({
    fetching: true
  });
};

exports.deleteTodoItem = deleteTodoItem;

var deleteTodoSuccess = function deleteTodoSuccess(state) {
  return state.merge({
    fetching: false
  });
};

exports.deleteTodoSuccess = deleteTodoSuccess;

var deleteTodoFailure = function deleteTodoFailure(state) {
  return state.merge({
    fetching: false
  });
};

exports.deleteTodoFailure = deleteTodoFailure;
var reducerMap = {
  requestTodosList: requestTodosList,
  todosListSuccess: todosListSuccess,
  todosListFailure: todosListFailure,
  updateTodoItem: updateTodoItem,
  updateTodoSuccess: updateTodoSuccess,
  updateTodoFailure: updateTodoFailure,
  createTodoItem: createTodoItem,
  createTodoSuccess: createTodoSuccess,
  createTodoFailure: createTodoFailure,
  deleteTodoItem: deleteTodoItem,
  deleteTodoSuccess: deleteTodoSuccess,
  deleteTodoFailure: deleteTodoFailure
};
var TodosReducer = (0, _ReduxHelpers.mapReducers)(INITIAL_STATE, reducerMap, actionCreators);
exports.TodosReducer = TodosReducer;
var _default = TodosReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,