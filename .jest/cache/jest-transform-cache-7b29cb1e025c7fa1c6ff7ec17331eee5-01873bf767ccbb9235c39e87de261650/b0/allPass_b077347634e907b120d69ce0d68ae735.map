{"version":3,"sources":["allPass.js"],"names":["_curry1","require","curryN","max","pluck","reduce","allPass","preds","idx","len","length","apply","arguments","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAEXC,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIC,MAAM,GAEVD,OAAO,CAAC,UAAD,CAFP;;AAIA,IAAIE,GAAG,GAEPF,OAAO,CAAC,OAAD,CAFP;;AAIA,IAAIG,KAAK,GAETH,OAAO,CAAC,SAAD,CAFP;;AAIA,IAAII,MAAM,GAEVJ,OAAO,CAAC,UAAD,CAFP;;AA8BA,IAAIK,OAAO,GAEXN,OAAO,CAAC,SAASM,OAAT,CAAiBC,KAAjB,EAAwB;AAC9B,SAAOL,MAAM,CAACG,MAAM,CAACF,GAAD,EAAM,CAAN,EAASC,KAAK,CAAC,QAAD,EAAWG,KAAX,CAAd,CAAP,EAAyC,YAAY;AAChE,QAAIC,GAAG,GAAG,CAAV;AACA,QAAIC,GAAG,GAAGF,KAAK,CAACG,MAAhB;;AAEA,WAAOF,GAAG,GAAGC,GAAb,EAAkB;AAChB,UAAI,CAACF,KAAK,CAACC,GAAD,CAAL,CAAWG,KAAX,CAAiB,IAAjB,EAAuBC,SAAvB,CAAL,EAAwC;AACtC,eAAO,KAAP;AACD;;AAEDJ,MAAAA,GAAG,IAAI,CAAP;AACD;;AAED,WAAO,IAAP;AACD,GAbY,CAAb;AAcD,CAfM,CAFP;;AAmBAK,MAAM,CAACC,OAAP,GAAiBR,OAAjB","sourcesContent":["var _curry1 =\n/*#__PURE__*/\nrequire(\"./internal/_curry1\");\n\nvar curryN =\n/*#__PURE__*/\nrequire(\"./curryN\");\n\nvar max =\n/*#__PURE__*/\nrequire(\"./max\");\n\nvar pluck =\n/*#__PURE__*/\nrequire(\"./pluck\");\n\nvar reduce =\n/*#__PURE__*/\nrequire(\"./reduce\");\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if every one of the provided predicates is satisfied\n * by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.anyPass\n * @example\n *\n *      const isQueen = R.propEq('rank', 'Q');\n *      const isSpade = R.propEq('suit', '♠︎');\n *      const isQueenOfSpades = R.allPass([isQueen, isSpade]);\n *\n *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n */\n\n\nvar allPass =\n/*#__PURE__*/\n_curry1(function allPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function () {\n    var idx = 0;\n    var len = preds.length;\n\n    while (idx < len) {\n      if (!preds[idx].apply(this, arguments)) {\n        return false;\n      }\n\n      idx += 1;\n    }\n\n    return true;\n  });\n});\n\nmodule.exports = allPass;"]}