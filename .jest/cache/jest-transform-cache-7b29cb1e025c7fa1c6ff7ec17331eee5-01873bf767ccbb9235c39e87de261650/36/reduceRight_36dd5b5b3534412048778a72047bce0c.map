{"version":3,"sources":["reduceRight.js"],"names":["_curry3","require","reduceRight","fn","acc","list","idx","length","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAEXC,OAAO,CAAC,oBAAD,CAFP;;AA+CA,IAAIC,WAAW,GAEfF,OAAO,CAAC,SAASE,WAAT,CAAqBC,EAArB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoC;AAC1C,MAAIC,GAAG,GAAGD,IAAI,CAACE,MAAL,GAAc,CAAxB;;AAEA,SAAOD,GAAG,IAAI,CAAd,EAAiB;AACfF,IAAAA,GAAG,GAAGD,EAAE,CAACE,IAAI,CAACC,GAAD,CAAL,EAAYF,GAAZ,CAAR;AACAE,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAOF,GAAP;AACD,CATM,CAFP;;AAaAI,MAAM,CAACC,OAAP,GAAiBP,WAAjB","sourcesContent":["var _curry3 =\n/*#__PURE__*/\nrequire(\"./internal/_curry3\");\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * Similar to [`reduce`](#reduce), except moves through the input list from the\n * right to the left.\n *\n * The iterator function receives two values: *(value, acc)*, while the arguments'\n * order of `reduce`'s iterator function is *(acc, value)*.\n *\n * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduceRight` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> b) -> b -> [a] -> b\n * @param {Function} fn The iterator function. Receives two values, the current element from the array\n *        and the accumulator.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.addIndex\n * @example\n *\n *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2\n *      //    -               -2\n *      //   / \\              / \\\n *      //  1   -            1   3\n *      //     / \\              / \\\n *      //    2   -     ==>    2  -1\n *      //       / \\              / \\\n *      //      3   -            3   4\n *      //         / \\              / \\\n *      //        4   0            4   0\n *\n * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))\n */\n\n\nvar reduceRight =\n/*#__PURE__*/\n_curry3(function reduceRight(fn, acc, list) {\n  var idx = list.length - 1;\n\n  while (idx >= 0) {\n    acc = fn(list[idx], acc);\n    idx -= 1;\n  }\n\n  return acc;\n});\n\nmodule.exports = reduceRight;"]}