{"version":3,"sources":["renameKeyWith.js"],"names":["exports","__esModule","_ramda","require","_renameKeysWith","_interopRequireDefault","obj","renameKeyWith","curry","fn","key","when","equals","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,eAAe,GAAGC,sBAAsB,CAACF,OAAO,CAAC,kBAAD,CAAR,CAA5C;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAuBjG,IAAIC,aAAa,GAAG,CAAC,GAAGL,MAAM,CAACM,KAAX,EAAkB,UAAUC,EAAV,EAAcC,GAAd,EAAmBJ,GAAnB,EAAwB;AAC5D,SAAO,CAAC,GAAGF,eAAe,CAAC,SAAD,CAAnB,EAAgC,CAAC,GAAGF,MAAM,CAACS,IAAX,EAAiB,CAAC,GAAGT,MAAM,CAACU,MAAX,EAAmBF,GAAnB,CAAjB,EAA0CD,EAA1C,CAAhC,EAA+EH,GAA/E,CAAP;AACD,CAFmB,CAApB;AAGA,IAAIO,QAAQ,GAAGN,aAAf;AACAP,OAAO,CAAC,SAAD,CAAP,GAAqBa,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _renameKeysWith = _interopRequireDefault(require(\"./renameKeysWith\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Creates a new object with the own properties of the provided object, but the\n * key `key` renamed according to logic of renaming function.\n *\n * Keep in mind that in case the new key name already existed on the object,\n * the behaviour is undefined and the result may vary between various JS engines!\n *\n * @func renameKeyWith\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.29.0|v2.29.0}\n * @category Object\n * @sig (k -> k) -> k -> {k: v} -> {k: v}\n * @param {Function} fn Function that renames the keys\n * @param {!string} key Key to rename\n * @param {!Object} obj Provided object\n * @return {!Object} New object with renamed key\n * @see {@link RA.renameKeysWith|renameKeysWith}\n * @example\n *\n * RA.renameKeyWith(R.concat('a'), 'A', { A: 1 }) //=> { aA: 1 }\n */\nvar renameKeyWith = (0, _ramda.curry)(function (fn, key, obj) {\n  return (0, _renameKeysWith[\"default\"])((0, _ramda.when)((0, _ramda.equals)(key), fn), obj);\n});\nvar _default = renameKeyWith;\nexports[\"default\"] = _default;"]}