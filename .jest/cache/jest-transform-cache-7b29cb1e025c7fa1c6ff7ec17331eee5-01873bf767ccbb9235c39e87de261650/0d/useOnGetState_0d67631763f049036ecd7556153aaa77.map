{"version":3,"sources":["useOnGetState.tsx"],"names":["getStateListeners","addKeyedListener","React","NavigationBuilderContext","route","NavigationRouteContext","key","getRehydratedState","state","getState","routes","childState"],"mappings":";;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,yBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,4BAAA,CAAA,CAAA;;AAGA,IAAA,uBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOe,SAAA,aAAA,OAGH;AAAA,MAH0B,QAG1B,QAH0B,QAG1B;AAAA,MADVA,iBACU,QADVA,iBACU;;AACV,0BAA6BE,KAAK,CAALA,UAAAA,CAAiBC,yBAAAA,CAA9C,OAA6BD,CAA7B;AAAA,MAAQD,gBAAR,qBAAQA,gBAAR;;AACA,MAAMG,KAAK,GAAGF,KAAK,CAALA,UAAAA,CAAiBG,uBAAAA,CAA/B,OAAcH,CAAd;AACA,MAAMI,GAAG,GAAGF,KAAK,GAAGA,KAAK,CAAR,GAAA,GAAjB,MAAA;AAEA,MAAMG,kBAAkB,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AACjD,QAAMC,KAAK,GAAGC,QADmC,EACjD;AAGA,QAAMC,MAAM,GAAG,KAAK,CAAL,MAAA,CAAA,GAAA,CAAkBN,UAAAA,KAAD,EAAW;AAAA,UAAA,qBAAA;;AACzC,UAAMO,UAAU,GAAA,CAAA,qBAAA,GAAGX,iBAAiB,CAACI,KAAK,CAA1B,GAAoB,CAApB,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGJ,qBAAAA,CAAAA,IAAAA,CAAnB,iBAAmBA,CAAnB;;AAEA,UAAII,KAAK,CAALA,KAAAA,KAAJ,UAAA,EAAgC;AAC9B,eAAA,KAAA;AACD;;AAED,wCAAO,KAAP;AAAmBI,QAAAA,KAAK,EAAEG;AAA1B;AAPF,KAAe,CAAf;;AAUA,QAAI,CAAA,GAAA,aAAA,CAAA,OAAA,EAAaH,KAAK,CAAlB,MAAA,EAAJ,MAAI,CAAJ,EAAwC;AACtC,aAAA,KAAA;AACD;;AAED,sCAAO,KAAP;AAAmBE,MAAAA,MAAAA,EAAAA;AAAnB;AAlByB,GAAA,EAmBxB,CAAA,QAAA,EAnBH,iBAmBG,CAnBwB,CAA3B;AAqBAR,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,WAAOD,gBAAP,KAAA,IAAOA,IAAAA,gBAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,gBAAgB,CAAA,UAAA,EAAA,GAAA,EAAvB,kBAAuB,CAAvB;AADFC,GAAAA,EAEG,CAAA,gBAAA,EAAA,kBAAA,EAFHA,GAEG,CAFHA;AAGD","sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  GetStateListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport isArrayEqual from './isArrayEqual';\n\ntype Options = {\n  getState: () => NavigationState;\n  getStateListeners: Record<string, GetStateListener | undefined>;\n};\n\nexport default function useOnGetState({\n  getState,\n  getStateListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateListeners[route.key]?.();\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateListeners]);\n\n  React.useEffect(() => {\n    return addKeyedListener?.('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}\n"]}