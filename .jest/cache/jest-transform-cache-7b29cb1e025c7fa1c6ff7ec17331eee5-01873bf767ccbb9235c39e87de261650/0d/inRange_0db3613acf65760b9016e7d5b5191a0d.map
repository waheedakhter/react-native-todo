{"version":3,"sources":["inRange.js"],"names":["exports","__esModule","_ramda","require","inRangeImp","ifElse","gte","Error","useWith","both","lte","gt","_default","curry","low","high","value"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,UAAU,GAAG,CAAC,GAAGF,MAAM,CAACG,MAAX,EAAmBH,MAAM,CAACI,GAA1B,EAA+B,YAAY;AAC1D,QAAM,IAAIC,KAAJ,CAAU,gEAAV,CAAN;AACD,CAFgB,EAEd,CAAC,GAAGL,MAAM,CAACM,OAAX,EAAoBN,MAAM,CAACO,IAA3B,EAAiC,CAACP,MAAM,CAACQ,GAAR,EAAaR,MAAM,CAACS,EAApB,CAAjC,CAFc,CAAjB;;AAyBA,IAAIC,QAAQ,GAAG,CAAC,GAAGV,MAAM,CAACW,KAAX,EAAkB,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,KAArB,EAA4B;AAC3D,SAAOZ,UAAU,CAACU,GAAD,EAAMC,IAAN,CAAV,CAAsBC,KAAtB,CAAP;AACD,CAFc,CAAf;;AAIAhB,OAAO,CAAC,SAAD,CAAP,GAAqBY,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar inRangeImp = (0, _ramda.ifElse)(_ramda.gte, function () {\n  throw new Error('low must not be greater than high in inRange(low, high, value)');\n}, (0, _ramda.useWith)(_ramda.both, [_ramda.lte, _ramda.gt]));\n/**\n * Checks if `value` is between `low` and up to but not including `high`.\n *\n * @func inRange\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.7.0|v2.7.0}\n * @category Relation\n * @sig Number -> Number -> Number -> Boolean\n * @param {number} low Start of the range\n * @param {number} high The end of the range\n * @param {number} value The value to test\n * @return {boolean}\n * @throws {Error} When `low` is greater than or equal to `high`\n * @example\n *\n * RA.inRange(0, 5, 3); //=> true\n * RA.inRange(0, 5, 0); //=> true\n * RA.inRange(0, 5, 4); //=> true\n * RA.inRange(0, 5, 5); //=> false\n * RA.inRange(0, 5, -1); //=> false\n */\n\nvar _default = (0, _ramda.curry)(function (low, high, value) {\n  return inRangeImp(low, high)(value);\n});\n\nexports[\"default\"] = _default;"]}