{"version":3,"sources":["flattenPath.js"],"names":["exports","__esModule","_ramda","require","flattenPath","curry","path","obj","merge","pathOr","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAuBA,IAAIC,WAAW,GAAG,CAAC,GAAGF,MAAM,CAACG,KAAX,EAAkB,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AACvD,SAAO,CAAC,GAAGL,MAAM,CAACM,KAAX,EAAkBD,GAAlB,EAAuB,CAAC,GAAGL,MAAM,CAACO,MAAX,EAAmB,EAAnB,EAAuBH,IAAvB,EAA6BC,GAA7B,CAAvB,CAAP;AACD,CAFiB,CAAlB;AAGA,IAAIG,QAAQ,GAAGN,WAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBU,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Flattens a property path so that its fields are spread out into the provided object.\n * It's like {@link RA.spreadPath|spreadPath}, but preserves object under the property path.\n *\n * @func flattenPath\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.19.0|v1.19.0}\n * @category Object\n * @typedef Idx = String | Int\n * @sig [Idx] -> {k: v} -> {k: v}\n * @param {!Array.<string|number>} path The property path to flatten\n * @param {!Object} obj The provided object\n * @return {!Object} The flattened object\n * @see {@link RA.flattenProp|flattenProp}, {@link RA.spreadPath|spreadPath}\n * @example\n *\n * RA.flattenPath(\n *   ['b1', 'b2'],\n *   { a: 1, b1: { b2: { c: 3, d: 4 } } }\n * ); // => { a: 1, c: 3, d: 4, b1: { b2: { c: 3, d: 4 } } };\n */\nvar flattenPath = (0, _ramda.curry)(function (path, obj) {\n  return (0, _ramda.merge)(obj, (0, _ramda.pathOr)({}, path, obj));\n});\nvar _default = flattenPath;\nexports[\"default\"] = _default;"]}