04794385076511b17e4163944e96d0c9
"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _ramda = require("ramda");

var _allP = _interopRequireDefault(require("../../allP"));

var _resolveP = _interopRequireDefault(require("../../resolveP"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

var onFulfill = function onFulfill(value) {
  return {
    status: 'fulfilled',
    value: value
  };
};

var onReject = function onReject(reason) {
  return {
    status: 'rejected',
    reason: reason
  };
};

var allSettledPonyfill = function allSettledPonyfill(iterable) {
  var array = (0, _ramda.map)(function (p) {
    return (0, _resolveP["default"])(p).then(onFulfill)["catch"](onReject);
  }, _toConsumableArray(iterable));
  return (0, _allP["default"])(array);
};

var _default = allSettledPonyfill;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlByb21pc2UuYWxsU2V0dGxlZC5qcyJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsIl9yYW1kYSIsInJlcXVpcmUiLCJfYWxsUCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfcmVzb2x2ZVAiLCJvYmoiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfaXRlcmFibGVUb0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiVHlwZUVycm9yIiwibyIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwibiIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiQXJyYXkiLCJmcm9tIiwidGVzdCIsIml0ZXIiLCJTeW1ib2wiLCJpdGVyYXRvciIsImlzQXJyYXkiLCJsZW4iLCJsZW5ndGgiLCJpIiwiYXJyMiIsIm9uRnVsZmlsbCIsInZhbHVlIiwic3RhdHVzIiwib25SZWplY3QiLCJyZWFzb24iLCJhbGxTZXR0bGVkUG9ueWZpbGwiLCJpdGVyYWJsZSIsImFycmF5IiwibWFwIiwicCIsInRoZW4iLCJfZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixJQUFyQjtBQUNBRCxPQUFPLENBQUMsU0FBRCxDQUFQLEdBQXFCLEtBQUssQ0FBMUI7O0FBRUEsSUFBSUUsTUFBTSxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFwQjs7QUFFQSxJQUFJQyxLQUFLLEdBQUdDLHNCQUFzQixDQUFDRixPQUFPLENBQUMsWUFBRCxDQUFSLENBQWxDOztBQUVBLElBQUlHLFNBQVMsR0FBR0Qsc0JBQXNCLENBQUNGLE9BQU8sQ0FBQyxnQkFBRCxDQUFSLENBQXRDOztBQUVBLFNBQVNFLHNCQUFULENBQWdDRSxHQUFoQyxFQUFxQztBQUFFLFNBQU9B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SUFBQUEsTUFBTSxFQUFFLFVBREg7QUFFTEUsSUFBQUEsTUFBTSxFQUFFQTtBQUZILEdBQVA7QUFJRCxDQUxEOztBQU9BLElBQUlDLGtCQUFrQixHQUFHLFNBQVNBLGtCQUFULENBQTRCQyxRQUE1QixFQUFzQztBQUM3RCxNQUFJQyxLQUFLLEdBQUcsQ0FBQyxHQUFHMUMsTUFBTSxDQUFDMkMsR0FBWCxFQUFnQixVQUFVQyxDQUFWLEVBQWE7QUFDdkMsV0FBTyxDQUFDLEdBQUd4QyxTQUFTLENBQUMsU0FBRCxDQUFiLEVBQTBCd0MsQ0FBMUIsRUFBNkJDLElBQTdCLENBQWtDVixTQUFsQyxFQUE2QyxPQUE3QyxFQUFzREcsUUFBdEQsQ0FBUDtBQUNELEdBRlcsRUFFVGhDLGtCQUFrQixDQUFDbUMsUUFBRCxDQUZULENBQVo7QUFHQSxTQUFPLENBQUMsR0FBR3ZDLEtBQUssQ0FBQyxTQUFELENBQVQsRUFBc0J3QyxLQUF0QixDQUFQO0FBQ0QsQ0FMRDs7QUFPQSxJQUFJSSxRQUFRLEdBQUdOLGtCQUFmO0FBQ0ExQyxPQUFPLENBQUMsU0FBRCxDQUFQLEdBQXFCZ0QsUUFBckIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JhbWRhID0gcmVxdWlyZShcInJhbWRhXCIpO1xuXG52YXIgX2FsbFAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9hbGxQXCIpKTtcblxudmFyIF9yZXNvbHZlUCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL3Jlc29sdmVQXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxudmFyIG9uRnVsZmlsbCA9IGZ1bmN0aW9uIG9uRnVsZmlsbCh2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIHN0YXR1czogJ2Z1bGZpbGxlZCcsXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuXG52YXIgb25SZWplY3QgPSBmdW5jdGlvbiBvblJlamVjdChyZWFzb24pIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0dXM6ICdyZWplY3RlZCcsXG4gICAgcmVhc29uOiByZWFzb25cbiAgfTtcbn07XG5cbnZhciBhbGxTZXR0bGVkUG9ueWZpbGwgPSBmdW5jdGlvbiBhbGxTZXR0bGVkUG9ueWZpbGwoaXRlcmFibGUpIHtcbiAgdmFyIGFycmF5ID0gKDAsIF9yYW1kYS5tYXApKGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuICgwLCBfcmVzb2x2ZVBbXCJkZWZhdWx0XCJdKShwKS50aGVuKG9uRnVsZmlsbClbXCJjYXRjaFwiXShvblJlamVjdCk7XG4gIH0sIF90b0NvbnN1bWFibGVBcnJheShpdGVyYWJsZSkpO1xuICByZXR1cm4gKDAsIF9hbGxQW1wiZGVmYXVsdFwiXSkoYXJyYXkpO1xufTtcblxudmFyIF9kZWZhdWx0ID0gYWxsU2V0dGxlZFBvbnlmaWxsO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiXX0=