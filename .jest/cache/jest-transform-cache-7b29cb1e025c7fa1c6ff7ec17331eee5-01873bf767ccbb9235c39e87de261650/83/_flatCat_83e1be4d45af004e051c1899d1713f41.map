{"version":3,"sources":["_flatCat.js"],"names":["_forceReduced","require","_isArrayLike","_reduce","_xfBase","preservingReduced","xf","init","result","input","ret","_flatCat","_xcat","rxf","module","exports"],"mappings":"AAAA,IAAIA,aAAa,GAEjBC,OAAO,CAAC,iBAAD,CAFP;;AAIA,IAAIC,YAAY,GAEhBD,OAAO,CAAC,gBAAD,CAFP;;AAIA,IAAIE,OAAO,GAEXF,OAAO,CAAC,WAAD,CAFP;;AAIA,IAAIG,OAAO,GAEXH,OAAO,CAAC,WAAD,CAFP;;AAIA,IAAII,iBAAiB,GAAG,SAApBA,iBAAoB,CAAUC,EAAV,EAAc;AACpC,SAAO;AACL,yBAAqBF,OAAO,CAACG,IADxB;AAEL,2BAAuB,0BAAUC,MAAV,EAAkB;AACvC,aAAOF,EAAE,CAAC,qBAAD,CAAF,CAA0BE,MAA1B,CAAP;AACD,KAJI;AAKL,yBAAqB,wBAAUA,MAAV,EAAkBC,KAAlB,EAAyB;AAC5C,UAAIC,GAAG,GAAGJ,EAAE,CAAC,mBAAD,CAAF,CAAwBE,MAAxB,EAAgCC,KAAhC,CAAV;AACA,aAAOC,GAAG,CAAC,sBAAD,CAAH,GAA8BV,aAAa,CAACU,GAAD,CAA3C,GAAmDA,GAA1D;AACD;AARI,GAAP;AAUD,CAXD;;AAaA,IAAIC,QAAQ,GAAG,SAASC,KAAT,CAAeN,EAAf,EAAmB;AAChC,MAAIO,GAAG,GAAGR,iBAAiB,CAACC,EAAD,CAA3B;AACA,SAAO;AACL,yBAAqBF,OAAO,CAACG,IADxB;AAEL,2BAAuB,0BAAUC,MAAV,EAAkB;AACvC,aAAOK,GAAG,CAAC,qBAAD,CAAH,CAA2BL,MAA3B,CAAP;AACD,KAJI;AAKL,yBAAqB,wBAAUA,MAAV,EAAkBC,KAAlB,EAAyB;AAC5C,aAAO,CAACP,YAAY,CAACO,KAAD,CAAb,GAAuBN,OAAO,CAACU,GAAD,EAAML,MAAN,EAAc,CAACC,KAAD,CAAd,CAA9B,GAAuDN,OAAO,CAACU,GAAD,EAAML,MAAN,EAAcC,KAAd,CAArE;AACD;AAPI,GAAP;AASD,CAXD;;AAaAK,MAAM,CAACC,OAAP,GAAiBJ,QAAjB","sourcesContent":["var _forceReduced =\n/*#__PURE__*/\nrequire(\"./_forceReduced\");\n\nvar _isArrayLike =\n/*#__PURE__*/\nrequire(\"./_isArrayLike\");\n\nvar _reduce =\n/*#__PURE__*/\nrequire(\"./_reduce\");\n\nvar _xfBase =\n/*#__PURE__*/\nrequire(\"./_xfBase\");\n\nvar preservingReduced = function (xf) {\n  return {\n    '@@transducer/init': _xfBase.init,\n    '@@transducer/result': function (result) {\n      return xf['@@transducer/result'](result);\n    },\n    '@@transducer/step': function (result, input) {\n      var ret = xf['@@transducer/step'](result, input);\n      return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n    }\n  };\n};\n\nvar _flatCat = function _xcat(xf) {\n  var rxf = preservingReduced(xf);\n  return {\n    '@@transducer/init': _xfBase.init,\n    '@@transducer/result': function (result) {\n      return rxf['@@transducer/result'](result);\n    },\n    '@@transducer/step': function (result, input) {\n      return !_isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);\n    }\n  };\n};\n\nmodule.exports = _flatCat;"]}