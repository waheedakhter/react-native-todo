{"version":3,"sources":["toInteger32.js"],"names":["exports","__esModule","_ramda","require","toInteger32","curryN","val","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAoBA,IAAIC,WAAW,GAAG,CAAC,GAAGF,MAAM,CAACG,MAAX,EAAmB,CAAnB,EAAsB,UAAUC,GAAV,EAAe;AACrD,SAAOA,GAAG,IAAI,CAAd;AACD,CAFiB,CAAlB;AAGA,IAAIC,QAAQ,GAAGH,WAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBO,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Converts double-precision 64-bit binary format IEEE 754 to signed 32 bit integer number.\n *\n * @func toInteger32\n * @aliases toInt32\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.28.0|v2.28.0}\n * @category Math\n * @sig Number -> Number\n * @param {number} number A number\n * @return {number} A signed 32-bit integer number\n * @see {@link RA.toUInteger32|toUInteger32}, {@link http://speakingjs.com/es5/ch11.html#integers_via_bitwise_operators}\n * @example\n *\n * RA.toInteger32(2 ** 35); // => 0\n * RA.toInteger32(2 ** 30); // => 1073741824\n */\n// eslint-disable-next-line no-bitwise\nvar toInteger32 = (0, _ramda.curryN)(1, function (val) {\n  return val >> 0;\n});\nvar _default = toInteger32;\nexports[\"default\"] = _default;"]}