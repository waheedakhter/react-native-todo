{"version":3,"sources":["lensEq.js"],"names":["exports","__esModule","_ramda","require","lensEq","curryN","lens","val","data","pipe","view","equals","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAuBA,IAAIC,MAAM,GAAG,CAAC,GAAGF,MAAM,CAACG,MAAX,EAAmB,CAAnB,EAAsB,UAAUC,IAAV,EAAgBC,GAAhB,EAAqBC,IAArB,EAA2B;AAC5D,SAAO,CAAC,GAAGN,MAAM,CAACO,IAAX,EAAiB,CAAC,GAAGP,MAAM,CAACQ,IAAX,EAAiBJ,IAAjB,CAAjB,EAAyC,CAAC,GAAGJ,MAAM,CAACS,MAAX,EAAmBJ,GAAnB,CAAzC,EAAkEC,IAAlE,CAAP;AACD,CAFY,CAAb;AAGA,IAAII,QAAQ,GAAGR,MAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBY,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Returns `true` if data structure focused by the given lens equals provided value.\n *\n * @func lensEq\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|1.13.0}\n * @category Relation\n * @typedef Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig  Lens s a -> b -> s -> Boolean\n * @see {@link RA.lensNotEq|lensNotEq}\n * @param {function} lens Van Laarhoven lens\n * @param {*} value The value to compare the focused data structure with\n * @param {*} data The data structure\n * @return {boolean} `true` if the focused data structure equals value, `false` otherwise\n *\n * @example\n *\n * RA.lensEq(R.lensIndex(0), 1, [0, 1, 2]); // => false\n * RA.lensEq(R.lensIndex(1), 1, [0, 1, 2]); // => true\n * RA.lensEq(R.lensPath(['a', 'b']), 'foo', { a: { b: 'foo' } }) // => true\n */\nvar lensEq = (0, _ramda.curryN)(3, function (lens, val, data) {\n  return (0, _ramda.pipe)((0, _ramda.view)(lens), (0, _ramda.equals)(val))(data);\n});\nvar _default = lensEq;\nexports[\"default\"] = _default;"]}