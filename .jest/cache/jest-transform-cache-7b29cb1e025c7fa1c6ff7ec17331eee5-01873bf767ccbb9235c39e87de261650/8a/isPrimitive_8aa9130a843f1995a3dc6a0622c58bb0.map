{"version":3,"sources":["isPrimitive.js"],"names":["exports","__esModule","_ramda","require","_isNotObj","_interopRequireDefault","_isString","_isNumber","_isBigInt","_isBoolean","_isUndefined","_isNull","_isSymbol","obj","isPrimitive","both","anyPass","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,SAAS,GAAGC,sBAAsB,CAACF,OAAO,CAAC,YAAD,CAAR,CAAtC;;AAEA,IAAIG,SAAS,GAAGD,sBAAsB,CAACF,OAAO,CAAC,YAAD,CAAR,CAAtC;;AAEA,IAAII,SAAS,GAAGF,sBAAsB,CAACF,OAAO,CAAC,YAAD,CAAR,CAAtC;;AAEA,IAAIK,SAAS,GAAGH,sBAAsB,CAACF,OAAO,CAAC,YAAD,CAAR,CAAtC;;AAEA,IAAIM,UAAU,GAAGJ,sBAAsB,CAACF,OAAO,CAAC,aAAD,CAAR,CAAvC;;AAEA,IAAIO,YAAY,GAAGL,sBAAsB,CAACF,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIQ,OAAO,GAAGN,sBAAsB,CAACF,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,IAAIS,SAAS,GAAGP,sBAAsB,CAACF,OAAO,CAAC,YAAD,CAAR,CAAtC;;AAEA,SAASE,sBAAT,CAAgCQ,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACZ,UAAX,GAAwBY,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAqBjG,IAAIC,WAAW,GAAG,CAAC,GAAGZ,MAAM,CAACa,IAAX,EAAiBX,SAAS,CAAC,SAAD,CAA1B,EAAuC,CAAC,GAAGF,MAAM,CAACc,OAAX,EAAoB,CAACV,SAAS,CAAC,SAAD,CAAV,EAAuBC,SAAS,CAAC,SAAD,CAAhC,EAA6CC,SAAS,CAAC,SAAD,CAAtD,EAAmEC,UAAU,CAAC,SAAD,CAA7E,EAA0FC,YAAY,CAAC,SAAD,CAAtG,EAAmHC,OAAO,CAAC,SAAD,CAA1H,EAAuIC,SAAS,CAAC,SAAD,CAAhJ,CAApB,CAAvC,CAAlB;AACA,IAAIK,QAAQ,GAAGH,WAAf;AACAd,OAAO,CAAC,SAAD,CAAP,GAAqBiB,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isNotObj = _interopRequireDefault(require(\"./isNotObj\"));\n\nvar _isString = _interopRequireDefault(require(\"./isString\"));\n\nvar _isNumber = _interopRequireDefault(require(\"./isNumber\"));\n\nvar _isBigInt = _interopRequireDefault(require(\"./isBigInt\"));\n\nvar _isBoolean = _interopRequireDefault(require(\"./isBoolean\"));\n\nvar _isUndefined = _interopRequireDefault(require(\"./isUndefined\"));\n\nvar _isNull = _interopRequireDefault(require(\"./isNull\"));\n\nvar _isSymbol = _interopRequireDefault(require(\"./isSymbol\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Checks if value is a primitive data type. There are 6 primitive data types: `string`, `number`, `bigint`, `boolean`, `undefined`, `symbol` and a special case of `null`.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\n * for definition of what sub-types comprise a primitive.\n *\n * @func isPrimitive\n * @category Type\n * @sig * -> Boolean\n * @since {@link https://char0n.github.io/ramda-adjunct/2.32.0|v2.32.0}\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotPrimitive|isNotPrimitive}, {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values|MDN Primitive values}, {@link https://developer.mozilla.org/en-US/docs/Glossary/Primitive|MDN Primitive}\n * @example\n *\n * RA.isPrimitive(\"string\"); //=> true\n * RA.isPrimitive(1); //=> true\n * RA.isPrimitive(new String(\"string\")); //=> false\n * RA.isPrimitive(new Number(1)); //=> false\n */\nvar isPrimitive = (0, _ramda.both)(_isNotObj[\"default\"], (0, _ramda.anyPass)([_isString[\"default\"], _isNumber[\"default\"], _isBigInt[\"default\"], _isBoolean[\"default\"], _isUndefined[\"default\"], _isNull[\"default\"], _isSymbol[\"default\"]]));\nvar _default = isPrimitive;\nexports[\"default\"] = _default;"]}