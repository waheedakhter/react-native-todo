{"version":3,"sources":["cond.js"],"names":["_arity","require","_curry1","map","max","reduce","cond","pairs","arity","pair","length","idx","apply","arguments","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAEVC,OAAO,CAAC,mBAAD,CAFP;;AAIA,IAAIC,OAAO,GAEXD,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIE,GAAG,GAEPF,OAAO,CAAC,OAAD,CAFP;;AAIA,IAAIG,GAAG,GAEPH,OAAO,CAAC,OAAD,CAFP;;AAIA,IAAII,MAAM,GAEVJ,OAAO,CAAC,UAAD,CAFP;;AAgCA,IAAIK,IAAI,GAERJ,OAAO,CAAC,SAASI,IAAT,CAAcC,KAAd,EAAqB;AAC3B,MAAIC,KAAK,GAAGH,MAAM,CAACD,GAAD,EAAM,CAAN,EAASD,GAAG,CAAC,UAAUM,IAAV,EAAgB;AAC7C,WAAOA,IAAI,CAAC,CAAD,CAAJ,CAAQC,MAAf;AACD,GAF6B,EAE3BH,KAF2B,CAAZ,CAAlB;AAGA,SAAOP,MAAM,CAACQ,KAAD,EAAQ,YAAY;AAC/B,QAAIG,GAAG,GAAG,CAAV;;AAEA,WAAOA,GAAG,GAAGJ,KAAK,CAACG,MAAnB,EAA2B;AACzB,UAAIH,KAAK,CAACI,GAAD,CAAL,CAAW,CAAX,EAAcC,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAJ,EAA0C;AACxC,eAAON,KAAK,CAACI,GAAD,CAAL,CAAW,CAAX,EAAcC,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAP;AACD;;AAEDF,MAAAA,GAAG,IAAI,CAAP;AACD;AACF,GAVY,CAAb;AAWD,CAfM,CAFP;;AAmBAG,MAAM,CAACC,OAAP,GAAiBT,IAAjB","sourcesContent":["var _arity =\n/*#__PURE__*/\nrequire(\"./internal/_arity\");\n\nvar _curry1 =\n/*#__PURE__*/\nrequire(\"./internal/_curry1\");\n\nvar map =\n/*#__PURE__*/\nrequire(\"./map\");\n\nvar max =\n/*#__PURE__*/\nrequire(\"./max\");\n\nvar reduce =\n/*#__PURE__*/\nrequire(\"./reduce\");\n/**\n * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\n * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\n * to `fn` are applied to each of the predicates in turn until one returns a\n * \"truthy\" value, at which point `fn` returns the result of applying its\n * arguments to the corresponding transformer. If none of the predicates\n * matches, `fn` returns undefined.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Logic\n * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n * @param {Array} pairs A list of [predicate, transformer]\n * @return {Function}\n * @see R.ifElse, R.unless, R.when\n * @example\n *\n *      const fn = R.cond([\n *        [R.equals(0),   R.always('water freezes at 0°C')],\n *        [R.equals(100), R.always('water boils at 100°C')],\n *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n *      ]);\n *      fn(0); //=> 'water freezes at 0°C'\n *      fn(50); //=> 'nothing special happens at 50°C'\n *      fn(100); //=> 'water boils at 100°C'\n */\n\n\nvar cond =\n/*#__PURE__*/\n_curry1(function cond(pairs) {\n  var arity = reduce(max, 0, map(function (pair) {\n    return pair[0].length;\n  }, pairs));\n  return _arity(arity, function () {\n    var idx = 0;\n\n    while (idx < pairs.length) {\n      if (pairs[idx][0].apply(this, arguments)) {\n        return pairs[idx][1].apply(this, arguments);\n      }\n\n      idx += 1;\n    }\n  });\n});\n\nmodule.exports = cond;"]}