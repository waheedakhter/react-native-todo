61cfdbb57302e702cb2ab4ef47442e28
var _clone = require("./internal/_clone");

var _curryN = require("./internal/_curryN");

var _dispatchable = require("./internal/_dispatchable");

var _has = require("./internal/_has");

var _reduce = require("./internal/_reduce");

var _xreduceBy = require("./internal/_xreduceBy");

var reduceBy = _curryN(4, [], _dispatchable([], _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {
  return _reduce(function (acc, elt) {
    var key = keyFn(elt);
    acc[key] = valueFn(_has(key, acc) ? acc[key] : _clone(valueAcc, [], [], false), elt);
    return acc;
  }, {}, list);
}));

module.exports = reduceBy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHVjZUJ5LmpzIl0sIm5hbWVzIjpbIl9jbG9uZSIsInJlcXVpcmUiLCJfY3VycnlOIiwiX2Rpc3BhdGNoYWJsZSIsIl9oYXMiLCJfcmVkdWNlIiwiX3hyZWR1Y2VCeSIsInJlZHVjZUJ5IiwidmFsdWVGbiIsInZhbHVlQWNjIiwia2V5Rm4iLCJsaXN0IiwiYWNjIiwiZWx0Iiwia2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsTUFBTSxHQUVWQyxPQUFPLENBQUMsbUJBQUQsQ0FGUDs7QUFJQSxJQUFJQyxPQUFPLEdBRVhELE9BQU8sQ0FBQyxvQkFBRCxDQUZQOztBQUlBLElBQUlFLGFBQWEsR0FFakJGLE9BQU8sQ0FBQywwQkFBRCxDQUZQOztBQUlBLElBQUlHLElBQUksR0FFUkgsT0FBTyxDQUFDLGlCQUFELENBRlA7O0FBSUEsSUFBSUksT0FBTyxHQUVYSixPQUFPLENBQUMsb0JBQUQsQ0FGUDs7QUFJQSxJQUFJSyxVQUFVLEdBRWRMLE9BQU8sQ0FBQyx1QkFBRCxDQUZQOztBQThDQSxJQUFJTSxRQUFRLEdBRVpMLE9BQU8sQ0FBQyxDQUFELEVBQUksRUFBSixFQUVQQyxhQUFhLENBQUMsRUFBRCxFQUFLRyxVQUFMLEVBQWlCLFNBQVNDLFFBQVQsQ0FBa0JDLE9BQWxCLEVBQTJCQyxRQUEzQixFQUFxQ0MsS0FBckMsRUFBNENDLElBQTVDLEVBQWtEO0FBQzlFLFNBQU9OLE9BQU8sQ0FBQyxVQUFVTyxHQUFWLEVBQWVDLEdBQWYsRUFBb0I7QUFDakMsUUFBSUMsR0FBRyxHQUFHSixLQUFLLENBQUNHLEdBQUQsQ0FBZjtBQUNBRCxJQUFBQSxHQUFHLENBQUNFLEdBQUQsQ0FBSCxHQUFXTixPQUFPLENBQUNKLElBQUksQ0FBQ1UsR0FBRCxFQUFNRixHQUFOLENBQUosR0FBaUJBLEdBQUcsQ0FBQ0UsR0FBRCxDQUFwQixHQUE0QmQsTUFBTSxDQUFDUyxRQUFELEVBQVcsRUFBWCxFQUFlLEVBQWYsRUFBbUIsS0FBbkIsQ0FBbkMsRUFBOERJLEdBQTlELENBQWxCO0FBQ0EsV0FBT0QsR0FBUDtBQUNELEdBSmEsRUFJWCxFQUpXLEVBSVBELElBSk8sQ0FBZDtBQUtELENBTlksQ0FGTixDQUZQOztBQVlBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUJULFFBQWpCIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9jbG9uZSA9XG4vKiNfX1BVUkVfXyovXG5yZXF1aXJlKFwiLi9pbnRlcm5hbC9fY2xvbmVcIik7XG5cbnZhciBfY3VycnlOID1cbi8qI19fUFVSRV9fKi9cbnJlcXVpcmUoXCIuL2ludGVybmFsL19jdXJyeU5cIik7XG5cbnZhciBfZGlzcGF0Y2hhYmxlID1cbi8qI19fUFVSRV9fKi9cbnJlcXVpcmUoXCIuL2ludGVybmFsL19kaXNwYXRjaGFibGVcIik7XG5cbnZhciBfaGFzID1cbi8qI19fUFVSRV9fKi9cbnJlcXVpcmUoXCIuL2ludGVybmFsL19oYXNcIik7XG5cbnZhciBfcmVkdWNlID1cbi8qI19fUFVSRV9fKi9cbnJlcXVpcmUoXCIuL2ludGVybmFsL19yZWR1Y2VcIik7XG5cbnZhciBfeHJlZHVjZUJ5ID1cbi8qI19fUFVSRV9fKi9cbnJlcXVpcmUoXCIuL2ludGVybmFsL194cmVkdWNlQnlcIik7XG4vKipcbiAqIEdyb3VwcyB0aGUgZWxlbWVudHMgb2YgdGhlIGxpc3QgYWNjb3JkaW5nIHRvIHRoZSByZXN1bHQgb2YgY2FsbGluZ1xuICogdGhlIFN0cmluZy1yZXR1cm5pbmcgZnVuY3Rpb24gYGtleUZuYCBvbiBlYWNoIGVsZW1lbnQgYW5kIHJlZHVjZXMgdGhlIGVsZW1lbnRzXG4gKiBvZiBlYWNoIGdyb3VwIHRvIGEgc2luZ2xlIHZhbHVlIHZpYSB0aGUgcmVkdWNlciBmdW5jdGlvbiBgdmFsdWVGbmAuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBiYXNpY2FsbHkgYSBtb3JlIGdlbmVyYWwgW2Bncm91cEJ5YF0oI2dyb3VwQnkpIGZ1bmN0aW9uLlxuICpcbiAqIEFjdHMgYXMgYSB0cmFuc2R1Y2VyIGlmIGEgdHJhbnNmb3JtZXIgaXMgZ2l2ZW4gaW4gbGlzdCBwb3NpdGlvbi5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4yMC4wXG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyAoKGEsIGIpIC0+IGEpIC0+IGEgLT4gKGIgLT4gU3RyaW5nKSAtPiBbYl0gLT4ge1N0cmluZzogYX1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHZhbHVlRm4gVGhlIGZ1bmN0aW9uIHRoYXQgcmVkdWNlcyB0aGUgZWxlbWVudHMgb2YgZWFjaCBncm91cCB0byBhIHNpbmdsZVxuICogICAgICAgIHZhbHVlLiBSZWNlaXZlcyB0d28gdmFsdWVzLCBhY2N1bXVsYXRvciBmb3IgYSBwYXJ0aWN1bGFyIGdyb3VwIGFuZCB0aGUgY3VycmVudCBlbGVtZW50LlxuICogQHBhcmFtIHsqfSBhY2MgVGhlIChpbml0aWFsKSBhY2N1bXVsYXRvciB2YWx1ZSBmb3IgZWFjaCBncm91cC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleUZuIFRoZSBmdW5jdGlvbiB0aGF0IG1hcHMgdGhlIGxpc3QncyBlbGVtZW50IGludG8gYSBrZXkuXG4gKiBAcGFyYW0ge0FycmF5fSBsaXN0IFRoZSBhcnJheSB0byBncm91cC5cbiAqIEByZXR1cm4ge09iamVjdH0gQW4gb2JqZWN0IHdpdGggdGhlIG91dHB1dCBvZiBga2V5Rm5gIGZvciBrZXlzLCBtYXBwZWQgdG8gdGhlIG91dHB1dCBvZlxuICogICAgICAgICBgdmFsdWVGbmAgZm9yIGVsZW1lbnRzIHdoaWNoIHByb2R1Y2VkIHRoYXQga2V5IHdoZW4gcGFzc2VkIHRvIGBrZXlGbmAuXG4gKiBAc2VlIFIuZ3JvdXBCeSwgUi5yZWR1Y2VcbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBjb25zdCBncm91cE5hbWVzID0gKGFjYywge25hbWV9KSA9PiBhY2MuY29uY2F0KG5hbWUpXG4gKiAgICAgIGNvbnN0IHRvR3JhZGUgPSAoe3Njb3JlfSkgPT5cbiAqICAgICAgICBzY29yZSA8IDY1ID8gJ0YnIDpcbiAqICAgICAgICBzY29yZSA8IDcwID8gJ0QnIDpcbiAqICAgICAgICBzY29yZSA8IDgwID8gJ0MnIDpcbiAqICAgICAgICBzY29yZSA8IDkwID8gJ0InIDogJ0EnXG4gKlxuICogICAgICB2YXIgc3R1ZGVudHMgPSBbXG4gKiAgICAgICAge25hbWU6ICdBYmJ5Jywgc2NvcmU6IDgzfSxcbiAqICAgICAgICB7bmFtZTogJ0JhcnQnLCBzY29yZTogNjJ9LFxuICogICAgICAgIHtuYW1lOiAnQ3VydCcsIHNjb3JlOiA4OH0sXG4gKiAgICAgICAge25hbWU6ICdEb3JhJywgc2NvcmU6IDkyfSxcbiAqICAgICAgXVxuICpcbiAqICAgICAgcmVkdWNlQnkoZ3JvdXBOYW1lcywgW10sIHRvR3JhZGUsIHN0dWRlbnRzKVxuICogICAgICAvLz0+IHtcIkFcIjogW1wiRG9yYVwiXSwgXCJCXCI6IFtcIkFiYnlcIiwgXCJDdXJ0XCJdLCBcIkZcIjogW1wiQmFydFwiXX1cbiAqL1xuXG5cbnZhciByZWR1Y2VCeSA9XG4vKiNfX1BVUkVfXyovXG5fY3VycnlOKDQsIFtdLFxuLyojX19QVVJFX18qL1xuX2Rpc3BhdGNoYWJsZShbXSwgX3hyZWR1Y2VCeSwgZnVuY3Rpb24gcmVkdWNlQnkodmFsdWVGbiwgdmFsdWVBY2MsIGtleUZuLCBsaXN0KSB7XG4gIHJldHVybiBfcmVkdWNlKGZ1bmN0aW9uIChhY2MsIGVsdCkge1xuICAgIHZhciBrZXkgPSBrZXlGbihlbHQpO1xuICAgIGFjY1trZXldID0gdmFsdWVGbihfaGFzKGtleSwgYWNjKSA/IGFjY1trZXldIDogX2Nsb25lKHZhbHVlQWNjLCBbXSwgW10sIGZhbHNlKSwgZWx0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSwgbGlzdCk7XG59KSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVkdWNlQnk7Il19