{"version":3,"sources":["viewOr.js"],"names":["exports","__esModule","_ramda","require","viewOr","curryN","defaultValue","lens","data","defaultTo","view","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AA0BA,IAAIC,MAAM,GAAG,CAAC,GAAGF,MAAM,CAACG,MAAX,EAAmB,CAAnB,EAAsB,UAAUC,YAAV,EAAwBC,IAAxB,EAA8BC,IAA9B,EAAoC;AACrE,SAAO,CAAC,GAAGN,MAAM,CAACO,SAAX,EAAsBH,YAAtB,EAAoC,CAAC,GAAGJ,MAAM,CAACQ,IAAX,EAAiBH,IAAjB,EAAuBC,IAAvB,CAApC,CAAP;AACD,CAFY,CAAb;AAGA,IAAIG,QAAQ,GAAGP,MAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBW,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Returns a \"view\" of the given data structure, determined by the given lens.\n * The lens's focus determines which portion of the data structure is visible.\n * Returns the defaultValue if \"view\" is null, undefined or NaN; otherwise the \"view\" is returned.\n *\n * @func viewOr\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|1.13.0}\n * @category Object\n * @typedef Lens s b = Functor f => (b -> f b) -> s -> f s\n * @sig a -> Lens s b -> s -> b | a\n * @see {@link http://ramdajs.com/docs/#view|R.view}\n * @param {*} defaultValue The default value\n * @param {Function} lens Van Laarhoven lens\n * @param {*} data The data structure\n * @returns {*} \"view\" or defaultValue\n *\n * @example\n *\n * RA.viewOr('N/A', R.lensProp('x'), {}); // => 'N/A'\n * RA.viewOr('N/A', R.lensProp('x'), { x: 1 }); // => 1\n * RA.viewOr('some', R.lensProp('y'), { y: null }); // => 'some'\n * RA.viewOr('some', R.lensProp('y'), { y: false }); // => false\n */\nvar viewOr = (0, _ramda.curryN)(3, function (defaultValue, lens, data) {\n  return (0, _ramda.defaultTo)(defaultValue, (0, _ramda.view)(lens, data));\n});\nvar _default = viewOr;\nexports[\"default\"] = _default;"]}