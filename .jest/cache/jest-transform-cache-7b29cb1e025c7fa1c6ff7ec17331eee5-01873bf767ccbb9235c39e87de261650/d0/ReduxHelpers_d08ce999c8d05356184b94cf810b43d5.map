{"version":3,"sources":["ReduxHelpers.ts"],"names":["mapReducers","initialState","reducers","actionCreators","reducerMap","Map","Object","entries","map","key","val","state","action","reducer","get","type"],"mappings":";;;;;;;;;AACA;;AAYO,SAASA,WAAT,CAAqDC,YAArD,EAAsEC,QAAtE,EAAmFC,cAAnF,EAAoI;AACzI,MAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,OAAP,CAAeJ,cAAf,EAA+BK,GAA/B,CAAmC;AAAA;AAAA,QAAEC,GAAF;AAAA,QAAOC,GAAP;;AAAA,WAAwC,CAAC,8BAAQA,GAAR,CAAD,EAAeR,QAAQ,CAACO,GAAD,CAAvB,CAAxC;AAAA,GAAnC,CAAR,CAAnB;AAEA,SAAO,YAAgD;AAAA,QAA/CE,KAA+C,uEAApCV,YAAoC;AAAA,QAAtBW,MAAsB;;AACrD,QAAI,EAAE,UAAUA,MAAZ,CAAJ,EAAyB;AACvB,aAAOD,KAAP;AACD;;AACD,QAAME,OAAO,GAAGT,UAAU,CAACU,GAAX,CAAeF,MAAM,CAACG,IAAtB,CAAhB;;AACA,QAAI,CAACF,OAAL,EAAc;AACZ,aAAOF,KAAP;AACD;;AACD,WAAOE,OAAO,CAACF,KAAD,EAAQC,MAAR,CAAd;AACD,GATD;AAUD","sourcesContent":["import { AnyAction, Reducer, ReducersMapObject } from \"redux\";\nimport { FluxStandardAction, getType, TypeGetter } from \"typesafe-actions\";\n\nexport type FluxActionCreator<T extends string, AC extends (...args: any[]) => FluxStandardAction<T> = any> = AC & TypeGetter<T>;\n\ntype ActionCreatorMap<T> = {\n  readonly [P in keyof T]: FluxActionCreator<P>;\n};\n\nexport type ReducerMap<A, S> = {\n  readonly [T in keyof A]: Reducer<S>;\n};\n\nexport function mapReducers<S, R extends ReducersMapObject>(initialState: S, reducers: R, actionCreators: ActionCreatorMap<R>): Reducer<S> {\n  const reducerMap = new Map(Object.entries(actionCreators).map(([key, val]): [string, Reducer<any>] => [getType(val), reducers[key]]));\n\n  return (state: S = initialState, action: AnyAction) => {\n    if (!(\"type\" in action)) {\n      return state;\n    }\n    const reducer = reducerMap.get(action.type);\n    if (!reducer) {\n      return state;\n    }\n    return reducer(state, action);\n  };\n}\n"]}