{"version":3,"sources":["partition.js"],"names":["filter","require","juxt","reject","partition","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAEVC,OAAO,CAAC,UAAD,CAFP;;AAIA,IAAIC,IAAI,GAERD,OAAO,CAAC,QAAD,CAFP;;AAIA,IAAIE,MAAM,GAEVF,OAAO,CAAC,UAAD,CAFP;;AA6BA,IAAIG,SAAS,GAEbF,IAAI,CAAC,CAACF,MAAD,EAASG,MAAT,CAAD,CAFJ;AAGAE,MAAM,CAACC,OAAP,GAAiBF,SAAjB","sourcesContent":["var filter =\n/*#__PURE__*/\nrequire(\"./filter\");\n\nvar juxt =\n/*#__PURE__*/\nrequire(\"./juxt\");\n\nvar reject =\n/*#__PURE__*/\nrequire(\"./reject\");\n/**\n * Takes a predicate and a list or other `Filterable` object and returns the\n * pair of filterable objects of the same type of elements which do and do not\n * satisfy, the predicate, respectively. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n * @param {Function} pred A predicate to determine which side the element belongs to.\n * @param {Array} filterable the list (or other filterable) to partition.\n * @return {Array} An array, containing first the subset of elements that satisfy the\n *         predicate, and second the subset of elements that do not satisfy.\n * @see R.filter, R.reject\n * @example\n *\n *      R.partition(R.includes('s'), ['sss', 'ttt', 'foo', 'bars']);\n *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n *\n *      R.partition(R.includes('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n */\n\n\nvar partition =\n/*#__PURE__*/\njuxt([filter, reject]);\nmodule.exports = partition;"]}