dc8308bafbd15ba69f20857bc5d4d670
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var merge = require('merge-options').bind({
  concatArrays: true,
  ignoreUndefined: true
});

var asMock = {
  __INTERNAL_MOCK_STORAGE__: {},
  setItem: jest.fn(function _callee(key, value, callback) {
    var setResult;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap(asMock.multiSet([[key, value]], undefined));

          case 2:
            setResult = _context.sent;
            callback && callback(setResult);
            return _context.abrupt("return", setResult);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  }),
  getItem: jest.fn(function _callee2(key, callback) {
    var getResult, result;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _regenerator.default.awrap(asMock.multiGet([key], undefined));

          case 2:
            getResult = _context2.sent;
            result = getResult[0] ? getResult[0][1] : null;
            callback && callback(null, result);
            return _context2.abrupt("return", result);

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, null, Promise);
  }),
  removeItem: jest.fn(function (key, callback) {
    return asMock.multiRemove([key], callback);
  }),
  mergeItem: jest.fn(function (key, value, callback) {
    return asMock.multiMerge([[key, value]], callback);
  }),
  clear: jest.fn(_clear),
  getAllKeys: jest.fn(_getAllKeys),
  flushGetRequests: jest.fn(),
  multiGet: jest.fn(_multiGet),
  multiSet: jest.fn(_multiSet),
  multiRemove: jest.fn(_multiRemove),
  multiMerge: jest.fn(_multiMerge),
  useAsyncStorage: jest.fn(function (key) {
    return {
      getItem: function getItem() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return asMock.getItem.apply(asMock, [key].concat(args));
      },
      setItem: function setItem() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return asMock.setItem.apply(asMock, [key].concat(args));
      },
      mergeItem: function mergeItem() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        return asMock.mergeItem.apply(asMock, [key].concat(args));
      },
      removeItem: function removeItem() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        return asMock.removeItem.apply(asMock, [key].concat(args));
      }
    };
  })
};

function _multiSet(keyValuePairs, callback) {
  return _regenerator.default.async(function _multiSet$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          keyValuePairs.forEach(function (keyValue) {
            var key = keyValue[0];
            asMock.__INTERNAL_MOCK_STORAGE__[key] = keyValue[1];
          });
          callback && callback(null);
          return _context3.abrupt("return", null);

        case 3:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, null, Promise);
}

function _multiGet(keys, callback) {
  var values;
  return _regenerator.default.async(function _multiGet$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          values = keys.map(function (key) {
            return [key, asMock.__INTERNAL_MOCK_STORAGE__[key] || null];
          });
          callback && callback(null, values);
          return _context4.abrupt("return", values);

        case 3:
        case "end":
          return _context4.stop();
      }
    }
  }, null, null, null, Promise);
}

function _multiRemove(keys, callback) {
  return _regenerator.default.async(function _multiRemove$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          keys.forEach(function (key) {
            if (asMock.__INTERNAL_MOCK_STORAGE__[key]) {
              delete asMock.__INTERNAL_MOCK_STORAGE__[key];
            }
          });
          callback && callback(null);
          return _context5.abrupt("return", null);

        case 3:
        case "end":
          return _context5.stop();
      }
    }
  }, null, null, null, Promise);
}

function _clear(callback) {
  return _regenerator.default.async(function _clear$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          asMock.__INTERNAL_MOCK_STORAGE__ = {};
          callback && callback(null);
          return _context6.abrupt("return", null);

        case 3:
        case "end":
          return _context6.stop();
      }
    }
  }, null, null, null, Promise);
}

function _getAllKeys() {
  return _regenerator.default.async(function _getAllKeys$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          return _context7.abrupt("return", Object.keys(asMock.__INTERNAL_MOCK_STORAGE__));

        case 1:
        case "end":
          return _context7.stop();
      }
    }
  }, null, null, null, Promise);
}

function _multiMerge(keyValuePairs, callback) {
  return _regenerator.default.async(function _multiMerge$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          keyValuePairs.forEach(function (keyValue) {
            var _keyValue = (0, _slicedToArray2.default)(keyValue, 2),
                key = _keyValue[0],
                value = _keyValue[1];

            var oldValue = asMock.__INTERNAL_MOCK_STORAGE__[key];
            asMock.__INTERNAL_MOCK_STORAGE__[key] = oldValue != null ? JSON.stringify(merge(JSON.parse(oldValue), JSON.parse(value))) : value;
          });
          callback && callback(null);
          return _context8.abrupt("return", null);

        case 3:
        case "end":
          return _context8.stop();
      }
    }
  }, null, null, null, Promise);
}

module.exports = asMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,