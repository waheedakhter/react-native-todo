{"version":3,"sources":["makeFlat.js"],"names":["exports","__esModule","_isArrayLike","_interopRequireDefault","require","obj","makeFlat","recursive","flatt","list","value","jlen","j","result","idx","length","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,YAAY,GAAGC,sBAAsB,CAACC,OAAO,CAAC,gBAAD,CAAR,CAAzC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACJ,UAAX,GAAwBI,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAgBjG,IAAIC,QAAQ,GAAG,SAASA,QAAT,CAAkBC,SAAlB,EAA6B;AAC1C,SAAO,SAASC,KAAT,CAAeC,IAAf,EAAqB;AAC1B,QAAIC,KAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,CAAJ;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,GAAG,GAAG,CAAV;;AAEA,WAAOA,GAAG,GAAGL,IAAI,CAACM,MAAlB,EAA0B;AACxB,UAAI,CAAC,GAAGb,YAAY,CAAC,SAAD,CAAhB,EAA6BO,IAAI,CAACK,GAAD,CAAjC,CAAJ,EAA6C;AAC3CJ,QAAAA,KAAK,GAAGH,SAAS,GAAGC,KAAK,CAACC,IAAI,CAACK,GAAD,CAAL,CAAR,GAAsBL,IAAI,CAACK,GAAD,CAA3C;AACAF,QAAAA,CAAC,GAAG,CAAJ;AACAD,QAAAA,IAAI,GAAGD,KAAK,CAACK,MAAb;;AAEA,eAAOH,CAAC,GAAGD,IAAX,EAAiB;AACfE,UAAAA,MAAM,CAACA,MAAM,CAACE,MAAR,CAAN,GAAwBL,KAAK,CAACE,CAAD,CAA7B;AACAA,UAAAA,CAAC,IAAI,CAAL;AACD;AACF,OATD,MASO;AACLC,QAAAA,MAAM,CAACA,MAAM,CAACE,MAAR,CAAN,GAAwBN,IAAI,CAACK,GAAD,CAA5B;AACD;;AAEDA,MAAAA,GAAG,IAAI,CAAP;AACD;;AAED,WAAOD,MAAP;AACD,GAzBD;AA0BD,CA3BD;;AA6BA,IAAIG,QAAQ,GAAGV,QAAf;AACAN,OAAO,CAAC,SAAD,CAAP,GAAqBgB,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _isArrayLike = _interopRequireDefault(require(\"../isArrayLike\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * `makeFlat` is a helper function that returns a one-level or fully recursive\n * function based on the flag passed in.\n *\n * @func makeFlat\n * @memberOf RA\n *\n * @category List\n * @param {!bool} = should recursively flatten\n * @param {!Array} = the nested list to be flattened\n * @return {!Array} = the flattened list\n * @sig Bool -> List -> List\n *\n */\nvar makeFlat = function makeFlat(recursive) {\n  return function flatt(list) {\n    var value;\n    var jlen;\n    var j;\n    var result = [];\n    var idx = 0;\n\n    while (idx < list.length) {\n      if ((0, _isArrayLike[\"default\"])(list[idx])) {\n        value = recursive ? flatt(list[idx]) : list[idx];\n        j = 0;\n        jlen = value.length;\n\n        while (j < jlen) {\n          result[result.length] = value[j];\n          j += 1;\n        }\n      } else {\n        result[result.length] = list[idx];\n      }\n\n      idx += 1;\n    }\n\n    return result;\n  };\n};\n\nvar _default = makeFlat;\nexports[\"default\"] = _default;"]}