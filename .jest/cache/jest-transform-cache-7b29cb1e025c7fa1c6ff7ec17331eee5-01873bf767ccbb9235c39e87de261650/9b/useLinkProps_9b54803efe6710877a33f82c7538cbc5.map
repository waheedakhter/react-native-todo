{"version":3,"sources":["useLinkProps.tsx"],"names":["action","navigation","React","NavigationHelpersContext","linkTo","onPress","e","shouldHandle","Platform","String","href","accessibilityRole"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAIA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAae,SAAA,YAAA,OAA6C;AAAA,MAAvB,EAAuB,QAAvB,EAAuB;AAAA,MAAjBA,MAAiB,QAAjBA,MAAiB;AAC1D,MAAMC,UAAU,GAAGC,KAAK,CAALA,UAAAA,CAAiBC,KAAAA,CAApC,wBAAmBD,CAAnB;AACA,MAAME,MAAM,GAAG,CAAA,GAAA,UAAA,CAAf,OAAe,GAAf;;AAEA,MAAMC,OAAO,GACXC,SADID,OACJC,CAAAA,CADc,EAEX;AAAA,QAAA,gBAAA;;AACH,QAAIC,YAAY,GAAhB,KAAA;;AAEA,QAAIC,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAAA,KAAAA,IAAyB,CAA7B,CAAA,EAAiC;AAC/BD,MAAAA,YAAY,GAAGD,CAAC,GAAG,CAACA,CAAC,CAAL,gBAAA,GAAhBC,IAAAA;AADF,KAAA,MAEO,IACL,CAACD,CAAC,CAAF,gBAAA,IAEA,EAAEA,CAAC,CAADA,OAAAA,IAAaA,CAAC,CAAdA,MAAAA,IAAyBA,CAAC,CAA1BA,OAAAA,IAAsCA,CAAC,CAFzC,QAEA,CAFA,KAICA,CAAC,CAADA,MAAAA,IAAAA,IAAAA,IAAoBA,CAAC,CAADA,MAAAA,KAJrB,CAAA,KAMA,CAAA,SAAA,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,QAAA,CAAA,CAAA,gBAAA,GAAuCA,CAAC,CAAxC,aAAA,MAAA,IAAA,IAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAuCA,gBAAAA,CAPlC,MAOL,CAPK,EAQL;AACAA,MAAAA,CAAC,CAADA,cAAAA;AACAC,MAAAA,YAAY,GAAZA,IAAAA;AACD;;AAED,QAAA,YAAA,EAAkB;AAChB,UAAA,MAAA,EAAY;AACV,YAAA,UAAA,EAAgB;AACdN,UAAAA,UAAU,CAAVA,QAAAA,CAAAA,MAAAA;AADF,SAAA,MAEO;AACL,gBAAM,IAAA,KAAA,CAAN,oCAAM,CAAN;AACD;AALH,OAAA,MAMO;AACL,YAAI,OAAA,EAAA,KAAJ,QAAA,EAA4B;AAC1B,gBAAM,IAAA,KAAA,CAAA,qCAAA,MAAA,CACiCQ,MAAM,CADvC,EACuC,CADvC,EAAN,8CAAM,CAAA,CAAN;AAKD;;AAEDL,QAAAA,MAAM,CAANA,EAAM,CAANA;AACD;AACF;AAtCH,GAAA;;AAyCA,SAAO;AACLM,IAAAA,IAAI,EADC,EAAA;AAELC,IAAAA,iBAAiB,EAFZ,MAAA;AAGLN,IAAAA,OAAAA,EAAAA;AAHK,GAAP;AAKD","sourcesContent":["import * as React from 'react';\nimport { Platform, GestureResponderEvent } from 'react-native';\nimport {\n  NavigationAction,\n  NavigationHelpersContext,\n} from '@react-navigation/core';\nimport useLinkTo from './useLinkTo';\n\ntype Props = {\n  to: string;\n  action?: NavigationAction;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps({ to, action }: Props) {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linkTo = useLinkTo();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object.\");\n        }\n      } else {\n        if (typeof to !== 'string') {\n          throw new Error(\n            `To 'to' option is invalid (found '${String(\n              to\n            )}'. It must be a valid string for navigation.`\n          );\n        }\n\n        linkTo(to);\n      }\n    }\n  };\n\n  return {\n    href: to,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"]}