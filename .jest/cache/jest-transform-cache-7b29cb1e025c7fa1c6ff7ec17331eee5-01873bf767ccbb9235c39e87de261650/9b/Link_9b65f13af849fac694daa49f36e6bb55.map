{"version":3,"sources":["Link.tsx"],"names":["rest","props","to","action","onPress","e","Text","web","onClick","default"],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAEA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBe,SAAA,IAAA,OAA8C;AAAA,MAAhC,EAAgC,QAAhC,EAAgC;AAAA,MAAhC,MAAgC,QAAhC,MAAgC;AAAA,MAAfA,IAAe;AAC3D,MAAMC,KAAK,GAAG,CAAA,GAAA,aAAA,CAAA,OAAA,EAAa;AAAEC,IAAAA,EAAF,EAAEA,EAAF;AAAMC,IAAAA,MAAAA,EAAAA;AAAN,GAAb,CAAd;;AAEA,MAAMC,OAAO,GACXC,SADID,OACJC,CAAAA,CADc,EAEX;AACH,QAAI,aAAJ,IAAA,EAAuB;AAAA,UAAA,aAAA;;AACrB,OAAA,aAAA,GAAA,IAAI,CAAJ,OAAA,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AACD;;AAEDJ,IAAAA,KAAK,CAALA,OAAAA,CAAAA,CAAAA;AAPF,GAAA;;AAUA,SAAO,KAAK,CAAL,aAAA,CAAoBK,YAAAA,CAApB,IAAA,6BAA0B,KAA1B,EAA0B,IAA1B,EAGF,YAAA,CAAA,QAAA,CAAA,MAAA,CAAgB;AACjBC,IAAAA,GAAG,EAAE;AAAEC,MAAAA,OAAO,EAAEJ;AAAX,KADY;AAEjBK,IAAAA,OAAO,EAAE;AAAEL,MAAAA,OAAAA,EAAAA;AAAF;AAFQ,GAAhB,CAHE,EAAP;AAQD","sourcesContent":["import * as React from 'react';\nimport { Text, TextProps, GestureResponderEvent, Platform } from 'react-native';\nimport type { NavigationAction } from '@react-navigation/core';\nimport useLinkProps from './useLinkProps';\n\ntype Props = {\n  to: string;\n  action?: NavigationAction;\n  target?: string;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n} & (TextProps & { children: React.ReactNode });\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link({ to, action, ...rest }: Props) {\n  const props = useLinkProps({ to, action });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n  });\n}\n"]}