7edd3e454d8bb69f71c0a4c9c069ec74
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runTiming = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _reactNativeReanimated = require("react-native-reanimated");

var runTiming = function runTiming(clock, value, dest, onFinish) {
  var config = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
    duration: 100,
    toValue: new _reactNativeReanimated.Value(0),
    easing: _reactNativeReanimated.Easing.inOut(_reactNativeReanimated.Easing.ease)
  };
  var state = {
    finished: new _reactNativeReanimated.Value(0),
    position: new _reactNativeReanimated.Value(0),
    time: new _reactNativeReanimated.Value(0),
    frameTime: new _reactNativeReanimated.Value(0)
  };
  return (0, _reactNativeReanimated.block)([(0, _reactNativeReanimated.cond)((0, _reactNativeReanimated.clockRunning)(clock), [(0, _reactNativeReanimated.set)(config.toValue, dest)], [(0, _reactNativeReanimated.set)(state.finished, 0), (0, _reactNativeReanimated.set)(state.time, 0), (0, _reactNativeReanimated.set)(state.position, value), (0, _reactNativeReanimated.set)(state.frameTime, 0), (0, _reactNativeReanimated.set)(config.toValue, dest), (0, _reactNativeReanimated.startClock)(clock)]), (0, _reactNativeReanimated.timing)(clock, state, config), (0, _reactNativeReanimated.cond)(state.finished, (0, _reactNativeReanimated.block)([(0, _reactNativeReanimated.stopClock)(clock), (0, _reactNativeReanimated.call)([state.finished], function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 1),
        finished = _ref2[0];

    if (finished) {
      onFinish == null ? void 0 : onFinish();
      (0, _reactNativeReanimated.set)(state.finished, 0);
    }
  })])), state.position]);
};

exports.runTiming = runTiming;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbInJ1blRpbWluZyIsImNsb2NrIiwidmFsdWUiLCJkZXN0Iiwib25GaW5pc2giLCJjb25maWciLCJkdXJhdGlvbiIsInRvVmFsdWUiLCJWYWx1ZSIsImVhc2luZyIsIkVhc2luZyIsImluT3V0IiwiZWFzZSIsInN0YXRlIiwiZmluaXNoZWQiLCJwb3NpdGlvbiIsInRpbWUiLCJmcmFtZVRpbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVPLElBQU1BLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQ3ZCQyxLQUR1QixFQUV2QkMsS0FGdUIsRUFHdkJDLElBSHVCLEVBSXZCQyxRQUp1QixFQVVwQjtBQUFBLE1BTEhDLE1BS0csdUVBTE07QUFDUEMsSUFBQUEsUUFBUSxFQUFFLEdBREg7QUFFUEMsSUFBQUEsT0FBTyxFQUFFLElBQUlDLDRCQUFKLENBQVUsQ0FBVixDQUZGO0FBR1BDLElBQUFBLE1BQU0sRUFBRUMsOEJBQU9DLEtBQVAsQ0FBYUQsOEJBQU9FLElBQXBCO0FBSEQsR0FLTjtBQUNILE1BQU1DLEtBQUssR0FBRztBQUNaQyxJQUFBQSxRQUFRLEVBQUUsSUFBSU4sNEJBQUosQ0FBVSxDQUFWLENBREU7QUFFWk8sSUFBQUEsUUFBUSxFQUFFLElBQUlQLDRCQUFKLENBQVUsQ0FBVixDQUZFO0FBR1pRLElBQUFBLElBQUksRUFBRSxJQUFJUiw0QkFBSixDQUFVLENBQVYsQ0FITTtBQUlaUyxJQUFBQSxTQUFTLEVBQUUsSUFBSVQsNEJBQUosQ0FBVSxDQUFWO0FBSkMsR0FBZDtBQU1BLFNBQU8sa0NBQU0sQ0FDWCxpQ0FDRSx5Q0FBYVAsS0FBYixDQURGLEVBRUUsQ0FFRSxnQ0FBSUksTUFBTSxDQUFDRSxPQUFYLEVBQW9CSixJQUFwQixDQUZGLENBRkYsRUFNRSxDQUVFLGdDQUFJVSxLQUFLLENBQUNDLFFBQVYsRUFBb0IsQ0FBcEIsQ0FGRixFQUdFLGdDQUFJRCxLQUFLLENBQUNHLElBQVYsRUFBZ0IsQ0FBaEIsQ0FIRixFQUlFLGdDQUFJSCxLQUFLLENBQUNFLFFBQVYsRUFBb0JiLEtBQXBCLENBSkYsRUFLRSxnQ0FBSVcsS0FBSyxDQUFDSSxTQUFWLEVBQXFCLENBQXJCLENBTEYsRUFNRSxnQ0FBSVosTUFBTSxDQUFDRSxPQUFYLEVBQW9CSixJQUFwQixDQU5GLEVBT0UsdUNBQVdGLEtBQVgsQ0FQRixDQU5GLENBRFcsRUFrQlgsbUNBQU9BLEtBQVAsRUFBY1ksS0FBZCxFQUFxQlIsTUFBckIsQ0FsQlcsRUFvQlgsaUNBQ0VRLEtBQUssQ0FBQ0MsUUFEUixFQUVFLGtDQUFNLENBQ0osc0NBQVViLEtBQVYsQ0FESSxFQUVKLGlDQUFLLENBQUNZLEtBQUssQ0FBQ0MsUUFBUCxDQUFMLEVBQXVCLGdCQUFnQjtBQUFBO0FBQUEsUUFBZEEsUUFBYzs7QUFDckMsUUFBSUEsUUFBSixFQUFjO0FBQ1pWLE1BQUFBLFFBQVEsUUFBUixZQUFBQSxRQUFRO0FBQ1Isc0NBQUlTLEtBQUssQ0FBQ0MsUUFBVixFQUFvQixDQUFwQjtBQUNEO0FBQ0YsR0FMRCxDQUZJLENBQU4sQ0FGRixDQXBCVyxFQWlDWEQsS0FBSyxDQUFDRSxRQWpDSyxDQUFOLENBQVA7QUFtQ0QsQ0FwRE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmltYXRlZENsb2NrLCBBbmltYXRlZE5vZGUsIGJsb2NrLCBjYWxsLCBjbG9ja1J1bm5pbmcsIGNvbmQsIEVhc2luZywgc2V0LCBzdGFydENsb2NrLCBzdG9wQ2xvY2ssIHRpbWluZywgVmFsdWUgfSBmcm9tIFwicmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWRcIjtcblxuZXhwb3J0IGNvbnN0IHJ1blRpbWluZyA9IChcbiAgY2xvY2s6IEFuaW1hdGVkQ2xvY2ssXG4gIHZhbHVlOiBBbmltYXRlZE5vZGUsXG4gIGRlc3Q6IHR5cGVvZiBBbmltYXRlZE5vZGUsXG4gIG9uRmluaXNoPzogKCkgPT4gdm9pZCxcbiAgY29uZmlnID0ge1xuICAgIGR1cmF0aW9uOiAxMDAsXG4gICAgdG9WYWx1ZTogbmV3IFZhbHVlKDApLFxuICAgIGVhc2luZzogRWFzaW5nLmluT3V0KEVhc2luZy5lYXNlKSxcbiAgfSxcbikgPT4ge1xuICBjb25zdCBzdGF0ZSA9IHtcbiAgICBmaW5pc2hlZDogbmV3IFZhbHVlKDApLFxuICAgIHBvc2l0aW9uOiBuZXcgVmFsdWUoMCksXG4gICAgdGltZTogbmV3IFZhbHVlKDApLFxuICAgIGZyYW1lVGltZTogbmV3IFZhbHVlKDApLFxuICB9O1xuICByZXR1cm4gYmxvY2soW1xuICAgIGNvbmQoXG4gICAgICBjbG9ja1J1bm5pbmcoY2xvY2spLFxuICAgICAgW1xuICAgICAgICAvLyBpZiB0aGUgY2xvY2sgaXMgYWxyZWFkeSBydW5uaW5nIHdlIHVwZGF0ZSB0aGUgdG9WYWx1ZSwgaW4gY2FzZSBhIG5ldyBkZXN0IGhhcyBiZWVuIHBhc3NlZCBpblxuICAgICAgICBzZXQoY29uZmlnLnRvVmFsdWUsIGRlc3QpLFxuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgLy8gaWYgdGhlIGNsb2NrIGlzbid0IHJ1bm5pbmcgd2UgcmVzZXQgYWxsIHRoZSBhbmltYXRpb24gcGFyYW1zIGFuZCBzdGFydCB0aGUgY2xvY2tcbiAgICAgICAgc2V0KHN0YXRlLmZpbmlzaGVkLCAwKSxcbiAgICAgICAgc2V0KHN0YXRlLnRpbWUsIDApLFxuICAgICAgICBzZXQoc3RhdGUucG9zaXRpb24sIHZhbHVlKSxcbiAgICAgICAgc2V0KHN0YXRlLmZyYW1lVGltZSwgMCksXG4gICAgICAgIHNldChjb25maWcudG9WYWx1ZSwgZGVzdCksXG4gICAgICAgIHN0YXJ0Q2xvY2soY2xvY2spLFxuICAgICAgXSxcbiAgICApLFxuICAgIC8vIHdlIHJ1biB0aGUgc3RlcCBoZXJlIHRoYXQgaXMgZ29pbmcgdG8gdXBkYXRlIHBvc2l0aW9uXG4gICAgdGltaW5nKGNsb2NrLCBzdGF0ZSwgY29uZmlnKSxcbiAgICAvLyBpZiB0aGUgYW5pbWF0aW9uIGlzIG92ZXIgd2Ugc3RvcCB0aGUgY2xvY2tcbiAgICBjb25kKFxuICAgICAgc3RhdGUuZmluaXNoZWQsXG4gICAgICBibG9jayhbXG4gICAgICAgIHN0b3BDbG9jayhjbG9jayksXG4gICAgICAgIGNhbGwoW3N0YXRlLmZpbmlzaGVkXSwgKFtmaW5pc2hlZF0pID0+IHtcbiAgICAgICAgICBpZiAoZmluaXNoZWQpIHtcbiAgICAgICAgICAgIG9uRmluaXNoPy4oKTtcbiAgICAgICAgICAgIHNldChzdGF0ZS5maW5pc2hlZCwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgIF0pLFxuICAgICksXG4gICAgLy8gd2UgbWFkZSB0aGUgYmxvY2sgcmV0dXJuIHRoZSB1cGRhdGVkIHBvc2l0aW9uXG4gICAgc3RhdGUucG9zaXRpb24sXG4gIF0pO1xufTtcbiJdfQ==