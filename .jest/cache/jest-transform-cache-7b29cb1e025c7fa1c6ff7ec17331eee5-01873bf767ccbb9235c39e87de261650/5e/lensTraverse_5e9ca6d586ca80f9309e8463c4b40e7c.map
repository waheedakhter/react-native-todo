{"version":3,"sources":["lensTraverse.js"],"names":["exports","__esModule","_ramda","require","_Identity","_interopRequireDefault","obj","lensTraverse","curryN","of","curry","toFunctorFn","target","traverse","pipe","prop","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,SAAS,GAAGC,sBAAsB,CAACF,OAAO,CAAC,yBAAD,CAAR,CAAtC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAmCjG,IAAIC,YAAY,GAAG,CAAC,GAAGL,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsB,UAAUC,EAAV,EAAc;AACrD,SAAO,CAAC,GAAGP,MAAM,CAACQ,KAAX,EAAkB,UAAUC,WAAV,EAAuBC,MAAvB,EAA+B;AACtD,WAAOR,SAAS,CAAC,SAAD,CAAT,CAAqBK,EAArB,CAAwB,CAAC,GAAGP,MAAM,CAACW,QAAX,EAAqBJ,EAArB,EAAyB,CAAC,GAAGP,MAAM,CAACY,IAAX,EAAiBH,WAAjB,EAA8B,CAAC,GAAGT,MAAM,CAACa,IAAX,EAAiB,OAAjB,CAA9B,CAAzB,EAAmFH,MAAnF,CAAxB,CAAP;AACD,GAFM,CAAP;AAGD,CAJkB,CAAnB;AAKA,IAAII,QAAQ,GAAGT,YAAf;AACAP,OAAO,CAAC,SAAD,CAAP,GAAqBgB,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _Identity = _interopRequireDefault(require(\"./fantasy-land/Identity\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Creates a [Traversable](https://github.com/fantasyland/fantasy-land#traversable) lens\n * from an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning function.\n *\n * When executed, it maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n * then uses [`sequence`](https://ramdajs.com/docs/#sequence) to transform the resulting Traversable of Applicative\n * into an Applicative of Traversable.\n *\n * Dispatches to the `traverse` method of the third argument, if present.\n *\n * @func lensTraverse\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.7.0|2.7.0}\n * @category Relation\n * @typedef Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Applicative f => (a -> f a) -> Lens s a\n * @param {!function} of The Applicative-returning function\n * @return {!function} The Traversable lens\n * @see {@link http://ramdajs.com/docs/#lens|R.lens}, {@link http://ramdajs.com/docs/#traverse|R.traverse}\n *\n * @example\n *\n * const maybeLens = RA.lensTraverse(Maybe.of);\n * const safeDiv = n => d => d === 0 ? Maybe.Nothing() : Maybe.Just(n / d)\n *\n * R.over(maybeLens, safeDiv(10), [2, 4, 5]); // => Just([5, 2.5, 2])\n * R.over(maybeLens, safeDiv(10), [2, 0, 5]); // => Nothing\n *\n * R.view(maybeLens, [Maybe.Just(2), Maybe.Just(3)]); // => Maybe.Just([2, 3])\n *\n * R.set(maybeLens, Maybe.Just(1), [Maybe.just(2), Maybe.Just(3)]); // => Maybe.Just([1, 1])\n */\nvar lensTraverse = (0, _ramda.curryN)(1, function (of) {\n  return (0, _ramda.curry)(function (toFunctorFn, target) {\n    return _Identity[\"default\"].of((0, _ramda.traverse)(of, (0, _ramda.pipe)(toFunctorFn, (0, _ramda.prop)('value')), target));\n  });\n});\nvar _default = lensTraverse;\nexports[\"default\"] = _default;"]}