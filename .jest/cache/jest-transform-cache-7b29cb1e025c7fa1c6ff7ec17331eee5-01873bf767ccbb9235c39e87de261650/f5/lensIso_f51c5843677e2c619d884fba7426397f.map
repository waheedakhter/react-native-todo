{"version":3,"sources":["lensIso.js"],"names":["exports","__esModule","_ramda","require","isomorphic","to","from","isomorphism","x","isomorphisms","curry","toFunctorFn","target","map","lensIso","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAQA,IAAIC,UAAU,GAAG,SAASA,UAAT,CAAoBC,EAApB,EAAwBC,IAAxB,EAA8B;AAC7C,MAAIC,WAAW,GAAG,SAASA,WAAT,CAAqBC,CAArB,EAAwB;AACxC,WAAOH,EAAE,CAACG,CAAD,CAAT;AACD,GAFD;;AAIAD,EAAAA,WAAW,CAACD,IAAZ,GAAmBA,IAAnB;AACA,SAAOC,WAAP;AACD,CAPD;;AAUA,IAAIE,YAAY,GAAG,SAASA,YAAT,CAAsBJ,EAAtB,EAA0BC,IAA1B,EAAgC;AACjD,SAAOF,UAAU,CAAC,CAAC,GAAGF,MAAM,CAACQ,KAAX,EAAkB,UAAUC,WAAV,EAAuBC,MAAvB,EAA+B;AACjE,WAAO,CAAC,GAAGV,MAAM,CAACW,GAAX,EAAgBP,IAAhB,EAAsBK,WAAW,CAACN,EAAE,CAACO,MAAD,CAAH,CAAjC,CAAP;AACD,GAFiB,CAAD,EAEb,CAAC,GAAGV,MAAM,CAACQ,KAAX,EAAkB,UAAUC,WAAV,EAAuBC,MAAvB,EAA+B;AACnD,WAAO,CAAC,GAAGV,MAAM,CAACW,GAAX,EAAgBR,EAAhB,EAAoBM,WAAW,CAACL,IAAI,CAACM,MAAD,CAAL,CAA/B,CAAP;AACD,GAFG,CAFa,CAAjB;AAKD,CAND;;AASA,IAAIN,IAAI,GAAG,CAAC,GAAGJ,MAAM,CAACQ,KAAX,EAAkB,UAAUH,WAAV,EAAuBC,CAAvB,EAA0B;AACrD,SAAOD,WAAW,CAACD,IAAZ,CAAiBE,CAAjB,CAAP;AACD,CAFU,CAAX;AA0BA,IAAIM,OAAO,GAAG,CAAC,GAAGZ,MAAM,CAACQ,KAAX,EAAkBD,YAAlB,CAAd;AACAK,OAAO,CAACR,IAAR,GAAeA,IAAf;AACA,IAAIS,QAAQ,GAAGD,OAAf;AACAd,OAAO,CAAC,SAAD,CAAP,GAAqBe,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n// This implementation was highly inspired by the implementations\n// in ramda-lens library.\n//\n// https://github.com/ramda/ramda-lens\n// isomorphic :: ((a -> b), (b -> a)) -> Isomorphism\n//     Isomorphism = x -> y\nvar isomorphic = function isomorphic(to, from) {\n  var isomorphism = function isomorphism(x) {\n    return to(x);\n  };\n\n  isomorphism.from = from;\n  return isomorphism;\n}; // isomorphisms :: ((a -> b), (b -> a)) -> (a -> b)\n\n\nvar isomorphisms = function isomorphisms(to, from) {\n  return isomorphic((0, _ramda.curry)(function (toFunctorFn, target) {\n    return (0, _ramda.map)(from, toFunctorFn(to(target)));\n  }), (0, _ramda.curry)(function (toFunctorFn, target) {\n    return (0, _ramda.map)(to, toFunctorFn(from(target)));\n  }));\n}; // from :: Isomorphism -> a -> b\n\n\nvar from = (0, _ramda.curry)(function (isomorphism, x) {\n  return isomorphism.from(x);\n});\n/**\n * Defines an isomorphism that will work like a lens. It takes two functions.\n * The function that converts and the function that recovers.\n *\n * @func lensIso\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.19.0|1.19.0}\n * @category Relation\n * @typedef Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig (s -> a) -> (a -> s) -> Lens s a\n * @param {!function} to The function that converts\n * @param {!function} from The function that recovers\n * @return {!function} The isomorphic lens\n * @see {@link http://ramdajs.com/docs/#lens|R.lens}\n *\n * @example\n *\n * const lensJSON = RA.lensIso(JSON.parse, JSON.stringify);\n *\n * R.over(lensJSON, assoc('b', 2), '{\"a\":1}'); //=> '{\"a\":1,\"b\":2}'\n * R.over(RA.lensIso.from(lensJSON), R.replace('}', ',\"b\":2}'), { a: 1 }); // => { a: 1, b: 2 }\n */\n\nvar lensIso = (0, _ramda.curry)(isomorphisms);\nlensIso.from = from;\nvar _default = lensIso;\nexports[\"default\"] = _default;"]}