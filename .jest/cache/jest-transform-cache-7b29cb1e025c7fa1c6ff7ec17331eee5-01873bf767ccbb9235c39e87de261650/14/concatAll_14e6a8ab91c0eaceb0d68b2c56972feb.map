{"version":3,"sources":["concatAll.js"],"names":["exports","__esModule","_ramda","require","_stubUndefined","_interopRequireDefault","obj","leftIdentitySemigroup","concat","identity","concatAll","pipe","reduce","when","identical","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,cAAc,GAAGC,sBAAsB,CAACF,OAAO,CAAC,iBAAD,CAAR,CAA3C;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,IAAIC,qBAAqB,GAAG;AAC1BC,EAAAA,MAAM,EAAEN,MAAM,CAACO;AADW,CAA5B;AA0BA,IAAIC,SAAS,GAAG,CAAC,GAAGR,MAAM,CAACS,IAAX,EAAiB,CAAC,GAAGT,MAAM,CAACU,MAAX,EAAmBV,MAAM,CAACM,MAA1B,EAAkCD,qBAAlC,CAAjB,EAA2E,CAAC,GAAGL,MAAM,CAACW,IAAX,EAAiB,CAAC,GAAGX,MAAM,CAACY,SAAX,EAAsBP,qBAAtB,CAAjB,EAA+DH,cAAc,CAAC,SAAD,CAA7E,CAA3E,CAAhB;AACA,IAAIW,QAAQ,GAAGL,SAAf;AACAV,OAAO,CAAC,SAAD,CAAP,GAAqBe,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _stubUndefined = _interopRequireDefault(require(\"./stubUndefined\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar leftIdentitySemigroup = {\n  concat: _ramda.identity\n};\n/**\n * Returns the result of concatenating the given lists or strings.\n * Note: RA.concatAll expects all elements to be of the same type. It will throw an error if you concat an Array with a non-Array value.\n * Dispatches to the concat method of the preceding element, if present. Can also concatenate multiple elements of a [fantasy-land compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\n * Returns undefined if empty array was passed.\n *\n * @func concatAll\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.6.0|v2.6.0}\n * @category List\n * @sig [[a]] -> [a] | Undefined\n * @sig [String] -> String | Undefined\n * @sig Semigroup s => Foldable s f => f -> s | Undefined\n * @param {Array.<Array|string>} list List containing elements that will be concatenated\n * @return {Array|string|undefined} Concatenated elements\n * @see {@link http://ramdajs.com/docs/#concat|R.concat}, {@link RA.concatRight|concatRight}, {@link http://ramdajs.com/docs/#unnest|R.unnest}, {@link http://ramdajs.com/docs/#join|R.join}\n * @example\n *\n * concatAll([[1], [2], [3]]); //=> [1, 2, 3]\n * concatAll(['1', '2', '3']); //=> '123'\n * concatAll([]); //=> undefined;\n */\n\nvar concatAll = (0, _ramda.pipe)((0, _ramda.reduce)(_ramda.concat, leftIdentitySemigroup), (0, _ramda.when)((0, _ramda.identical)(leftIdentitySemigroup), _stubUndefined[\"default\"]));\nvar _default = concatAll;\nexports[\"default\"] = _default;"]}