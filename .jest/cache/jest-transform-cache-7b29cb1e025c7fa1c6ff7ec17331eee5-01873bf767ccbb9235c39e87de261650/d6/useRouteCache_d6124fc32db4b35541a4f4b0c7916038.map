{"version":3,"sources":["useRouteCache.tsx"],"names":["SUPPRESS_STATE_ACCESS_WARNING","value","cache","current","process","previous","acc","proxy","route","Object","get","console","Array"],"mappings":";;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeO,IAAMA,6BAA6B,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAtC;;;AAMQ,SAAA,aAAA,CAAA,MAAA,EAEb;AAEA,MAAMC,KAAK,GAAG,KAAK,CAAL,OAAA,CAAc;AAAA,WAAO;AAAEC,MAAAA,OAAO,EAAE,IAAA,GAAA;AAAX,KAAP;AAAA,GAAd,EAAd,EAAc,CAAd;;AAEA,MAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AAEzC,WAAA,MAAA;AACD;;AAEDF,EAAAA,KAAK,CAALA,OAAAA,GAAgB,MAAM,CAAN,MAAA,CAAc,UAAA,GAAA,EAAA,KAAA,EAAgB;AAC5C,QAAMG,QAAQ,GAAGH,KAAK,CAALA,OAAAA,CAAAA,GAAAA,CAAjB,KAAiBA,CAAjB;;AAEA,QAAA,QAAA,EAAc;AAEZI,MAAAA,GAAG,CAAHA,GAAAA,CAAAA,KAAAA,EAAAA,QAAAA;AAFF,KAAA,MAGO;AACL,UAAMC,KAAK,8BAAQC,KAAR,CAAX;AAEAC,MAAAA,MAAM,CAANA,cAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAsC;AACpCC,QAAAA,GADoC,iBAC9B;AACJ,cAAI,CAACV,6BAA6B,CAAlC,KAAA,EAA0C;AACxCW,YAAAA,OAAO,CAAPA,IAAAA,CAAAA,wSAAAA;AAGD;;AAED,iBAAOH,KAAK,CAAZ,KAAA;AACD;AATmC,OAAtCC;AAYAH,MAAAA,GAAG,CAAHA,GAAAA,CAAAA,KAAAA,EAAAA,KAAAA;AACD;;AAED,WAAA,GAAA;AAxBc,GAAA,EAyBb,IAzBHJ,GAyBG,EAzBa,CAAhBA;AA2BA,SAAOU,KAAK,CAALA,IAAAA,CAAWV,KAAK,CAALA,OAAAA,CAAlB,MAAkBA,EAAXU,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport type {\n  ParamListBase,\n  NavigationState,\n  Route,\n} from '@react-navigation/routers';\nimport type { RouteProp } from './types';\n\ntype RouteCache = Map<Route<string>, RouteProp<ParamListBase, string>>;\n\n/**\n * Utilites such as `getFocusedRouteNameFromRoute` need to access state.\n * So we need a way to suppress the warning for those use cases.\n * This is fine since they are internal utilities and this is not public API.\n */\nexport const SUPPRESS_STATE_ACCESS_WARNING = { value: false };\n\n/**\n * Hook to cache route props for each screen in the navigator.\n * This lets add warnings and modifications to the route object but keep references between renders.\n */\nexport default function useRouteCache<State extends NavigationState>(\n  routes: State['routes']\n) {\n  // Cache object which holds route objects for each screen\n  const cache = React.useMemo(() => ({ current: new Map() as RouteCache }), []);\n\n  if (process.env.NODE_ENV === 'production') {\n    // We don't want the overhead of creating extra maps every render in prod\n    return routes;\n  }\n\n  cache.current = routes.reduce((acc, route) => {\n    const previous = cache.current.get(route);\n\n    if (previous) {\n      // If a cached route object already exists, reuse it\n      acc.set(route, previous);\n    } else {\n      const proxy = { ...route };\n\n      Object.defineProperty(proxy, 'state', {\n        get() {\n          if (!SUPPRESS_STATE_ACCESS_WARNING.value) {\n            console.warn(\n              \"Accessing the 'state' property of the 'route' object is not supported. If you want to get the focused route name, use the 'getFocusedRouteNameFromRoute' helper instead: https://reactnavigation.org/docs/5.x/screen-options-resolution/#setting-parent-screen-options-based-on-child-navigators-state\"\n            );\n          }\n\n          return route.state;\n        },\n      });\n\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map() as RouteCache);\n\n  return Array.from(cache.current.values());\n}\n"]}