ff31cc257abf268272b318a1d2361a00
'use strict';

var DeprecatedEdgeInsetsPropType = require('./DeprecatedEdgeInsetsPropType');

var DeprecatedStyleSheetPropType = require('./DeprecatedStyleSheetPropType');

var DeprecatedViewStylePropTypes = require('./DeprecatedViewStylePropTypes');

var PropTypes = require('prop-types');

var _require = require('./DeprecatedViewAccessibility'),
    DeprecatedAccessibilityRoles = _require.DeprecatedAccessibilityRoles;

var stylePropType = DeprecatedStyleSheetPropType(DeprecatedViewStylePropTypes);
module.exports = {
  accessible: PropTypes.bool,
  accessibilityLabel: PropTypes.node,
  accessibilityHint: PropTypes.string,
  accessibilityActions: PropTypes.arrayOf(PropTypes.string),
  accessibilityIgnoresInvertColors: PropTypes.bool,
  accessibilityRole: PropTypes.oneOf(DeprecatedAccessibilityRoles),
  accessibilityState: PropTypes.object,
  accessibilityValue: PropTypes.object,
  accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
  importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
  accessibilityViewIsModal: PropTypes.bool,
  accessibilityElementsHidden: PropTypes.bool,
  onAccessibilityAction: PropTypes.func,
  onAccessibilityTap: PropTypes.func,
  onMagicTap: PropTypes.func,
  testID: PropTypes.string,
  nativeID: PropTypes.string,
  onResponderGrant: PropTypes.func,
  onResponderMove: PropTypes.func,
  onResponderReject: PropTypes.func,
  onResponderRelease: PropTypes.func,
  onResponderTerminate: PropTypes.func,
  onResponderTerminationRequest: PropTypes.func,
  onStartShouldSetResponder: PropTypes.func,
  onStartShouldSetResponderCapture: PropTypes.func,
  onMoveShouldSetResponder: PropTypes.func,
  onMoveShouldSetResponderCapture: PropTypes.func,
  hitSlop: DeprecatedEdgeInsetsPropType,
  onLayout: PropTypes.func,
  pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
  style: stylePropType,
  removeClippedSubviews: PropTypes.bool,
  renderToHardwareTextureAndroid: PropTypes.bool,
  shouldRasterizeIOS: PropTypes.bool,
  collapsable: PropTypes.bool,
  needsOffscreenAlphaCompositing: PropTypes.bool
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRlcHJlY2F0ZWRWaWV3UHJvcFR5cGVzLmpzIl0sIm5hbWVzIjpbIkRlcHJlY2F0ZWRFZGdlSW5zZXRzUHJvcFR5cGUiLCJyZXF1aXJlIiwiRGVwcmVjYXRlZFN0eWxlU2hlZXRQcm9wVHlwZSIsIkRlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJEZXByZWNhdGVkQWNjZXNzaWJpbGl0eVJvbGVzIiwic3R5bGVQcm9wVHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhY2Nlc3NpYmxlIiwiYm9vbCIsImFjY2Vzc2liaWxpdHlMYWJlbCIsIm5vZGUiLCJhY2Nlc3NpYmlsaXR5SGludCIsInN0cmluZyIsImFjY2Vzc2liaWxpdHlBY3Rpb25zIiwiYXJyYXlPZiIsImFjY2Vzc2liaWxpdHlJZ25vcmVzSW52ZXJ0Q29sb3JzIiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJvbmVPZiIsImFjY2Vzc2liaWxpdHlTdGF0ZSIsIm9iamVjdCIsImFjY2Vzc2liaWxpdHlWYWx1ZSIsImFjY2Vzc2liaWxpdHlMaXZlUmVnaW9uIiwiaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eSIsImFjY2Vzc2liaWxpdHlWaWV3SXNNb2RhbCIsImFjY2Vzc2liaWxpdHlFbGVtZW50c0hpZGRlbiIsIm9uQWNjZXNzaWJpbGl0eUFjdGlvbiIsImZ1bmMiLCJvbkFjY2Vzc2liaWxpdHlUYXAiLCJvbk1hZ2ljVGFwIiwidGVzdElEIiwibmF0aXZlSUQiLCJvblJlc3BvbmRlckdyYW50Iiwib25SZXNwb25kZXJNb3ZlIiwib25SZXNwb25kZXJSZWplY3QiLCJvblJlc3BvbmRlclJlbGVhc2UiLCJvblJlc3BvbmRlclRlcm1pbmF0ZSIsIm9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0Iiwib25TdGFydFNob3VsZFNldFJlc3BvbmRlciIsIm9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlIiwib25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyIiwib25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSIsImhpdFNsb3AiLCJvbkxheW91dCIsInBvaW50ZXJFdmVudHMiLCJzdHlsZSIsInJlbW92ZUNsaXBwZWRTdWJ2aWV3cyIsInJlbmRlclRvSGFyZHdhcmVUZXh0dXJlQW5kcm9pZCIsInNob3VsZFJhc3Rlcml6ZUlPUyIsImNvbGxhcHNhYmxlIiwibmVlZHNPZmZzY3JlZW5BbHBoYUNvbXBvc2l0aW5nIl0sIm1hcHBpbmdzIjoiQUFVQTs7QUFFQSxJQUFNQSw0QkFBNEIsR0FBR0MsT0FBTyxDQUFDLGdDQUFELENBQTVDOztBQUNBLElBQU1DLDRCQUE0QixHQUFHRCxPQUFPLENBQUMsZ0NBQUQsQ0FBNUM7O0FBQ0EsSUFBTUUsNEJBQTRCLEdBQUdGLE9BQU8sQ0FBQyxnQ0FBRCxDQUE1Qzs7QUFDQSxJQUFNRyxTQUFTLEdBQUdILE9BQU8sQ0FBQyxZQUFELENBQXpCOztBQUVBLGVBQXVDQSxPQUFPLENBQUMsK0JBQUQsQ0FBOUM7QUFBQSxJQUFPSSw0QkFBUCxZQUFPQSw0QkFBUDs7QUFFQSxJQUFNQyxhQUFrQyxHQUFHSiw0QkFBNEIsQ0FDckVDLDRCQURxRSxDQUF2RTtBQUlBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFPZkMsRUFBQUEsVUFBVSxFQUFFTCxTQUFTLENBQUNNLElBUFA7QUFnQmZDLEVBQUFBLGtCQUFrQixFQUFFUCxTQUFTLENBQUNRLElBaEJmO0FBMEJmQyxFQUFBQSxpQkFBaUIsRUFBRVQsU0FBUyxDQUFDVSxNQTFCZDtBQWlDZkMsRUFBQUEsb0JBQW9CLEVBQUdYLFNBQVMsQ0FBQ1ksT0FBVixDQUNyQlosU0FBUyxDQUFDVSxNQURXLENBakNSO0FBMENmRyxFQUFBQSxnQ0FBZ0MsRUFBRWIsU0FBUyxDQUFDTSxJQTFDN0I7QUErQ2ZRLEVBQUFBLGlCQUFpQixFQUFHZCxTQUFTLENBQUNlLEtBQVYsQ0FDbEJkLDRCQURrQixDQS9DTDtBQStFZmUsRUFBQUEsa0JBQWtCLEVBQUVoQixTQUFTLENBQUNpQixNQS9FZjtBQWdGZkMsRUFBQUEsa0JBQWtCLEVBQUVsQixTQUFTLENBQUNpQixNQWhGZjtBQXlGZkUsRUFBQUEsdUJBQXVCLEVBQUduQixTQUFTLENBQUNlLEtBQVYsQ0FBZ0IsQ0FDeEMsTUFEd0MsRUFFeEMsUUFGd0MsRUFHeEMsV0FId0MsQ0FBaEIsQ0F6Rlg7QUF3R2ZLLEVBQUFBLHlCQUF5QixFQUFHcEIsU0FBUyxDQUFDZSxLQUFWLENBQWdCLENBQzFDLE1BRDBDLEVBRTFDLEtBRjBDLEVBRzFDLElBSDBDLEVBSTFDLHFCQUowQyxDQUFoQixDQXhHYjtBQXdIZk0sRUFBQUEsd0JBQXdCLEVBQUVyQixTQUFTLENBQUNNLElBeEhyQjtBQWtJZmdCLEVBQUFBLDJCQUEyQixFQUFFdEIsU0FBUyxDQUFDTSxJQWxJeEI7QUEwSWZpQixFQUFBQSxxQkFBcUIsRUFBRXZCLFNBQVMsQ0FBQ3dCLElBMUlsQjtBQWtKZkMsRUFBQUEsa0JBQWtCLEVBQUV6QixTQUFTLENBQUN3QixJQWxKZjtBQTBKZkUsRUFBQUEsVUFBVSxFQUFFMUIsU0FBUyxDQUFDd0IsSUExSlA7QUFtS2ZHLEVBQUFBLE1BQU0sRUFBRTNCLFNBQVMsQ0FBQ1UsTUFuS0g7QUE0S2ZrQixFQUFBQSxRQUFRLEVBQUU1QixTQUFTLENBQUNVLE1BNUtMO0FBNkxmbUIsRUFBQUEsZ0JBQWdCLEVBQUU3QixTQUFTLENBQUN3QixJQTdMYjtBQXVNZk0sRUFBQUEsZUFBZSxFQUFFOUIsU0FBUyxDQUFDd0IsSUF2TVo7QUFrTmZPLEVBQUFBLGlCQUFpQixFQUFFL0IsU0FBUyxDQUFDd0IsSUFsTmQ7QUE0TmZRLEVBQUFBLGtCQUFrQixFQUFFaEMsU0FBUyxDQUFDd0IsSUE1TmY7QUF5T2ZTLEVBQUFBLG9CQUFvQixFQUFFakMsU0FBUyxDQUFDd0IsSUF6T2pCO0FBb1BmVSxFQUFBQSw2QkFBNkIsRUFBRWxDLFNBQVMsQ0FBQ3dCLElBcFAxQjtBQThQZlcsRUFBQUEseUJBQXlCLEVBQUVuQyxTQUFTLENBQUN3QixJQTlQdEI7QUF5UWZZLEVBQUFBLGdDQUFnQyxFQUFFcEMsU0FBUyxDQUFDd0IsSUF6UTdCO0FBb1JmYSxFQUFBQSx3QkFBd0IsRUFBRXJDLFNBQVMsQ0FBQ3dCLElBcFJyQjtBQStSZmMsRUFBQUEsK0JBQStCLEVBQUV0QyxTQUFTLENBQUN3QixJQS9SNUI7QUE0U2ZlLEVBQUFBLE9BQU8sRUFBRTNDLDRCQTVTTTtBQXlUZjRDLEVBQUFBLFFBQVEsRUFBRXhDLFNBQVMsQ0FBQ3dCLElBelRMO0FBZ1VmaUIsRUFBQUEsYUFBYSxFQUFHekMsU0FBUyxDQUFDZSxLQUFWLENBQWdCLENBQzlCLFVBRDhCLEVBRTlCLE1BRjhCLEVBRzlCLFVBSDhCLEVBSTlCLE1BSjhCLENBQWhCLENBaFVEO0FBMFVmMkIsRUFBQUEsS0FBSyxFQUFFeEMsYUExVVE7QUFzVmZ5QyxFQUFBQSxxQkFBcUIsRUFBRTNDLFNBQVMsQ0FBQ00sSUF0VmxCO0FBZ1dmc0MsRUFBQUEsOEJBQThCLEVBQUU1QyxTQUFTLENBQUNNLElBaFczQjtBQXlXZnVDLEVBQUFBLGtCQUFrQixFQUFFN0MsU0FBUyxDQUFDTSxJQXpXZjtBQXFYZndDLEVBQUFBLFdBQVcsRUFBRTlDLFNBQVMsQ0FBQ00sSUFyWFI7QUErWGZ5QyxFQUFBQSw4QkFBOEIsRUFBRS9DLFNBQVMsQ0FBQ007QUEvWDNCLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IERlcHJlY2F0ZWRFZGdlSW5zZXRzUHJvcFR5cGUgPSByZXF1aXJlKCcuL0RlcHJlY2F0ZWRFZGdlSW5zZXRzUHJvcFR5cGUnKTtcbmNvbnN0IERlcHJlY2F0ZWRTdHlsZVNoZWV0UHJvcFR5cGUgPSByZXF1aXJlKCcuL0RlcHJlY2F0ZWRTdHlsZVNoZWV0UHJvcFR5cGUnKTtcbmNvbnN0IERlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCcuL0RlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMnKTtcbmNvbnN0IFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxuY29uc3Qge0RlcHJlY2F0ZWRBY2Nlc3NpYmlsaXR5Um9sZXN9ID0gcmVxdWlyZSgnLi9EZXByZWNhdGVkVmlld0FjY2Vzc2liaWxpdHknKTtcblxuY29uc3Qgc3R5bGVQcm9wVHlwZTogUmVhY3RQcm9wc0NoZWNrVHlwZSA9IERlcHJlY2F0ZWRTdHlsZVNoZWV0UHJvcFR5cGUoXG4gIERlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMsXG4pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIFdoZW4gYHRydWVgLCBpbmRpY2F0ZXMgdGhhdCB0aGUgdmlldyBpcyBhbiBhY2Nlc3NpYmlsaXR5IGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIGFsbCB0aGUgdG91Y2hhYmxlIGVsZW1lbnRzIGFyZSBhY2Nlc3NpYmxlLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjYWNjZXNzaWJsZVxuICAgKi9cbiAgYWNjZXNzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlcyB0aGUgdGV4dCB0aGF0J3MgcmVhZCBieSB0aGUgc2NyZWVuIHJlYWRlciB3aGVuIHRoZSB1c2VyIGludGVyYWN0c1xuICAgKiB3aXRoIHRoZSBlbGVtZW50LiBCeSBkZWZhdWx0LCB0aGUgbGFiZWwgaXMgY29uc3RydWN0ZWQgYnkgdHJhdmVyc2luZyBhbGxcbiAgICogdGhlIGNoaWxkcmVuIGFuZCBhY2N1bXVsYXRpbmcgYWxsIHRoZSBgVGV4dGAgbm9kZXMgc2VwYXJhdGVkIGJ5IHNwYWNlLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjYWNjZXNzaWJpbGl0eWxhYmVsXG4gICAqL1xuICBhY2Nlc3NpYmlsaXR5TGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBbiBhY2Nlc3NpYmlsaXR5IGhpbnQgaGVscHMgdXNlcnMgdW5kZXJzdGFuZCB3aGF0IHdpbGwgaGFwcGVuIHdoZW4gdGhleSBwZXJmb3JtXG4gICAqIGFuIGFjdGlvbiBvbiB0aGUgYWNjZXNzaWJpbGl0eSBlbGVtZW50IHdoZW4gdGhhdCByZXN1bHQgaXMgbm90IG9idmlvdXMgZnJvbSB0aGVcbiAgICogYWNjZXNzaWJpbGl0eSBsYWJlbC5cbiAgICpcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI2FjY2Vzc2liaWxpdHlIaW50XG4gICAqL1xuICBhY2Nlc3NpYmlsaXR5SGludDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogUHJvdmlkZXMgYW4gYXJyYXkgb2YgY3VzdG9tIGFjdGlvbnMgYXZhaWxhYmxlIGZvciBhY2Nlc3NpYmlsaXR5LlxuICAgKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBhY2Nlc3NpYmlsaXR5QWN0aW9uczogKFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICk6IFJlYWN0JFByb3BUeXBlJFByaW1pdGl2ZTxBcnJheTxzdHJpbmc+PiksXG5cbiAgLyoqXG4gICAqIFByZXZlbnRzIHZpZXcgZnJvbSBiZWluZyBpbnZlcnRlZCBpZiBzZXQgdG8gdHJ1ZSBhbmQgY29sb3IgaW52ZXJzaW9uIGlzIHR1cm5lZCBvbi5cbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgYWNjZXNzaWJpbGl0eUlnbm9yZXNJbnZlcnRDb2xvcnM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdG8gYWNjZXNzaWJpbGl0eSBzZXJ2aWNlcyB0byB0cmVhdCBVSSBjb21wb25lbnQgbGlrZSBhIHNwZWNpZmljIHJvbGUuXG4gICAqL1xuICBhY2Nlc3NpYmlsaXR5Um9sZTogKFByb3BUeXBlcy5vbmVPZihcbiAgICBEZXByZWNhdGVkQWNjZXNzaWJpbGl0eVJvbGVzLFxuICApOiBSZWFjdCRQcm9wVHlwZSRQcmltaXRpdmU8XG4gICAgfCAnbm9uZSdcbiAgICB8ICdidXR0b24nXG4gICAgfCAnbGluaydcbiAgICB8ICdzZWFyY2gnXG4gICAgfCAnaW1hZ2UnXG4gICAgfCAna2V5Ym9hcmRrZXknXG4gICAgfCAndGV4dCdcbiAgICB8ICdhZGp1c3RhYmxlJ1xuICAgIHwgJ2ltYWdlYnV0dG9uJ1xuICAgIHwgJ2hlYWRlcidcbiAgICB8ICdzdW1tYXJ5J1xuICAgIHwgJ2FsZXJ0J1xuICAgIHwgJ2NoZWNrYm94J1xuICAgIHwgJ2NvbWJvYm94J1xuICAgIHwgJ21lbnUnXG4gICAgfCAnbWVudWJhcidcbiAgICB8ICdtZW51aXRlbSdcbiAgICB8ICdwcm9ncmVzc2JhcidcbiAgICB8ICdyYWRpbydcbiAgICB8ICdyYWRpb2dyb3VwJ1xuICAgIHwgJ3Njcm9sbGJhcidcbiAgICB8ICdzcGluYnV0dG9uJ1xuICAgIHwgJ3N3aXRjaCdcbiAgICB8ICd0YWInXG4gICAgfCAndGFibGlzdCdcbiAgICB8ICd0aW1lcidcbiAgICB8ICd0b29sYmFyJyxcbiAgPiksXG5cbiAgYWNjZXNzaWJpbGl0eVN0YXRlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBhY2Nlc3NpYmlsaXR5VmFsdWU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdG8gYWNjZXNzaWJpbGl0eSBzZXJ2aWNlcyB3aGV0aGVyIHRoZSB1c2VyIHNob3VsZCBiZSBub3RpZmllZFxuICAgKiB3aGVuIHRoaXMgdmlldyBjaGFuZ2VzLiBXb3JrcyBmb3IgQW5kcm9pZCBBUEkgPj0gMTkgb25seS5cbiAgICpcbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI2FjY2Vzc2liaWxpdHlsaXZlcmVnaW9uXG4gICAqL1xuICBhY2Nlc3NpYmlsaXR5TGl2ZVJlZ2lvbjogKFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ25vbmUnLFxuICAgICdwb2xpdGUnLFxuICAgICdhc3NlcnRpdmUnLFxuICBdKTogUmVhY3QkUHJvcFR5cGUkUHJpbWl0aXZlPCdub25lJyB8ICdwb2xpdGUnIHwgJ2Fzc2VydGl2ZSc+KSxcblxuICAvKipcbiAgICogQ29udHJvbHMgaG93IHZpZXcgaXMgaW1wb3J0YW50IGZvciBhY2Nlc3NpYmlsaXR5IHdoaWNoIGlzIGlmIGl0XG4gICAqIGZpcmVzIGFjY2Vzc2liaWxpdHkgZXZlbnRzIGFuZCBpZiBpdCBpcyByZXBvcnRlZCB0byBhY2Nlc3NpYmlsaXR5IHNlcnZpY2VzXG4gICAqIHRoYXQgcXVlcnkgdGhlIHNjcmVlbi4gV29ya3MgZm9yIEFuZHJvaWQgb25seS5cbiAgICpcbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI2ltcG9ydGFudGZvcmFjY2Vzc2liaWxpdHlcbiAgICovXG4gIGltcG9ydGFudEZvckFjY2Vzc2liaWxpdHk6IChQcm9wVHlwZXMub25lT2YoW1xuICAgICdhdXRvJyxcbiAgICAneWVzJyxcbiAgICAnbm8nLFxuICAgICduby1oaWRlLWRlc2NlbmRhbnRzJyxcbiAgXSk6IFJlYWN0JFByb3BUeXBlJFByaW1pdGl2ZTwnYXV0bycgfCAneWVzJyB8ICdubycgfCAnbm8taGlkZS1kZXNjZW5kYW50cyc+KSxcblxuICAvKipcbiAgICogQSB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgVm9pY2VPdmVyIHNob3VsZCBpZ25vcmUgdGhlIGVsZW1lbnRzXG4gICAqIHdpdGhpbiB2aWV3cyB0aGF0IGFyZSBzaWJsaW5ncyBvZiB0aGUgcmVjZWl2ZXIuXG4gICAqIERlZmF1bHQgaXMgYGZhbHNlYC5cbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjYWNjZXNzaWJpbGl0eXZpZXdpc21vZGFsXG4gICAqL1xuICBhY2Nlc3NpYmlsaXR5Vmlld0lzTW9kYWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciB0aGUgYWNjZXNzaWJpbGl0eSBlbGVtZW50cyBjb250YWluZWQgd2l0aGluXG4gICAqIHRoaXMgYWNjZXNzaWJpbGl0eSBlbGVtZW50IGFyZSBoaWRkZW4uXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI2FjY2Vzc2liaWxpdHlFbGVtZW50c0hpZGRlblxuICAgKi9cbiAgYWNjZXNzaWJpbGl0eUVsZW1lbnRzSGlkZGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogV2hlbiBgYWNjZXNzaWJsZWAgaXMgdHJ1ZSwgdGhlIHN5c3RlbSB3aWxsIHRyeSB0byBpbnZva2UgdGhpcyBmdW5jdGlvblxuICAgKiB3aGVuIHRoZSB1c2VyIHBlcmZvcm1zIGFuIGFjY2Vzc2liaWxpdHkgY3VzdG9tIGFjdGlvbi5cbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgb25BY2Nlc3NpYmlsaXR5QWN0aW9uOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogV2hlbiBgYWNjZXNzaWJsZWAgaXMgdHJ1ZSwgdGhlIHN5c3RlbSB3aWxsIHRyeSB0byBpbnZva2UgdGhpcyBmdW5jdGlvblxuICAgKiB3aGVuIHRoZSB1c2VyIHBlcmZvcm1zIGFjY2Vzc2liaWxpdHkgdGFwIGdlc3R1cmUuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNvbmFjY2Vzc2liaWxpdHl0YXBcbiAgICovXG4gIG9uQWNjZXNzaWJpbGl0eVRhcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFdoZW4gYGFjY2Vzc2libGVgIGlzIGB0cnVlYCwgdGhlIHN5c3RlbSB3aWxsIGludm9rZSB0aGlzIGZ1bmN0aW9uIHdoZW4gdGhlXG4gICAqIHVzZXIgcGVyZm9ybXMgdGhlIG1hZ2ljIHRhcCBnZXN0dXJlLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjb25tYWdpY3RhcFxuICAgKi9cbiAgb25NYWdpY1RhcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbG9jYXRlIHRoaXMgdmlldyBpbiBlbmQtdG8tZW5kIHRlc3RzLlxuICAgKlxuICAgKiA+IFRoaXMgZGlzYWJsZXMgdGhlICdsYXlvdXQtb25seSB2aWV3IHJlbW92YWwnIG9wdGltaXphdGlvbiBmb3IgdGhpcyB2aWV3IVxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjdGVzdGlkXG4gICAqL1xuICB0ZXN0SUQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbG9jYXRlIHRoaXMgdmlldyBmcm9tIG5hdGl2ZSBjbGFzc2VzLlxuICAgKlxuICAgKiA+IFRoaXMgZGlzYWJsZXMgdGhlICdsYXlvdXQtb25seSB2aWV3IHJlbW92YWwnIG9wdGltaXphdGlvbiBmb3IgdGhpcyB2aWV3IVxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjbmF0aXZlaWRcbiAgICovXG4gIG5hdGl2ZUlEOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBGb3IgbW9zdCB0b3VjaCBpbnRlcmFjdGlvbnMsIHlvdSdsbCBzaW1wbHkgd2FudCB0byB3cmFwIHlvdXIgY29tcG9uZW50IGluXG4gICAqIGBUb3VjaGFibGVIaWdobGlnaHRgIG9yIGBUb3VjaGFibGVPcGFjaXR5YC4gQ2hlY2sgb3V0IGBUb3VjaGFibGUuanNgLFxuICAgKiBgU2Nyb2xsUmVzcG9uZGVyLmpzYCBhbmQgYFJlc3BvbmRlckV2ZW50UGx1Z2luLmpzYCBmb3IgbW9yZSBkaXNjdXNzaW9uLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIFZpZXcgaXMgbm93IHJlc3BvbmRpbmcgZm9yIHRvdWNoIGV2ZW50cy4gVGhpcyBpcyB0aGUgdGltZSB0byBoaWdobGlnaHRcbiAgICogYW5kIHNob3cgdGhlIHVzZXIgd2hhdCBpcyBoYXBwZW5pbmcuXG4gICAqXG4gICAqIGBWaWV3LnByb3BzLm9uUmVzcG9uZGVyR3JhbnQ6IChldmVudCkgPT4ge31gLCB3aGVyZSBgZXZlbnRgIGlzIGEgc3ludGhldGljXG4gICAqIHRvdWNoIGV2ZW50IGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI29ucmVzcG9uZGVyZ3JhbnRcbiAgICovXG4gIG9uUmVzcG9uZGVyR3JhbnQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgdXNlciBpcyBtb3ZpbmcgdGhlaXIgZmluZ2VyLlxuICAgKlxuICAgKiBgVmlldy5wcm9wcy5vblJlc3BvbmRlck1vdmU6IChldmVudCkgPT4ge31gLCB3aGVyZSBgZXZlbnRgIGlzIGEgc3ludGhldGljXG4gICAqIHRvdWNoIGV2ZW50IGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI29ucmVzcG9uZGVybW92ZVxuICAgKi9cbiAgb25SZXNwb25kZXJNb3ZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQW5vdGhlciByZXNwb25kZXIgaXMgYWxyZWFkeSBhY3RpdmUgYW5kIHdpbGwgbm90IHJlbGVhc2UgaXQgdG8gdGhhdCBgVmlld2BcbiAgICogYXNraW5nIHRvIGJlIHRoZSByZXNwb25kZXIuXG4gICAqXG4gICAqIGBWaWV3LnByb3BzLm9uUmVzcG9uZGVyUmVqZWN0OiAoZXZlbnQpID0+IHt9YCwgd2hlcmUgYGV2ZW50YCBpcyBhXG4gICAqIHN5bnRoZXRpYyB0b3VjaCBldmVudCBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNvbnJlc3BvbmRlcnJlamVjdFxuICAgKi9cbiAgb25SZXNwb25kZXJSZWplY3Q6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBGaXJlZCBhdCB0aGUgZW5kIG9mIHRoZSB0b3VjaC5cbiAgICpcbiAgICogYFZpZXcucHJvcHMub25SZXNwb25kZXJSZWxlYXNlOiAoZXZlbnQpID0+IHt9YCwgd2hlcmUgYGV2ZW50YCBpcyBhXG4gICAqIHN5bnRoZXRpYyB0b3VjaCBldmVudCBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNvbnJlc3BvbmRlcnJlbGVhc2VcbiAgICovXG4gIG9uUmVzcG9uZGVyUmVsZWFzZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSByZXNwb25kZXIgaGFzIGJlZW4gdGFrZW4gZnJvbSB0aGUgYFZpZXdgLiBNaWdodCBiZSB0YWtlbiBieSBvdGhlclxuICAgKiB2aWV3cyBhZnRlciBhIGNhbGwgdG8gYG9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0YCwgb3IgbWlnaHQgYmUgdGFrZW5cbiAgICogYnkgdGhlIE9TIHdpdGhvdXQgYXNraW5nIChlLmcuLCBoYXBwZW5zIHdpdGggY29udHJvbCBjZW50ZXIvIG5vdGlmaWNhdGlvblxuICAgKiBjZW50ZXIgb24gaU9TKVxuICAgKlxuICAgKiBgVmlldy5wcm9wcy5vblJlc3BvbmRlclRlcm1pbmF0ZTogKGV2ZW50KSA9PiB7fWAsIHdoZXJlIGBldmVudGAgaXMgYVxuICAgKiBzeW50aGV0aWMgdG91Y2ggZXZlbnQgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjb25yZXNwb25kZXJ0ZXJtaW5hdGVcbiAgICovXG4gIG9uUmVzcG9uZGVyVGVybWluYXRlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogU29tZSBvdGhlciBgVmlld2Agd2FudHMgdG8gYmVjb21lIHJlc3BvbmRlciBhbmQgaXMgYXNraW5nIHRoaXMgYFZpZXdgIHRvXG4gICAqIHJlbGVhc2UgaXRzIHJlc3BvbmRlci4gUmV0dXJuaW5nIGB0cnVlYCBhbGxvd3MgaXRzIHJlbGVhc2UuXG4gICAqXG4gICAqIGBWaWV3LnByb3BzLm9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0OiAoZXZlbnQpID0+IHt9YCwgd2hlcmUgYGV2ZW50YFxuICAgKiBpcyBhIHN5bnRoZXRpYyB0b3VjaCBldmVudCBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNvbnJlc3BvbmRlcnRlcm1pbmF0aW9ucmVxdWVzdFxuICAgKi9cbiAgb25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3Q6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBEb2VzIHRoaXMgdmlldyB3YW50IHRvIGJlY29tZSByZXNwb25kZXIgb24gdGhlIHN0YXJ0IG9mIGEgdG91Y2g/XG4gICAqXG4gICAqIGBWaWV3LnByb3BzLm9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXI6IChldmVudCkgPT4gW3RydWUgfCBmYWxzZV1gLCB3aGVyZVxuICAgKiBgZXZlbnRgIGlzIGEgc3ludGhldGljIHRvdWNoIGV2ZW50IGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI29uc3RhcnRzaG91bGRzZXRyZXNwb25kZXJcbiAgICovXG4gIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBhIHBhcmVudCBgVmlld2Agd2FudHMgdG8gcHJldmVudCBhIGNoaWxkIGBWaWV3YCBmcm9tIGJlY29taW5nIHJlc3BvbmRlclxuICAgKiBvbiBhIHRvdWNoIHN0YXJ0LCBpdCBzaG91bGQgaGF2ZSB0aGlzIGhhbmRsZXIgd2hpY2ggcmV0dXJucyBgdHJ1ZWAuXG4gICAqXG4gICAqIGBWaWV3LnByb3BzLm9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlOiAoZXZlbnQpID0+IFt0cnVlIHwgZmFsc2VdYCxcbiAgICogd2hlcmUgYGV2ZW50YCBpcyBhIHN5bnRoZXRpYyB0b3VjaCBldmVudCBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNvbnN0YXJ0c2hvdWxkc2V0cmVzcG9uZGVyY2FwdHVyZVxuICAgKi9cbiAgb25TdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBEb2VzIHRoaXMgdmlldyB3YW50IHRvIFwiY2xhaW1cIiB0b3VjaCByZXNwb25zaXZlbmVzcz8gVGhpcyBpcyBjYWxsZWQgZm9yXG4gICAqIGV2ZXJ5IHRvdWNoIG1vdmUgb24gdGhlIGBWaWV3YCB3aGVuIGl0IGlzIG5vdCB0aGUgcmVzcG9uZGVyLlxuICAgKlxuICAgKiBgVmlldy5wcm9wcy5vbk1vdmVTaG91bGRTZXRSZXNwb25kZXI6IChldmVudCkgPT4gW3RydWUgfCBmYWxzZV1gLCB3aGVyZVxuICAgKiBgZXZlbnRgIGlzIGEgc3ludGhldGljIHRvdWNoIGV2ZW50IGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI29ubW92ZXNob3VsZHNldHJlc3BvbmRlclxuICAgKi9cbiAgb25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYSBwYXJlbnQgYFZpZXdgIHdhbnRzIHRvIHByZXZlbnQgYSBjaGlsZCBgVmlld2AgZnJvbSBiZWNvbWluZyByZXNwb25kZXJcbiAgICogb24gYSBtb3ZlLCBpdCBzaG91bGQgaGF2ZSB0aGlzIGhhbmRsZXIgd2hpY2ggcmV0dXJucyBgdHJ1ZWAuXG4gICAqXG4gICAqIGBWaWV3LnByb3BzLm9uTW92ZVNob3VsZFNldFJlc3BvbmRlckNhcHR1cmU6IChldmVudCkgPT4gW3RydWUgfCBmYWxzZV1gLFxuICAgKiB3aGVyZSBgZXZlbnRgIGlzIGEgc3ludGhldGljIHRvdWNoIGV2ZW50IGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI29uTW92ZVNob3VsZHNldHJlc3BvbmRlcmNhcHR1cmVcbiAgICovXG4gIG9uTW92ZVNob3VsZFNldFJlc3BvbmRlckNhcHR1cmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGlzIGRlZmluZXMgaG93IGZhciBhIHRvdWNoIGV2ZW50IGNhbiBzdGFydCBhd2F5IGZyb20gdGhlIHZpZXcuXG4gICAqIFR5cGljYWwgaW50ZXJmYWNlIGd1aWRlbGluZXMgcmVjb21tZW5kIHRvdWNoIHRhcmdldHMgdGhhdCBhcmUgYXQgbGVhc3RcbiAgICogMzAgLSA0MCBwb2ludHMvZGVuc2l0eS1pbmRlcGVuZGVudCBwaXhlbHMuXG4gICAqXG4gICAqID4gVGhlIHRvdWNoIGFyZWEgbmV2ZXIgZXh0ZW5kcyBwYXN0IHRoZSBwYXJlbnQgdmlldyBib3VuZHMgYW5kIHRoZSBaLWluZGV4XG4gICAqID4gb2Ygc2libGluZyB2aWV3cyBhbHdheXMgdGFrZXMgcHJlY2VkZW5jZSBpZiBhIHRvdWNoIGhpdHMgdHdvIG92ZXJsYXBwaW5nXG4gICAqID4gdmlld3MuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNoaXRzbG9wXG4gICAqL1xuICBoaXRTbG9wOiBEZXByZWNhdGVkRWRnZUluc2V0c1Byb3BUeXBlLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIG9uIG1vdW50IGFuZCBsYXlvdXQgY2hhbmdlcyB3aXRoOlxuICAgKlxuICAgKiBge25hdGl2ZUV2ZW50OiB7IGxheW91dDoge3gsIHksIHdpZHRoLCBoZWlnaHR9fX1gXG4gICAqXG4gICAqIFRoaXMgZXZlbnQgaXMgZmlyZWQgaW1tZWRpYXRlbHkgb25jZSB0aGUgbGF5b3V0IGhhcyBiZWVuIGNhbGN1bGF0ZWQsIGJ1dFxuICAgKiB0aGUgbmV3IGxheW91dCBtYXkgbm90IHlldCBiZSByZWZsZWN0ZWQgb24gdGhlIHNjcmVlbiBhdCB0aGUgdGltZSB0aGVcbiAgICogZXZlbnQgaXMgcmVjZWl2ZWQsIGVzcGVjaWFsbHkgaWYgYSBsYXlvdXQgYW5pbWF0aW9uIGlzIGluIHByb2dyZXNzLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjb25sYXlvdXRcbiAgICovXG4gIG9uTGF5b3V0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ29udHJvbHMgd2hldGhlciB0aGUgYFZpZXdgIGNhbiBiZSB0aGUgdGFyZ2V0IG9mIHRvdWNoIGV2ZW50cy5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI3BvaW50ZXJldmVudHNcbiAgICovXG4gIHBvaW50ZXJFdmVudHM6IChQcm9wVHlwZXMub25lT2YoW1xuICAgICdib3gtbm9uZScsXG4gICAgJ25vbmUnLFxuICAgICdib3gtb25seScsXG4gICAgJ2F1dG8nLFxuICBdKTogUmVhY3QkUHJvcFR5cGUkUHJpbWl0aXZlPCdib3gtbm9uZScgfCAnbm9uZScgfCAnYm94LW9ubHknIHwgJ2F1dG8nPiksXG5cbiAgLyoqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3N0eWxlLmh0bWxcbiAgICovXG4gIHN0eWxlOiBzdHlsZVByb3BUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgc3BlY2lhbCBwZXJmb3JtYW5jZSBwcm9wZXJ0eSBleHBvc2VkIGJ5IGBSQ1RWaWV3YCBhbmQgaXMgdXNlZnVsXG4gICAqIGZvciBzY3JvbGxpbmcgY29udGVudCB3aGVuIHRoZXJlIGFyZSBtYW55IHN1YnZpZXdzLCBtb3N0IG9mIHdoaWNoIGFyZVxuICAgKiBvZmZzY3JlZW4uIEZvciB0aGlzIHByb3BlcnR5IHRvIGJlIGVmZmVjdGl2ZSwgaXQgbXVzdCBiZSBhcHBsaWVkIHRvIGFcbiAgICogdmlldyB0aGF0IGNvbnRhaW5zIG1hbnkgc3Vidmlld3MgdGhhdCBleHRlbmQgb3V0c2lkZSBpdHMgYm91bmQuIFRoZVxuICAgKiBzdWJ2aWV3cyBtdXN0IGFsc28gaGF2ZSBgb3ZlcmZsb3c6IGhpZGRlbmAsIGFzIHNob3VsZCB0aGUgY29udGFpbmluZyB2aWV3XG4gICAqIChvciBvbmUgb2YgaXRzIHN1cGVydmlld3MpLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjcmVtb3ZlY2xpcHBlZHN1YnZpZXdzXG4gICAqL1xuICByZW1vdmVDbGlwcGVkU3Vidmlld3M6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoaXMgYFZpZXdgIHNob3VsZCByZW5kZXIgaXRzZWxmIChhbmQgYWxsIG9mIGl0cyBjaGlsZHJlbikgaW50byBhXG4gICAqIHNpbmdsZSBoYXJkd2FyZSB0ZXh0dXJlIG9uIHRoZSBHUFUuXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNyZW5kZXJ0b2hhcmR3YXJldGV4dHVyZWFuZHJvaWRcbiAgICovXG4gIHJlbmRlclRvSGFyZHdhcmVUZXh0dXJlQW5kcm9pZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBgVmlld2Agc2hvdWxkIGJlIHJlbmRlcmVkIGFzIGEgYml0bWFwIGJlZm9yZSBjb21wb3NpdGluZy5cbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjc2hvdWxkcmFzdGVyaXplaW9zXG4gICAqL1xuICBzaG91bGRSYXN0ZXJpemVJT1M6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBWaWV3cyB0aGF0IGFyZSBvbmx5IHVzZWQgdG8gbGF5b3V0IHRoZWlyIGNoaWxkcmVuIG9yIG90aGVyd2lzZSBkb24ndCBkcmF3XG4gICAqIGFueXRoaW5nIG1heSBiZSBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgZnJvbSB0aGUgbmF0aXZlIGhpZXJhcmNoeSBhcyBhblxuICAgKiBvcHRpbWl6YXRpb24uIFNldCB0aGlzIHByb3BlcnR5IHRvIGBmYWxzZWAgdG8gZGlzYWJsZSB0aGlzIG9wdGltaXphdGlvbiBhbmRcbiAgICogZW5zdXJlIHRoYXQgdGhpcyBgVmlld2AgZXhpc3RzIGluIHRoZSBuYXRpdmUgdmlldyBoaWVyYXJjaHkuXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNjb2xsYXBzYWJsZVxuICAgKi9cbiAgY29sbGFwc2FibGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoaXMgYFZpZXdgIG5lZWRzIHRvIHJlbmRlcmVkIG9mZnNjcmVlbiBhbmQgY29tcG9zaXRlZCB3aXRoIGFuXG4gICAqIGFscGhhIGluIG9yZGVyIHRvIHByZXNlcnZlIDEwMCUgY29ycmVjdCBjb2xvcnMgYW5kIGJsZW5kaW5nIGJlaGF2aW9yLlxuICAgKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjbmVlZHNvZmZzY3JlZW5hbHBoYWNvbXBvc2l0aW5nXG4gICAqL1xuICBuZWVkc09mZnNjcmVlbkFscGhhQ29tcG9zaXRpbmc6IFByb3BUeXBlcy5ib29sLFxufTtcbiJdfQ==