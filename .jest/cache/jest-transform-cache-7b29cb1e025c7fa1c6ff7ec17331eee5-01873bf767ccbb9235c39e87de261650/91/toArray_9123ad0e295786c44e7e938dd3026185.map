{"version":3,"sources":["toArray.js"],"names":["exports","__esModule","fromPonyfill","_ramda","require","_isIterable","_interopRequireDefault","_isFunction","_Array","obj","curryN","fromArray","Array","from","toArray","ifElse","values","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,YAAR,GAAuBF,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAAjD;;AAEA,IAAIG,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACF,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIG,WAAW,GAAGD,sBAAsB,CAACF,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAII,MAAM,GAAGF,sBAAsB,CAACF,OAAO,CAAC,iCAAD,CAAR,CAAnC;;AAEA,SAASE,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACR,UAAX,GAAwBQ,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,IAAIP,YAAY,GAAG,CAAC,GAAGC,MAAM,CAACO,MAAX,EAAmB,CAAnB,EAAsBF,MAAM,CAAC,SAAD,CAA5B,CAAnB;AACAR,OAAO,CAACE,YAAR,GAAuBA,YAAvB;AACA,IAAIS,SAAS,GAAG,CAAC,GAAGJ,WAAW,CAAC,SAAD,CAAf,EAA4BK,KAAK,CAACC,IAAlC,IAA0C,CAAC,GAAGV,MAAM,CAACO,MAAX,EAAmB,CAAnB,EAAsBE,KAAK,CAACC,IAA5B,CAA1C,GAA8EX,YAA9F;AAoBA,IAAIY,OAAO,GAAG,CAAC,GAAGX,MAAM,CAACY,MAAX,EAAmBV,WAAW,CAAC,SAAD,CAA9B,EAA2CM,SAA3C,EAAsDR,MAAM,CAACa,MAA7D,CAAd;AACA,IAAIC,QAAQ,GAAGH,OAAf;AACAd,OAAO,CAAC,SAAD,CAAP,GAAqBiB,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.fromPonyfill = exports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isIterable = _interopRequireDefault(require(\"./isIterable\"));\n\nvar _isFunction = _interopRequireDefault(require(\"./isFunction\"));\n\nvar _Array = _interopRequireDefault(require(\"./internal/ponyfills/Array.from\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar fromPonyfill = (0, _ramda.curryN)(1, _Array[\"default\"]);\nexports.fromPonyfill = fromPonyfill;\nvar fromArray = (0, _isFunction[\"default\"])(Array.from) ? (0, _ramda.curryN)(1, Array.from) : fromPonyfill;\n/**\n * Converts value to an array.\n *\n * @func toArray\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category List\n * @sig * -> [a]\n * @param {*} val The value to convert\n * @return {Array}\n * @example\n *\n * RA.toArray([1, 2]); //=> [1, 2]\n * RA.toArray({'foo': 1, 'bar': 2}); //=> [1, 2]\n * RA.toArray('abc'); //=> ['a', 'b', 'c']\n * RA.toArray(1); //=> []\n * RA.toArray(null); //=> []\n */\n\nvar toArray = (0, _ramda.ifElse)(_isIterable[\"default\"], fromArray, _ramda.values);\nvar _default = toArray;\nexports[\"default\"] = _default;"]}