{"version":3,"sources":["AnimatedBlock.js"],"names":["AnimatedNode","constructor","array","el","type","block","toString","__onEvaluate","node","result","adapt","v","InternalAnimatedValue","Array","nodify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AACA,IAAA,IAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,IAAA,sBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;IAEA,a;;;;;AAGEC,yBAAW,KAAXA,EAAmB;AAAA;;AAAA;AACjB,KAAA,GAAA,UAAA,CAAA,OAAA,EACEC,KAAK,CAALA,KAAAA,CAAYC,UAAAA,EAAE;AAAA,aAAIA,EAAE,YAAYH,aAAAA,CADlC,OACgB;AAAA,KAAdE,CADF,EAAA,2IAAA;AAIA,8BAAM;AAAEE,MAAAA,IAAI,EAAN,OAAA;AAAiBC,MAAAA,KAAK,EAAEH;AAAxB,KAAN,EAAA,KAAA;;AALiB,IAAA,eAAA,8CAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;AAMjB,UAAA,MAAA,GAAA,KAAA;AANiB;AAOlB;;;;WAEDI,oBAAW;AACT,aAAA,sBAAA,MAAA,CAA6B,KAA7B,QAAA,CAAA;AACD;;;WAEDC,wBAAe;AACb,UAAA,MAAA;;AACA,WAAA,MAAA,CAAA,OAAA,CAAoBC,UAAAA,IAAI,EAAI;AAC1BC,QAAAA,MAAM,GAAG,CAAA,GAAA,IAAA,CAAA,GAAA,EAATA,IAAS,CAATA;AADF,OAAA;;AAGA,aAAA,MAAA;AACD;;;EAtByBT,aAAAA,CAA5B,O;;AAyBO,SAAA,mBAAA,CAAA,KAAA,EAAoC;AACzC,SAAOU,KAAK,CAAZ,KAAY,CAAZ;AACD;;AAED,SAAA,MAAA,CAAA,CAAA,EAAmB;AACjB,MAAI,OAAA,CAAA,KAAA,QAAA,KAAyBC,CAAzB,KAAA,IAAyBA,IAAAA,CAAzB,KAAA,KAAA,CAAyBA,GAAzB,KAAA,CAAyBA,GAAAA,CAAC,CAA9B,SAAI,CAAJ,EAA2C;AACzC,QAAI,CAACA,CAAC,CAAN,KAAA,EAAc;AACZA,MAAAA,CAAC,CAADA,KAAAA,GAAU,IAAIC,sBAAAA,CAAJ,OAAA,CAAVD,CAAU,CAAVA;AACD;;AACD,WAAOA,CAAC,CAAR,KAAA;AALe;;AAQjB,SAAOA,CAAC,YAAYX,aAAAA,CAAbW,OAAAA,GAAAA,CAAAA,GAEHC,sBAAAA,CAAAA,OAAAA,CAAAA,gBAAAA,CAFJ,CAEIA,CAFJ;AAGD;;AAEM,SAAA,KAAA,CAAA,CAAA,EAAkB;AACvB,SAAOC,KAAK,CAALA,OAAAA,CAAAA,CAAAA,IACH,IAAA,aAAA,CAAkBF,CAAC,CAADA,GAAAA,CAAMH,UAAAA,IAAI;AAAA,WAAIE,KAAK,CADlCG,IACkC,CAAT;AAAA,GAAVF,CAAlB,CADGE,GAEHC,MAAM,CAFV,CAEU,CAFV;AAGD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport InternalAnimatedValue from './InternalAnimatedValue';\n\nclass AnimatedBlock extends AnimatedNode {\n  _array;\n\n  constructor(array) {\n    invariant(\n      array.every(el => el instanceof AnimatedNode),\n      `Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`\n    );\n    super({ type: 'block', block: array }, array);\n    this._array = array;\n  }\n\n  toString() {\n    return `AnimatedBlock, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    let result;\n    this._array.forEach(node => {\n      result = val(node);\n    });\n    return result;\n  }\n}\n\nexport function createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && v?.__isProxy) {\n    if (!v.__val) {\n      v.__val = new InternalAnimatedValue(0);\n    }\n    return v.__val;\n  }\n  // TODO: cache some typical static values (e.g. 0, 1, -1)\n  return v instanceof AnimatedNode\n    ? v\n    : InternalAnimatedValue.valueForConstant(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v)\n    ? new AnimatedBlock(v.map(node => adapt(node)))\n    : nodify(v);\n}\n"]}