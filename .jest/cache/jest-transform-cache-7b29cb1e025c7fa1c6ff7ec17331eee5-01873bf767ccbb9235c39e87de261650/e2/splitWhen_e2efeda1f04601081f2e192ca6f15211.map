{"version":3,"sources":["splitWhen.js"],"names":["_curry2","require","splitWhen","pred","list","idx","len","length","prefix","push","Array","prototype","slice","call","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAEXC,OAAO,CAAC,oBAAD,CAFP;;AAwBA,IAAIC,SAAS,GAEbF,OAAO,CAAC,SAASE,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B;AACrC,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGF,IAAI,CAACG,MAAf;AACA,MAAIC,MAAM,GAAG,EAAb;;AAEA,SAAOH,GAAG,GAAGC,GAAN,IAAa,CAACH,IAAI,CAACC,IAAI,CAACC,GAAD,CAAL,CAAzB,EAAsC;AACpCG,IAAAA,MAAM,CAACC,IAAP,CAAYL,IAAI,CAACC,GAAD,CAAhB;AACAA,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAO,CAACG,MAAD,EAASE,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BT,IAA3B,EAAiCC,GAAjC,CAAT,CAAP;AACD,CAXM,CAFP;;AAeAS,MAAM,CAACC,OAAP,GAAiBb,SAAjB","sourcesContent":["var _curry2 =\n/*#__PURE__*/\nrequire(\"./internal/_curry2\");\n/**\n * Takes a list and a predicate and returns a pair of lists with the following properties:\n *\n *  - the result of concatenating the two output lists is equivalent to the input list;\n *  - none of the elements of the first output list satisfies the predicate; and\n *  - if the second output list is non-empty, its first element satisfies the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n */\n\n\nvar splitWhen =\n/*#__PURE__*/\n_curry2(function splitWhen(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var prefix = [];\n\n  while (idx < len && !pred(list[idx])) {\n    prefix.push(list[idx]);\n    idx += 1;\n  }\n\n  return [prefix, Array.prototype.slice.call(list, idx)];\n});\n\nmodule.exports = splitWhen;"]}