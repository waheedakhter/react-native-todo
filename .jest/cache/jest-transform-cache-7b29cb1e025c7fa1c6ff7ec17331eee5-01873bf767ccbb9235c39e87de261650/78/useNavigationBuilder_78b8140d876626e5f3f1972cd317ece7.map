{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["PrivateValueStore","getRouteConfigsFromChildren","children","configs","React","child","Screen","acc","JSON","String","process","config","getComponent","component","console","navigatorKey","route","NavigationRouteContext","rest","current","router","createRouter","initialRouteName","screen","routeConfigs","screens","routeNames","routeParamList","initialParams","initialParamsFromParams","routeGetIdList","getId","isStateValid","state","isStateInitialized","getState","getIsInitial","NavigationStateContext","currentState","nextState","previousNestedParamsRef","previousParams","action","CommonActions","updatedState","shouldUpdate","setState","setKey","setTimeout","getCurrentState","getKey","initializedStateRef","emitter","e","name","navigation","descriptors","listeners","map","Object","type","cb","self","listener","data","addListener","addKeyedListener","onAction","key","actionListeners","childListeners","beforeRemoveListeners","keyedListeners","routerConfigOptions","onRouteFocus","focusedListeners","focus","getStateListeners","screenOptions","options","defaultScreenOptions","NavigationContent","NavigationHelpersContext","value"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Router,\n  RouterFactory,\n  RouterConfigOptions,\n  PartialState,\n  NavigationAction,\n  Route,\n} from '@react-navigation/routers';\nimport NavigationStateContext from './NavigationStateContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport Screen from './Screen';\nimport useComponent from './useComponent';\nimport useEventEmitter from './useEventEmitter';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useDescriptors from './useDescriptors';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useFocusEvents from './useFocusEvents';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useChildListeners from './useChildListeners';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOnGetState from './useOnGetState';\nimport useScheduleUpdate from './useScheduleUpdate';\nimport useCurrentRender from './useCurrentRender';\nimport isArrayEqual from './isArrayEqual';\nimport {\n  DefaultNavigatorOptions,\n  RouteConfig,\n  PrivateValueStore,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n} from './types';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        acc.push(\n          child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >\n        );\n        return acc;\n      }\n\n      if (child.type === React.Fragment) {\n        // When we encounter a fragment, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen' components as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          // Inline anonymous functions passed in the `component` prop will have the name of the prop\n          // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n          // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n          console.warn(\n            `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n          );\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<ScreenOptions> & RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...((rest as unknown) as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<\n      string,\n      RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n    >\n  >((acc, config) => {\n    if (config.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.name}')`\n      );\n    }\n\n    acc[config.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.name);\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr];\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames/routeParamList in the dep list\n    // below. We want to avoid forcing a new state to be calculated in cases\n    // where routeConfigs change without affecting routeNames/routeParamList.\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params.state !== previousParams?.state\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // FIXME: Since params are merged, `route.params.params` might contain params from an older route\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate(route.params.screen, route.params.params);\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          setState(undefined);\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        ...routeNames.map((name) => {\n          const { listeners } = screens[name];\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<State, ScreenOptions, EventMap>({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]}