{"version":3,"sources":["invoker.js"],"names":["_curry2","require","_isFunction","curryN","toString","invoker","arity","method","target","arguments","apply","Array","prototype","slice","call","TypeError","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAEXC,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIC,WAAW,GAEfD,OAAO,CAAC,wBAAD,CAFP;;AAIA,IAAIE,MAAM,GAEVF,OAAO,CAAC,UAAD,CAFP;;AAIA,IAAIG,QAAQ,GAEZH,OAAO,CAAC,YAAD,CAFP;;AAuCA,IAAII,OAAO,GAEXL,OAAO,CAAC,SAASK,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AACtC,SAAOJ,MAAM,CAACG,KAAK,GAAG,CAAT,EAAY,YAAY;AACnC,QAAIE,MAAM,GAAGC,SAAS,CAACH,KAAD,CAAtB;;AAEA,QAAIE,MAAM,IAAI,IAAV,IAAkBN,WAAW,CAACM,MAAM,CAACD,MAAD,CAAP,CAAjC,EAAmD;AACjD,aAAOC,MAAM,CAACD,MAAD,CAAN,CAAeG,KAAf,CAAqBF,MAArB,EAA6BG,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BL,SAA3B,EAAsC,CAAtC,EAAyCH,KAAzC,CAA7B,CAAP;AACD;;AAED,UAAM,IAAIS,SAAJ,CAAcX,QAAQ,CAACI,MAAD,CAAR,GAAmB,iCAAnB,GAAuDD,MAAvD,GAAgE,GAA9E,CAAN;AACD,GARY,CAAb;AASD,CAVM,CAFP;;AAcAS,MAAM,CAACC,OAAP,GAAiBZ,OAAjB","sourcesContent":["var _curry2 =\n/*#__PURE__*/\nrequire(\"./internal/_curry2\");\n\nvar _isFunction =\n/*#__PURE__*/\nrequire(\"./internal/_isFunction\");\n\nvar curryN =\n/*#__PURE__*/\nrequire(\"./curryN\");\n\nvar toString =\n/*#__PURE__*/\nrequire(\"./toString\");\n/**\n * Turns a named method with a specified arity into a function that can be\n * called directly supplied with arguments and a target object.\n *\n * The returned function is curried and accepts `arity + 1` parameters where\n * the final parameter is the target object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of any of the target object's methods to call.\n * @return {Function} A new curried function.\n * @see R.construct\n * @example\n *\n *      const sliceFrom = R.invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *      const sliceFrom6 = R.invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n *\n *      const dog = {\n *        speak: async () => 'Woof!'\n *      };\n *      const speak = R.invoker(0, 'speak');\n *      speak(dog).then(console.log) //~> 'Woof!'\n *\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\n\n\nvar invoker =\n/*#__PURE__*/\n_curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function () {\n    var target = arguments[arity];\n\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\n\nmodule.exports = invoker;"]}