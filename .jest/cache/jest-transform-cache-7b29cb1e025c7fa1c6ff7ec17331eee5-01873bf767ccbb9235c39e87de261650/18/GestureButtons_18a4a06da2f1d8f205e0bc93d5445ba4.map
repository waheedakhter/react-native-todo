{"version":3,"sources":["GestureButtons.tsx"],"names":["RawButton","GestureHandlerButton","shouldCancelWhenOutside","shouldActivateOnStart","React","constructor","nativeEvent","pointerInside","active","state","State","oldState","e","render","rest","onHandlerStateChange","AnimatedBaseButton","Animated","btnStyles","underlay","position","left","right","bottom","top","RectButton","activeOpacity","underlayColor","Platform","resolvedStyle","StyleSheet","style","onActiveStateChange","opacity","backgroundColor","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","BorderlessButton","borderless"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  processColor,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport createNativeWrapper from '../handlers/createNativeWrapper';\nimport GestureHandlerButton from './GestureHandlerButton';\nimport { State } from '../State';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlers';\nimport {\n  NativeViewGestureHandlerPayload,\n  NativeViewGestureHandlerProps,\n} from '../handlers/NativeViewGestureHandler';\n\nexport interface RawButtonProps extends NativeViewGestureHandlerProps {\n  exclusive?: boolean;\n  // TODO: we should transform props in `createNativeWrapper`\n  rippleColor?: any; // it was present in BaseButtonProps before but is used here in code\n}\n\nexport interface BaseButtonProps extends RawButtonProps {\n  onPress?: (pointerInside: boolean) => void;\n  onActiveStateChange?: (active: boolean) => void;\n  style?: StyleProp<ViewStyle>;\n  testID?: string;\n}\n\nexport interface RectButtonProps extends BaseButtonProps {\n  underlayColor?: string;\n  activeOpacity?: number;\n}\n\nexport interface BorderlessButtonProps extends BaseButtonProps {\n  borderless?: boolean;\n  activeOpacity?: number;\n}\n\nexport const RawButton = createNativeWrapper(GestureHandlerButton, {\n  shouldCancelWhenOutside: false,\n  shouldActivateOnStart: false,\n});\n\nexport class BaseButton extends React.Component<BaseButtonProps> {\n  private lastActive: boolean;\n\n  constructor(props: BaseButtonProps) {\n    super(props);\n    this.lastActive = false;\n  }\n\n  private handleEvent = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>) => {\n    const { state, oldState, pointerInside } = nativeEvent;\n    const active = pointerInside && state === State.ACTIVE;\n\n    if (active !== this.lastActive && this.props.onActiveStateChange) {\n      this.props.onActiveStateChange(active);\n    }\n\n    if (\n      oldState === State.ACTIVE &&\n      state !== State.CANCELLED &&\n      this.lastActive &&\n      this.props.onPress\n    ) {\n      this.props.onPress(active);\n    }\n\n    this.lastActive = active;\n  };\n\n  // Normally, the parent would execute it's handler first,\n  // then forward the event to listeners. However, here our handler\n  // is virtually only forwarding events to listeners, so we reverse the order\n  // to keep the proper order of the callbacks (from \"raw\" ones to \"processed\").\n  private onHandlerStateChange = (\n    e: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>\n  ) => {\n    this.props.onHandlerStateChange?.(e);\n    this.handleEvent(e);\n  };\n\n  private onGestureEvent = (\n    e: GestureEvent<NativeViewGestureHandlerPayload>\n  ) => {\n    this.props.onGestureEvent?.(e);\n    this.handleEvent(\n      e as HandlerStateChangeEvent<NativeViewGestureHandlerPayload>\n    ); // TODO: maybe it is not correct\n  };\n\n  render() {\n    const { rippleColor, ...rest } = this.props;\n\n    return (\n      <RawButton\n        rippleColor={processColor(rippleColor)}\n        {...rest}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}\n      />\n    );\n  }\n}\n\nconst AnimatedBaseButton = Animated.createAnimatedComponent(BaseButton);\n\nconst btnStyles = StyleSheet.create({\n  underlay: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    top: 0,\n  },\n});\n\nexport class RectButton extends React.Component<RectButtonProps> {\n  static defaultProps = {\n    activeOpacity: 0.105,\n    underlayColor: 'black',\n  };\n\n  private opacity: Animated.Value;\n\n  constructor(props: RectButtonProps) {\n    super(props);\n    this.opacity = new Animated.Value(0);\n  }\n\n  private onActiveStateChange = (active: boolean) => {\n    if (Platform.OS !== 'android') {\n      this.opacity.setValue(active ? this.props.activeOpacity! : 0);\n    }\n\n    this.props.onActiveStateChange?.(active);\n  };\n\n  render() {\n    const { children, style, ...rest } = this.props;\n\n    const resolvedStyle = StyleSheet.flatten(style ?? {});\n\n    return (\n      <BaseButton\n        {...rest}\n        style={resolvedStyle}\n        onActiveStateChange={this.onActiveStateChange}>\n        <Animated.View\n          style={[\n            btnStyles.underlay,\n            {\n              opacity: this.opacity,\n              backgroundColor: this.props.underlayColor,\n              borderRadius: resolvedStyle.borderRadius,\n              borderTopLeftRadius: resolvedStyle.borderTopLeftRadius,\n              borderTopRightRadius: resolvedStyle.borderTopRightRadius,\n              borderBottomLeftRadius: resolvedStyle.borderBottomLeftRadius,\n              borderBottomRightRadius: resolvedStyle.borderBottomRightRadius,\n            },\n          ]}\n        />\n        {children}\n      </BaseButton>\n    );\n  }\n}\n\nexport class BorderlessButton extends React.Component<BorderlessButtonProps> {\n  static defaultProps = {\n    activeOpacity: 0.3,\n    borderless: true,\n  };\n\n  private opacity: Animated.Value;\n\n  constructor(props: BorderlessButtonProps) {\n    super(props);\n    this.opacity = new Animated.Value(1);\n  }\n\n  private onActiveStateChange = (active: boolean) => {\n    if (Platform.OS !== 'android') {\n      this.opacity.setValue(active ? this.props.activeOpacity! : 1);\n    }\n\n    this.props.onActiveStateChange?.(active);\n  };\n\n  render() {\n    const { children, style, ...rest } = this.props;\n\n    return (\n      <AnimatedBaseButton\n        {...rest}\n        onActiveStateChange={this.onActiveStateChange}\n        style={[style, Platform.OS === 'ios' && { opacity: this.opacity }]}>\n        {children}\n      </AnimatedBaseButton>\n    );\n  }\n}\n\nexport { default as PureNativeButton } from './GestureHandlerButton';\n"]}