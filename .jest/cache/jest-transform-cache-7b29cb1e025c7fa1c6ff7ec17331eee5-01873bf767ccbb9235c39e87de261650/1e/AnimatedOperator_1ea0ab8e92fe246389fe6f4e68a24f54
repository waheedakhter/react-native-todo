b2f4c3ae6f0ce1c4b20753a653a372e6
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAnimatedOperator = createAnimatedOperator;

var _AnimatedNode = _interopRequireDefault(require("./AnimatedNode"));

var _val = require("../val");

var _invariant = _interopRequireDefault(require("fbjs/lib/invariant"));

var _AnimatedBlock = require("../core/AnimatedBlock");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function reduce(fn) {
  return function (input) {
    return input.reduce(function (a, b) {
      return fn((0, _val.val)(a), (0, _val.val)(b));
    });
  };
}

function reduceFrom(fn, initialValue) {
  return function (input) {
    return input.reduce(function (a, b) {
      return fn((0, _val.val)(a), (0, _val.val)(b));
    }, initialValue);
  };
}

function infix(fn) {
  return function (input) {
    return fn((0, _val.val)(input[0]), (0, _val.val)(input[1]));
  };
}

function single(fn) {
  return function (input) {
    return fn((0, _val.val)(input[0]));
  };
}

var OPERATIONS = {
  add: reduce(function (a, b) {
    return a + b;
  }),
  sub: reduce(function (a, b) {
    return a - b;
  }),
  multiply: reduce(function (a, b) {
    return a * b;
  }),
  divide: reduce(function (a, b) {
    return a / b;
  }),
  pow: reduce(function (a, b) {
    return Math.pow(a, b);
  }),
  modulo: reduce(function (a, b) {
    return (a % b + b) % b;
  }),
  sqrt: single(function (a) {
    return Math.sqrt(a);
  }),
  log: single(function (a) {
    return Math.log(a);
  }),
  sin: single(function (a) {
    return Math.sin(a);
  }),
  cos: single(function (a) {
    return Math.cos(a);
  }),
  tan: single(function (a) {
    return Math.tan(a);
  }),
  acos: single(function (a) {
    return Math.acos(a);
  }),
  asin: single(function (a) {
    return Math.asin(a);
  }),
  atan: single(function (a) {
    return Math.atan(a);
  }),
  exp: single(function (a) {
    return Math.exp(a);
  }),
  round: single(function (a) {
    return Math.round(a);
  }),
  abs: single(function (a) {
    return Math.abs(a);
  }),
  ceil: single(function (a) {
    return Math.ceil(a);
  }),
  floor: single(function (a) {
    return Math.floor(a);
  }),
  max: reduce(function (a, b) {
    return Math.max(a, b);
  }),
  min: reduce(function (a, b) {
    return Math.min(a, b);
  }),
  and: reduceFrom(function (a, b) {
    return a && b;
  }, true),
  or: reduceFrom(function (a, b) {
    return a || b;
  }, false),
  not: single(function (a) {
    return !a;
  }),
  defined: single(function (a) {
    return a !== null && a !== undefined && !isNaN(a);
  }),
  lessThan: infix(function (a, b) {
    return a < b;
  }),
  eq: infix(function (a, b) {
    return a == b;
  }),
  greaterThan: infix(function (a, b) {
    return a > b;
  }),
  lessOrEq: infix(function (a, b) {
    return a <= b;
  }),
  greaterOrEq: infix(function (a, b) {
    return a >= b;
  }),
  neq: infix(function (a, b) {
    return a != b;
  })
};

var AnimatedOperator = function (_AnimatedNode$default) {
  (0, _inherits2.default)(AnimatedOperator, _AnimatedNode$default);

  var _super = _createSuper(AnimatedOperator);

  function AnimatedOperator(operator, input) {
    var _this;

    (0, _classCallCheck2.default)(this, AnimatedOperator);
    (0, _invariant.default)(typeof operator === 'string', "Reanimated: Animated.operator node first argument should be of type String, but got: ".concat(operator));
    (0, _invariant.default)(input.every(function (el) {
      return el instanceof _AnimatedNode.default || typeof el === 'string' || typeof el === 'number';
    }), "Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got ".concat(input));
    _this = _super.call(this, {
      type: 'op',
      op: operator,
      input: input
    }, input);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "_input", void 0);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "_op", void 0);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "_operation", void 0);

    _this._op = operator;
    _this._input = input;
    return _this;
  }

  (0, _createClass2.default)(AnimatedOperator, [{
    key: "toString",
    value: function toString() {
      return "AnimatedOperator, id: ".concat(this.__nodeID);
    }
  }, {
    key: "__onEvaluate",
    value: function __onEvaluate() {
      if (!this._operation) {
        this._operation = OPERATIONS[this._op];
        (0, _invariant.default)(this._operation, "Illegal operator '%s'", this._op);
      }

      return this._operation(this._input);
    }
  }]);
  return AnimatedOperator;
}(_AnimatedNode.default);

function createAnimatedOperator(name) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return new AnimatedOperator(name, args.map(_AnimatedBlock.adapt));
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,