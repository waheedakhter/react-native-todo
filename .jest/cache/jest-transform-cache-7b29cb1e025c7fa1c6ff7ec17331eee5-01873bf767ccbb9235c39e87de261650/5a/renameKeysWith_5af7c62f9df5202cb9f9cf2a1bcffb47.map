{"version":3,"sources":["renameKeysWith.js"],"names":["exports","__esModule","_ramda","require","renameKeysWith","curry","fn","obj","pipe","toPairs","map","over","lensIndex","fromPairs","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAsBA,IAAIC,cAAc,GAAG,CAAC,GAAGF,MAAM,CAACG,KAAX,EAAkB,UAAUC,EAAV,EAAcC,GAAd,EAAmB;AACxD,SAAO,CAAC,GAAGL,MAAM,CAACM,IAAX,EAAiBN,MAAM,CAACO,OAAxB,EAAiC,CAAC,GAAGP,MAAM,CAACQ,GAAX,EAAgB,CAAC,GAAGR,MAAM,CAACS,IAAX,EAAiB,CAAC,GAAGT,MAAM,CAACU,SAAX,EAAsB,CAAtB,CAAjB,EAA2CN,EAA3C,CAAhB,CAAjC,EAAkGJ,MAAM,CAACW,SAAzG,EAAoHN,GAApH,CAAP;AACD,CAFoB,CAArB;AAGA,IAAIO,QAAQ,GAAGV,cAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBc,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Creates a new object with the own properties of the provided object, but the\n * keys renamed according to logic of renaming function.\n *\n * Keep in mind that in the case of keys conflict is behaviour undefined and\n * the result may vary between various JS engines!\n *\n * @func renameKeysWith\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.5.0|v1.5.0}\n * @category Object\n * @sig (a -> b) -> {a: *} -> {b: *}\n * @param {Function} fn Function that renames the keys\n * @param {!Object} obj Provided object\n * @return {!Object} New object with renamed keys\n * @see {@link https://github.com/ramda/ramda/wiki/Cookbook#rename-keys-of-an-object-by-a-function|Ramda Cookbook}, {@link RA.renameKeys|renameKeys}\n * @example\n *\n * RA.renameKeysWith(R.concat('a'), { A: 1, B: 2, C: 3 }) //=> { aA: 1, aB: 2, aC: 3 }\n */\nvar renameKeysWith = (0, _ramda.curry)(function (fn, obj) {\n  return (0, _ramda.pipe)(_ramda.toPairs, (0, _ramda.map)((0, _ramda.over)((0, _ramda.lensIndex)(0), fn)), _ramda.fromPairs)(obj);\n});\nvar _default = renameKeysWith;\nexports[\"default\"] = _default;"]}