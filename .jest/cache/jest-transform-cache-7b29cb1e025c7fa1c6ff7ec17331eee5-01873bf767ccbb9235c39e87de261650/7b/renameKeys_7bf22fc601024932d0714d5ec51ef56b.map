{"version":3,"sources":["renameKeys.js"],"names":["exports","__esModule","_ramda","require","_renameKeysWith","_interopRequireDefault","obj","valueOrKey","keysMap","key","has","renameKeys","curry","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,eAAe,GAAGC,sBAAsB,CAACF,OAAO,CAAC,kBAAD,CAAR,CAA5C;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,IAAIC,UAAU,GAAG,SAASA,UAAT,CAAoBC,OAApB,EAA6B;AAC5C,SAAO,UAAUC,GAAV,EAAe;AACpB,QAAI,CAAC,GAAGP,MAAM,CAACQ,GAAX,EAAgBD,GAAhB,EAAqBD,OAArB,CAAJ,EAAmC;AACjC,aAAOA,OAAO,CAACC,GAAD,CAAd;AACD;;AAED,WAAOA,GAAP;AACD,GAND;AAOD,CARD;;AAmCA,IAAIE,UAAU,GAAG,CAAC,GAAGT,MAAM,CAACU,KAAX,EAAkB,UAAUJ,OAAV,EAAmBF,GAAnB,EAAwB;AACzD,SAAO,CAAC,GAAGF,eAAe,CAAC,SAAD,CAAnB,EAAgCG,UAAU,CAACC,OAAD,CAA1C,EAAqDF,GAArD,CAAP;AACD,CAFgB,CAAjB;AAGA,IAAIO,QAAQ,GAAGF,UAAf;AACAX,OAAO,CAAC,SAAD,CAAP,GAAqBa,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _renameKeysWith = _interopRequireDefault(require(\"./renameKeysWith\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar valueOrKey = function valueOrKey(keysMap) {\n  return function (key) {\n    if ((0, _ramda.has)(key, keysMap)) {\n      return keysMap[key];\n    }\n\n    return key;\n  };\n};\n/**\n * Creates a new object with the own properties of the provided object, but the\n * keys renamed according to the keysMap object as `{oldKey: newKey}`.\n * When some key is not found in the keysMap, then it's passed as-is.\n *\n * Keep in mind that in the case of keys conflict is behaviour undefined and\n * the result may vary between various JS engines!\n *\n * @func renameKeys\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.5.0|v1.5.0}\n * @category Object\n * @sig {a: b} -> {a: *} -> {b: *}\n * @param {!Object} keysMap\n * @param {!Object} obj\n * @return {!Object} New object with renamed keys\n * @see {@link https://github.com/ramda/ramda/wiki/Cookbook#rename-keys-of-an-object|Ramda Cookbook}, {@link RA.renameKeysWith|renameKeysWith}\n * @example\n *\n * const input = { firstName: 'Elisia', age: 22, type: 'human' };\n *\n * RA.renameKeys({ firstName: 'name', type: 'kind', foo: 'bar' })(input);\n * //=> { name: 'Elisia', age: 22, kind: 'human' }\n */\n\n\nvar renameKeys = (0, _ramda.curry)(function (keysMap, obj) {\n  return (0, _renameKeysWith[\"default\"])(valueOrKey(keysMap), obj);\n});\nvar _default = renameKeys;\nexports[\"default\"] = _default;"]}