{"version":3,"sources":["isNotNaN.js"],"names":["exports","__esModule","_ramda","require","_isNaN2","_interopRequireDefault","obj","isNotNaN","complement","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACF,OAAO,CAAC,SAAD,CAAR,CAApC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAgCjG,IAAIC,QAAQ,GAAG,CAAC,GAAGL,MAAM,CAACM,UAAX,EAAuBJ,OAAO,CAAC,SAAD,CAA9B,CAAf;AACA,IAAIK,QAAQ,GAAGF,QAAf;AACAP,OAAO,CAAC,SAAD,CAAP,GAAqBS,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isNaN2 = _interopRequireDefault(require(\"./isNaN\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Checks whether the passed value is complement of `NaN` and its type is not `Number`.\n *\n * @func isNotNaN\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.6.0|v0.6.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNaN|isNaN}\n * @example\n *\n * RA.isNotNaN(NaN); // => false\n * RA.isNotNaN(Number.NaN); // => false\n * RA.isNotNaN(0 / 0); // => false\n *\n * RA.isNotNaN('NaN'); // => true\n * RA.isNotNaN(undefined); // => true\n * RA.isNotNaN({}); // => true\n * RA.isNotNaN('blabla'); // => true\n *\n * RA.isNotNaN(true); // => true\n * RA.isNotNaN(null); // => true\n * RA.isNotNaN(37); // => true\n * RA.isNotNaN('37'); // => true\n * RA.isNotNaN('37.37'); // => true\n * RA.isNotNaN(''); // => true\n * RA.isNotNaN(' '); // => true\n */\nvar isNotNaN = (0, _ramda.complement)(_isNaN2[\"default\"]);\nvar _default = isNotNaN;\nexports[\"default\"] = _default;"]}