{"version":3,"sources":["extractPathFromURL.tsx"],"names":["protocol","prefix","host","prefixRegex","it","normalizedURL","url"],"mappings":";;;;;;;;;;;;;AAAA,IAAA,mBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,CAAA;;;;;;;;AAEe,SAAA,kBAAA,CAAA,QAAA,EAAA,GAAA,EAA6D;AAC1E,uDAAA,QAAA,wCAA+B;AAAA,QAA/B,MAA+B;;AAAA,QAAA,cAAA,EAAA,aAAA;;AAC7B,QAAMA,QAAQ,GAAA,CAAA,cAAA,GAAA,CAAA,aAAA,GAAGC,MAAM,CAANA,KAAAA,CAAH,SAAGA,CAAH,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,aAAAA,CAAH,CAAGA,CAAH,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,cAAA,GAAd,EAAA;AACA,QAAMC,IAAI,GAAG,MAAM,CAAN,OAAA,CACF,IAAA,MAAA,CAAA,IAAA,MAAA,CAAe,CAAA,GAAA,mBAAA,CAAA,OAAA,EADb,QACa,CAAf,CAAA,CADE,EAAA,EAAA,EAAA,OAAA,CAAA,MAAA,EAAA,GAAA,EAAA,OAAA,CAAA,KAAA,EAFgB,EAEhB,CAAb;AAKA,QAAMC,WAAW,GAAG,IAAA,MAAA,CAAA,IAAA,MAAA,CACd,CAAA,GAAA,mBAAA,CAAA,OAAA,EADc,QACd,CADc,EAAA,MAAA,EAAA,MAAA,CACqBD,IAAI,CAAJA,KAAAA,CAAAA,GAAAA,EAAAA,GAAAA,CAE/BE,UAAAA,EAAD;AAAA,aAASA,EAAE,KAAFA,GAAAA,GAAAA,OAAAA,GAAuB,CAAA,GAAA,mBAAA,CAAA,OAAA,EAFAF,EAEA,CAAhC;AAAA,KAFgCA,EAAAA,IAAAA,CADzC,KACyCA,CADrB,CAAA,CAApB;AAOA,QAAMG,aAAa,GAAGC,GAAG,CAAHA,OAAAA,CAAAA,MAAAA,EAAtB,GAAsBA,CAAtB;;AAEA,QAAIH,WAAW,CAAXA,IAAAA,CAAJ,aAAIA,CAAJ,EAAqC;AACnC,aAAOE,aAAa,CAAbA,OAAAA,CAAAA,WAAAA,EAAP,EAAOA,CAAP;AACD;AACF;;AAED,SAAA,SAAA;AACD","sourcesContent":["import escapeStringRegexp from 'escape-string-regexp';\n\nexport default function extractPathFromURL(prefixes: string[], url: string) {\n  for (const prefix of prefixes) {\n    const protocol = prefix.match(/^[^:]+:/)?.[0] ?? '';\n    const host = prefix\n      .replace(new RegExp(`^${escapeStringRegexp(protocol)}`), '')\n      .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n      .replace(/^\\//, ''); // Remove extra leading slash\n\n    const prefixRegex = new RegExp(\n      `^${escapeStringRegexp(protocol)}(/)*${host\n        .split('.')\n        .map((it) => (it === '*' ? '[^/]+' : escapeStringRegexp(it)))\n        .join('\\\\.')}`\n    );\n\n    const normalizedURL = url.replace(/\\/+/g, '/');\n\n    if (prefixRegex.test(normalizedURL)) {\n      return normalizedURL.replace(prefixRegex, '');\n    }\n  }\n\n  return undefined;\n}\n"]}