{"version":3,"sources":["trunc.js"],"names":["exports","__esModule","truncPonyfill","_ramda","require","_Math","_interopRequireDefault","_isFunction","obj","curryN","trunc","Math","bind","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,aAAR,GAAwBF,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAAlD;;AAEA,IAAIG,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,KAAK,GAAGC,sBAAsB,CAACF,OAAO,CAAC,iCAAD,CAAR,CAAlC;;AAEA,IAAIG,WAAW,GAAGD,sBAAsB,CAACF,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACP,UAAX,GAAwBO,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,IAAIN,aAAa,GAAG,CAAC,GAAGC,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsBJ,KAAK,CAAC,SAAD,CAA3B,CAApB;AAsBAL,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACA,IAAIQ,KAAK,GAAG,CAAC,GAAGH,WAAW,CAAC,SAAD,CAAf,EAA4BI,IAAI,CAACD,KAAjC,IAA0C,CAAC,GAAGP,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsB,CAAC,GAAGN,MAAM,CAACS,IAAX,EAAiBD,IAAI,CAACD,KAAtB,EAA6BC,IAA7B,CAAtB,CAA1C,GAAsGT,aAAlH;AACA,IAAIW,QAAQ,GAAGH,KAAf;AACAV,OAAO,CAAC,SAAD,CAAP,GAAqBa,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.truncPonyfill = exports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _Math = _interopRequireDefault(require(\"./internal/ponyfills/Math.trunc\"));\n\nvar _isFunction = _interopRequireDefault(require(\"./isFunction\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar truncPonyfill = (0, _ramda.curryN)(1, _Math[\"default\"]);\n/**\n * Returns the integer part of a number by removing any fractional digits.\n *\n * @func trunc\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.15.0|v2.15.0}\n * @category Math\n * @sig Number | String -> Number\n * @param {number|string} number The number to trunc\n * @return {number} The integer part of the given number\n * @example\n *\n * RA.trunc(13.37); //=> 13\n * RA.trunc(42.84); //=> 42\n * RA.trunc(0.123); //=>  0\n * RA.trunc(-0.123); //=> -0\n * RA.trunc('-1.123'); //=> -1\n * RA.trunc(NaN); //=> NaN\n * RA.trunc('foo'); //=> NaN\n */\n\nexports.truncPonyfill = truncPonyfill;\nvar trunc = (0, _isFunction[\"default\"])(Math.trunc) ? (0, _ramda.curryN)(1, (0, _ramda.bind)(Math.trunc, Math)) : truncPonyfill;\nvar _default = trunc;\nexports[\"default\"] = _default;"]}