68909e26a3524db5d8a29fac635c846e
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = configureStore;

var _redux = require('redux');

var _lodash = require('lodash.isplainobject');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return Array.from(arr);
  }
}

var isFunction = function isFunction(arg) {
  return typeof arg === 'function';
};

function configureStore() {
  var middlewares = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return function mockStore() {
    var _getState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    function mockStoreWithoutMiddleware() {
      var actions = [];
      var listeners = [];
      var self = {
        getState: function getState() {
          return isFunction(_getState) ? _getState(actions) : _getState;
        },
        getActions: function getActions() {
          return actions;
        },
        dispatch: function dispatch(action) {
          if (!(0, _lodash2.default)(action)) {
            throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
          }

          if (typeof action.type === 'undefined') {
            throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant? ' + 'Action: ' + JSON.stringify(action));
          }

          actions.push(action);

          for (var i = 0; i < listeners.length; i++) {
            listeners[i]();
          }

          return action;
        },
        clearActions: function clearActions() {
          actions = [];
        },
        subscribe: function subscribe(cb) {
          if (isFunction(cb)) {
            listeners.push(cb);
          }

          return function () {
            var index = listeners.indexOf(cb);

            if (index < 0) {
              return;
            }

            listeners.splice(index, 1);
          };
        },
        replaceReducer: function replaceReducer(nextReducer) {
          if (!isFunction(nextReducer)) {
            throw new Error('Expected the nextReducer to be a function.');
          }
        }
      };
      return self;
    }

    var mockStoreWithMiddleware = _redux.applyMiddleware.apply(undefined, _toConsumableArray(middlewares))(mockStoreWithoutMiddleware);

    return mockStoreWithMiddleware();
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImNvbmZpZ3VyZVN0b3JlIiwiX3JlZHV4IiwicmVxdWlyZSIsIl9sb2Rhc2giLCJfbG9kYXNoMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiaSIsImFycjIiLCJsZW5ndGgiLCJmcm9tIiwiaXNGdW5jdGlvbiIsImFyZyIsIm1pZGRsZXdhcmVzIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwibW9ja1N0b3JlIiwiX2dldFN0YXRlIiwibW9ja1N0b3JlV2l0aG91dE1pZGRsZXdhcmUiLCJhY3Rpb25zIiwibGlzdGVuZXJzIiwic2VsZiIsImdldFN0YXRlIiwiZ2V0QWN0aW9ucyIsImRpc3BhdGNoIiwiYWN0aW9uIiwiRXJyb3IiLCJ0eXBlIiwiSlNPTiIsInN0cmluZ2lmeSIsInB1c2giLCJjbGVhckFjdGlvbnMiLCJzdWJzY3JpYmUiLCJjYiIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJtb2NrU3RvcmVXaXRoTWlkZGxld2FyZSIsImFwcGx5TWlkZGxld2FyZSIsImFwcGx5Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkMsY0FBbEI7O0FBRUEsSUFBSUMsTUFBTSxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFwQjs7QUFFQSxJQUFJQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxzQkFBRCxDQUFyQjs7QUFFQSxJQUFJRSxRQUFRLEdBQUdDLHNCQUFzQixD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O0FBQ3BDWixVQUFBQSxPQUFPLEdBQUcsRUFBVjtBQUNELFNBMUJRO0FBMkJUYSxRQUFBQSxTQUFTLEVBQUUsU0FBU0EsU0FBVCxDQUFtQkMsRUFBbkIsRUFBdUI7QUFDaEMsY0FBSXRCLFVBQVUsQ0FBQ3NCLEVBQUQsQ0FBZCxFQUFvQjtBQUNsQmIsWUFBQUEsU0FBUyxDQUFDVSxJQUFWLENBQWVHLEVBQWY7QUFDRDs7QUFFRCxpQkFBTyxZQUFZO0FBQ2pCLGdCQUFJQyxLQUFLLEdBQUdkLFNBQVMsQ0FBQ2UsT0FBVixDQUFrQkYsRUFBbEIsQ0FBWjs7QUFFQSxnQkFBSUMsS0FBSyxHQUFHLENBQVosRUFBZTtBQUNiO0FBQ0Q7O0FBQ0RkLFlBQUFBLFNBQVMsQ0FBQ2dCLE1BQVYsQ0FBaUJGLEtBQWpCLEVBQXdCLENBQXhCO0FBQ0QsV0FQRDtBQVFELFNBeENRO0FBeUNURyxRQUFBQSxjQUFjLEVBQUUsU0FBU0EsY0FBVCxDQUF3QkMsV0FBeEIsRUFBcUM7QUFDbkQsY0FBSSxDQUFDM0IsVUFBVSxDQUFDMkIsV0FBRCxDQUFmLEVBQThCO0FBQzVCLGtCQUFNLElBQUlaLEtBQUosQ0FBVSw0Q0FBVixDQUFOO0FBQ0Q7QUFDRjtBQTdDUSxPQUFYO0FBZ0RBLGFBQU9MLElBQVA7QUFDRDs7QUFFRCxRQUFJa0IsdUJBQXVCLEdBQUczQyxNQUFNLENBQUM0QyxlQUFQLENBQXVCQyxLQUF2QixDQUE2QjFCLFNBQTdCLEVBQXdDWixrQkFBa0IsQ0FBQ1UsV0FBRCxDQUExRCxFQUF5RUssMEJBQXpFLENBQTlCOztBQUVBLFdBQU9xQix1QkFBdUIsRUFBOUI7QUFDRCxHQTdERDtBQThERCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNvbmZpZ3VyZVN0b3JlO1xuXG52YXIgX3JlZHV4ID0gcmVxdWlyZSgncmVkdXgnKTtcblxudmFyIF9sb2Rhc2ggPSByZXF1aXJlKCdsb2Rhc2guaXNwbGFpbm9iamVjdCcpO1xuXG52YXIgX2xvZGFzaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2Rhc2gpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZVN0b3JlKCkge1xuICB2YXIgbWlkZGxld2FyZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuXG4gIHJldHVybiBmdW5jdGlvbiBtb2NrU3RvcmUoKSB7XG4gICAgdmFyIF9nZXRTdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICBmdW5jdGlvbiBtb2NrU3RvcmVXaXRob3V0TWlkZGxld2FyZSgpIHtcbiAgICAgIHZhciBhY3Rpb25zID0gW107XG4gICAgICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgICAgIHZhciBzZWxmID0ge1xuICAgICAgICBnZXRTdGF0ZTogZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24oX2dldFN0YXRlKSA/IF9nZXRTdGF0ZShhY3Rpb25zKSA6IF9nZXRTdGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0QWN0aW9uczogZnVuY3Rpb24gZ2V0QWN0aW9ucygpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9ucztcbiAgICAgICAgfSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgICAgICAgIGlmICghKDAsIF9sb2Rhc2gyLmRlZmF1bHQpKGFjdGlvbikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/ICcgKyAnQWN0aW9uOiAnICsgSlNPTi5zdHJpbmdpZnkoYWN0aW9uKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYWN0aW9ucy5wdXNoKGFjdGlvbik7XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGlzdGVuZXJzW2ldKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICAgICAgfSxcbiAgICAgICAgY2xlYXJBY3Rpb25zOiBmdW5jdGlvbiBjbGVhckFjdGlvbnMoKSB7XG4gICAgICAgICAgYWN0aW9ucyA9IFtdO1xuICAgICAgICB9LFxuICAgICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShjYikge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGNiKSkge1xuICAgICAgICAgICAgbGlzdGVuZXJzLnB1c2goY2IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihjYik7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVwbGFjZVJlZHVjZXI6IGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKG5leHRSZWR1Y2VyKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIHZhciBtb2NrU3RvcmVXaXRoTWlkZGxld2FyZSA9IF9yZWR1eC5hcHBseU1pZGRsZXdhcmUuYXBwbHkodW5kZWZpbmVkLCBfdG9Db25zdW1hYmxlQXJyYXkobWlkZGxld2FyZXMpKShtb2NrU3RvcmVXaXRob3V0TWlkZGxld2FyZSk7XG5cbiAgICByZXR1cm4gbW9ja1N0b3JlV2l0aE1pZGRsZXdhcmUoKTtcbiAgfTtcbn0iXX0=