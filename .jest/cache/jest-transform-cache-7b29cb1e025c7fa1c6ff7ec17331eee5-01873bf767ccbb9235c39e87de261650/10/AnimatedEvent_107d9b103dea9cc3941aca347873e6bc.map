{"version":3,"sources":["AnimatedEvent.js"],"names":["eventMappings","alwaysNodes","getNode","node","Platform","traverse","value","InternalAnimatedValue","path","argMapping","ev","proxyHandler","get","name","target","set","prop","proxy","AnimatedNode","constructor","config","sanitizeArgMapping","type","toString","attachEvent","i","viewTag","ReanimatedModule","__onEvaluate","detachEvent"],"mappings":"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","sourcesContent":["import { Platform, findNodeHandle } from 'react-native';\nimport ReanimatedModule from '../ReanimatedModule';\n\nimport AnimatedNode from './AnimatedNode';\nimport InternalAnimatedValue from './AnimatedValue';\nimport { createAnimatedAlways } from './AnimatedAlways';\n\nimport invariant from 'fbjs/lib/invariant';\nimport createEventObjectProxyPolyfill from './createEventObjectProxyPolyfill';\n\nfunction sanitizeArgMapping(argMapping) {\n  // Find animated values in `argMapping` and create an array representing their\n  // key path inside the `nativeEvent` object. Ex.: ['contentOffset', 'x'].\n  const eventMappings = [];\n  const alwaysNodes = [];\n\n  const getNode = node => {\n    if (Platform.OS === 'web' || Platform.OS === 'windows' || Platform.OS === 'macos') {\n      return node;\n    }\n    return node.__nodeID;\n  };\n\n  const traverse = (value, path) => {\n    if (value instanceof InternalAnimatedValue) {\n      eventMappings.push(path.concat(getNode(value)));\n    } else if (typeof value === 'object' && value.__val) {\n      eventMappings.push(path.concat(getNode(value.__val)));\n    } else if (typeof value === 'function') {\n      const node = new InternalAnimatedValue(0);\n      alwaysNodes.push(createAnimatedAlways(value(node)));\n      eventMappings.push(path.concat(getNode(node)));\n    } else if (typeof value === 'object') {\n      for (const key in value) {\n        traverse(value[key], path.concat(key));\n      }\n    }\n  };\n\n  invariant(\n    argMapping[0] && argMapping[0].nativeEvent,\n    'Native driven events only support animated values contained inside `nativeEvent`.'\n  );\n\n  // Assume that the event containing `nativeEvent` is always the first argument.\n  const ev = argMapping[0].nativeEvent;\n  if (typeof ev === 'object') {\n    traverse(ev, []);\n  } else if (typeof ev === 'function') {\n    const proxyHandler = {\n      get: function(target, name) {\n        if (name === '__isProxy') {\n          return true;\n        }\n        if (!target[name] && name !== '__val') {\n          target[name] = new Proxy({}, proxyHandler);\n        }\n        return target[name];\n      },\n      set: function(target, prop, value) {\n        if (prop === '__val') {\n          target[prop] = value;\n          return true;\n        }\n        return false;\n      },\n    };\n\n    const proxy =\n      typeof Proxy === 'function'\n        ? new Proxy({}, proxyHandler)\n        : createEventObjectProxyPolyfill();\n    alwaysNodes.push(createAnimatedAlways(ev(proxy)));\n    traverse(proxy, []);\n  }\n\n  return { eventMappings, alwaysNodes };\n}\n\nexport default class AnimatedEvent extends AnimatedNode {\n  constructor(argMapping, config = {}) {\n    const { eventMappings, alwaysNodes } = sanitizeArgMapping(argMapping);\n    super({ type: 'event', argMapping: eventMappings });\n    this._alwaysNodes = alwaysNodes;\n  }\n\n  toString() {\n    return `AnimatedEvent, id: ${this.__nodeID}`;\n  }\n\n  // The below field is a temporary workaround to make AnimatedEvent object be recognized\n  // as Animated.event event callback and therefore filtered out from being send over the\n  // bridge which was causing the object to be frozen in JS.\n  __isNative = true;\n\n  attachEvent(viewRef, eventName) {\n    for (let i = 0; i < this._alwaysNodes.length; i++) {\n      this._alwaysNodes[i].__attach();\n    }\n    this.__attach();\n    const viewTag = findNodeHandle(viewRef);\n    ReanimatedModule.attachEvent(viewTag, eventName, this.__nodeID);\n  }\n\n  __onEvaluate() {\n    return 0;\n  }\n\n  detachEvent(viewRef, eventName) {\n    for (let i = 0; i < this._alwaysNodes.length; i++) {\n      this._alwaysNodes[i].isNativelyInitialized() &&\n        this._alwaysNodes[i].__detach();\n    }\n    const viewTag = findNodeHandle(viewRef);\n    ReanimatedModule.detachEvent(viewTag, eventName, this.__nodeID);\n    this.__detach();\n  }\n}\n\nexport function createAnimatedEvent(argMapping, config) {\n  return new AnimatedEvent(argMapping, config);\n}\n"]}