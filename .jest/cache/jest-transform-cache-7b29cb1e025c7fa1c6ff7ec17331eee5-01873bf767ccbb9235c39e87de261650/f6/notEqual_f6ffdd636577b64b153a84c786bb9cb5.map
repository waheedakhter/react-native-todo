{"version":3,"sources":["notEqual.js"],"names":["exports","__esModule","_ramda","require","notEqual","complement","equals","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AA4BA,IAAIC,QAAQ,GAAG,CAAC,GAAGF,MAAM,CAACG,UAAX,EAAuBH,MAAM,CAACI,MAA9B,CAAf;AACA,IAAIC,QAAQ,GAAGH,QAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBO,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Returns `true` if its arguments are not equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func notEqual\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.29.0|v2.29.0}\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see {@link https://ramdajs.com/docs/#equals|equals}\n * @example\n *\n * RA.notEqual(1, 1); //=> false\n * RA.notEqual(1, '1'); //=> true\n * RA.notEqual([1, 2, 3], [1, 2, 3]); //=> false\n *\n * const a = {}; a.v = a;\n * const b = {}; b.v = b;\n * RA.notEqual(a, b); //=> false\n */\nvar notEqual = (0, _ramda.complement)(_ramda.equals);\nvar _default = notEqual;\nexports[\"default\"] = _default;"]}