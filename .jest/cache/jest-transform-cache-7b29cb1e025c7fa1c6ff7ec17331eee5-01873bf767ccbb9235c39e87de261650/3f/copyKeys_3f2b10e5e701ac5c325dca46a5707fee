9070d6aa21879339b7da17bb42959020
"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _ramda = require("ramda");

var _renameKeys = _interopRequireDefault(require("./renameKeys"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var copyKeys = (0, _ramda.curryN)(2, function (keysMap, obj) {
  return _objectSpread(_objectSpread({}, obj), (0, _renameKeys["default"])(keysMap, obj));
});
var _default = copyKeys;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcHlLZXlzLmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiX3JhbWRhIiwicmVxdWlyZSIsIl9yZW5hbWVLZXlzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiY29weUtleXMiLCJjdXJyeU4iLCJrZXlzTWFwIiwiX2RlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPLENBQUNDLFVBQVIsR0FBcUIsSUFBckI7QUFDQUQsT0FBTyxDQUFDLFNBQUQsQ0FBUCxHQUFxQixLQUFLLENBQTFCOztBQUVBLElBQUlFLE1BQU0sR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBcEI7O0FBRUEsSUFBSUMsV0FBVyxHQUFHQyxzQkFBc0IsQ0FBQ0YsT0FBTyxDQUFDLGNBQUQsQ0FBUixDQUF4Qzs7QUFFQSxTQUFTRSxzQkFBVCxDQUFnQ0MsR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0wsVUFBWCxHQUF3QkssR0FBeEIsR0FBOEI7QUFBRSxlQUFXQTtBQUFiLEdBQXJDO0FBQTBEOztBQUVqRyxTQUFTQyxPQUFULENBQWlCQyxNQUFqQixFQUF5QkMsY0FBekIsRUFBeUM7QUFB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QUZjLENBQWY7QUFHQSxJQUFJZ0MsUUFBUSxHQUFHSCxRQUFmO0FBQ0FuQyxPQUFPLENBQUMsU0FBRCxDQUFQLEdBQXFCc0MsUUFBckIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JhbWRhID0gcmVxdWlyZShcInJhbWRhXCIpO1xuXG52YXIgX3JlbmFtZUtleXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JlbmFtZUtleXNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBvd24gcHJvcGVydGllcyBvZiB0aGUgcHJvdmlkZWQgb2JqZWN0LCBhbmQgdGhlXG4gKiBrZXlzIGNvcGllZCBhY2NvcmRpbmcgdG8gdGhlIGtleXNNYXAgb2JqZWN0IGFzIGB7b2xkS2V5OiBuZXdLZXl9YC5cbiAqIFdoZW4gbm8ga2V5IGZyb20gdGhlIGtleXNNYXAgaXMgZm91bmQsIHRoZW4gYSBzaGFsbG93IGNsb25lIG9mIGFuIG9iamVjdCBpcyByZXR1cm5lZC5cbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCBpbiB0aGUgY2FzZSBvZiBrZXlzIGNvbmZsaWN0IGlzIGJlaGF2aW91ciB1bmRlZmluZWQgYW5kXG4gKiB0aGUgcmVzdWx0IG1heSB2YXJ5IGJldHdlZW4gdmFyaW91cyBKUyBlbmdpbmVzIVxuICpcbiAqIEBmdW5jIGNvcHlLZXlzXG4gKiBAbWVtYmVyT2YgUkFcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBzaWcge2E6IGJ9IC0+IHthOiAqfSAtPiB7YjogKn1cbiAqIEBwYXJhbSB7IU9iamVjdH0ga2V5c01hcFxuICogQHBhcmFtIHshT2JqZWN0fSBvYmpcbiAqIEByZXR1cm4geyFPYmplY3R9IE5ldyBvYmplY3Qgd2l0aCBjb3BpZWQga2V5c1xuICogQHNlZSB7QGxpbmsgUkEucmVuYW1lS2V5c3xyZW5hbWVLZXlzfVxuICogQGV4YW1wbGVcbiAqXG4gKiBjb3B5S2V5cyh7IGE6ICdiJyB9LCB7IGE6IHRydWUgfSk7IC8vPT4geyBhOiB0cnVlLCBiOiB0cnVlIH1cbiAqIGNvcHlLZXlzKHsgYTogJ2InIH0sIHsgYTogdHJ1ZSwgYjogZmFsc2UgfSk7IC8vPT4geyBhOiB0cnVlLCBiOiB0cnVlIH1cbiAqL1xudmFyIGNvcHlLZXlzID0gKDAsIF9yYW1kYS5jdXJyeU4pKDIsIGZ1bmN0aW9uIChrZXlzTWFwLCBvYmopIHtcbiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgb2JqKSwgKDAsIF9yZW5hbWVLZXlzW1wiZGVmYXVsdFwiXSkoa2V5c01hcCwgb2JqKSk7XG59KTtcbnZhciBfZGVmYXVsdCA9IGNvcHlLZXlzO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiXX0=