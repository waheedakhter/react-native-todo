{"version":3,"sources":["move.js"],"names":["exports","__esModule","_ramda","require","move","curry","fromIdx","toIdx","list","compose","insert","nth","remove","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAqBA,IAAIC,IAAI,GAAG,CAAC,GAAGF,MAAM,CAACG,KAAX,EAAkB,UAAUC,OAAV,EAAmBC,KAAnB,EAA0BC,IAA1B,EAAgC;AAC3D,SAAO,CAAC,GAAGN,MAAM,CAACO,OAAX,EAAoB,CAAC,GAAGP,MAAM,CAACQ,MAAX,EAAmBH,KAAnB,EAA0B,CAAC,GAAGL,MAAM,CAACS,GAAX,EAAgBL,OAAhB,EAAyBE,IAAzB,CAA1B,CAApB,EAA+E,CAAC,GAAGN,MAAM,CAACU,MAAX,EAAmBN,OAAnB,EAA4B,CAA5B,CAA/E,EAA+GE,IAA/G,CAAP;AACD,CAFU,CAAX;AAGA,IAAIK,QAAQ,GAAGT,IAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBa,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Returns a new list with the item at the position `fromIdx` moved to the position `toIdx`. If the\n * `toIdx` is out of the `list` range, the item will be placed at the last position of the `list`.\n * When negative indices are provided, the behavior of the move is unspecified.\n *\n * @func move\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.8.0|v2.8.0}\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {number} fromIdx The position of item to be moved\n * @param {number} toIdx The position of item after move\n * @param {Array} list The list containing the item to be moved\n * @return {Array}\n * @example\n *\n * const list = ['a', 'b', 'c', 'd', 'e'];\n * RA.move(1, 3, list) //=> ['a', 'c', 'd', 'b', 'e']\n */\nvar move = (0, _ramda.curry)(function (fromIdx, toIdx, list) {\n  return (0, _ramda.compose)((0, _ramda.insert)(toIdx, (0, _ramda.nth)(fromIdx, list)), (0, _ramda.remove)(fromIdx, 1))(list);\n});\nvar _default = move;\nexports[\"default\"] = _default;"]}