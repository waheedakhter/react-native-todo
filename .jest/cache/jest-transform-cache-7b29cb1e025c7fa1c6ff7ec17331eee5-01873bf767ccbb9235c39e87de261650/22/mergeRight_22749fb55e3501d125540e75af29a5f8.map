{"version":3,"sources":["mergeRight.js"],"names":["exports","__esModule","_ramda","require","mergeRight","flip","merge","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAwBA,IAAIC,UAAU,GAAG,CAAC,GAAGF,MAAM,CAACG,IAAX,EAAiBH,MAAM,CAACI,KAAxB,CAAjB;AACA,IAAIC,QAAQ,GAAGH,UAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBO,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Create a new object with the own properties of the second object merged with\n * the own properties of the first object. If a key exists in both objects,\n * the value from the first object will be used. *\n * Putting it simply: it sets properties only if they don't exist.\n *\n * @func mergeRight\n * @deprecated since v2.12.0; available in ramda@0.26.0 as R.mergeLeft\n * @aliases mergeLeft, resetToDefault\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.6.0|v1.6.0}\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} r Destination\n * @param {Object} l Source\n * @return {Object}\n * @see {@link http://ramdajs.com/docs/#merge|R.merge}, {@link https://github.com/ramda/ramda/wiki/Cookbook#set-properties-only-if-they-dont-exist|Ramda Cookbook}\n * @example\n *\n * RA.mergeRight({ 'age': 40 }, { 'name': 'fred', 'age': 10 });\n * //=> { 'name': 'fred', 'age': 40 }\n */\nvar mergeRight = (0, _ramda.flip)(_ramda.merge);\nvar _default = mergeRight;\nexports[\"default\"] = _default;"]}