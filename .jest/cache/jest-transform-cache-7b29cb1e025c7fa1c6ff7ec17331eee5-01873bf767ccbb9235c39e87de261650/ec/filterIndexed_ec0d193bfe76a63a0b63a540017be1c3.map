{"version":3,"sources":["filterIndexed.js"],"names":["exports","__esModule","_ramda","require","filterIndexed","addIndex","filter","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAyBA,IAAIC,aAAa,GAAG,CAAC,GAAGF,MAAM,CAACG,QAAX,EAAqBH,MAAM,CAACI,MAA5B,CAApB;AACA,IAAIC,QAAQ,GAAGH,aAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBO,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * {@link http://ramdajs.com/docs/#filter|R.filter} function that more closely resembles `Array.prototype.filter`.\n * It takes two new parameters to its callback function: the current index, and the entire list.\n *\n * `filterIndexed` implementation is simple: `\n *  const filterIndexed = R.addIndex(R.filter);\n * `\n *\n * @func filterIndexed\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.31.0|v2.31.0}\n * @category List\n * @typedef Idx = Number\n * @sig Filterable f => ((a, Idx, f a) -> Boolean) -> f a -> f a\n * @param {Function} pred The predicate function\n * @param {Array} list The collection to filter\n * @return {Array} Filterable\n * @see {@link http://ramdajs.com/docs/#addIndex|R.addIndex}, {@link http://ramdajs.com/docs/#filter|R.filter}\n * @example\n *\n * const isValueGtIndex = (val, idx) => val > idx;\n * RA.filterIndexed(isValueGtIndex, [5, 4, 3, 2, 1, 0]); //=> [5, 4, 3]\n */\nvar filterIndexed = (0, _ramda.addIndex)(_ramda.filter);\nvar _default = filterIndexed;\nexports[\"default\"] = _default;"]}