7a65a661af3411b0a16a4bd5389135fd
var _curry2 = require("./internal/_curry2");

var _isInteger = require("./internal/_isInteger");

var _isArray = require("./internal/_isArray");

var assoc = require("./assoc");

var dissoc = require("./dissoc");

var remove = require("./remove");

var update = require("./update");

var dissocPath = _curry2(function dissocPath(path, obj) {
  switch (path.length) {
    case 0:
      return obj;

    case 1:
      return _isInteger(path[0]) && _isArray(obj) ? remove(path[0], 1, obj) : dissoc(path[0], obj);

    default:
      var head = path[0];
      var tail = Array.prototype.slice.call(path, 1);

      if (obj[head] == null) {
        return obj;
      } else if (_isInteger(head) && _isArray(obj)) {
        return update(head, dissocPath(tail, obj[head]), obj);
      } else {
        return assoc(head, dissocPath(tail, obj[head]), obj);
      }

  }
});

module.exports = dissocPath;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpc3NvY1BhdGguanMiXSwibmFtZXMiOlsiX2N1cnJ5MiIsInJlcXVpcmUiLCJfaXNJbnRlZ2VyIiwiX2lzQXJyYXkiLCJhc3NvYyIsImRpc3NvYyIsInJlbW92ZSIsInVwZGF0ZSIsImRpc3NvY1BhdGgiLCJwYXRoIiwib2JqIiwibGVuZ3RoIiwiaGVhZCIsInRhaWwiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE9BQU8sR0FFWEMsT0FBTyxDQUFDLG9CQUFELENBRlA7O0FBSUEsSUFBSUMsVUFBVSxHQUVkRCxPQUFPLENBQUMsdUJBQUQsQ0FGUDs7QUFJQSxJQUFJRSxRQUFRLEdBRVpGLE9BQU8sQ0FBQyxxQkFBRCxDQUZQOztBQUlBLElBQUlHLEtBQUssR0FFVEgsT0FBTyxDQUFDLFNBQUQsQ0FGUDs7QUFJQSxJQUFJSSxNQUFNLEdBRVZKLE9BQU8sQ0FBQyxVQUFELENBRlA7O0FBSUEsSUFBSUssTUFBTSxHQUVWTCxPQUFPLENBQUMsVUFBRCxDQUZQOztBQUlBLElBQUlNLE1BQU0sR0FFVk4sT0FBTyxDQUFDLFVBQUQsQ0FGUDs7QUF3QkEsSUFBSU8sVUFBVSxHQUVkUixPQUFPLENBQUMsU0FBU1EsVUFBVCxDQUFvQkMsSUFBcEIsRUFBMEJDLEdBQTFCLEVBQStCO0FBQ3JDLFVBQVFELElBQUksQ0FBQ0UsTUFBYjtBQUNFLFNBQUssQ0FBTDtBQUNFLGFBQU9ELEdBQVA7O0FBRUYsU0FBSyxDQUFMO0FBQ0UsYUFBT1IsVUFBVSxDQUFDTyxJQUFJLENBQUMsQ0FBRCxDQUFMLENBQVYsSUFBdUJOLFFBQVEsQ0FBQ08sR0FBRCxDQUEvQixHQUF1Q0osTUFBTSxDQUFDRyxJQUFJLENBQUMsQ0FBRCxDQUFMLEVBQVUsQ0FBVixFQUFhQyxHQUFiLENBQTdDLEdBQWlFTCxNQUFNLENBQUNJLElBQUksQ0FBQyxDQUFELENBQUwsRUFBVUMsR0FBVixDQUE5RTs7QUFFRjtBQUNFLFVBQUlFLElBQUksR0FBR0gsSUFBSSxDQUFDLENBQUQsQ0FBZjtBQUNBLFVBQUlJLElBQUksR0FBR0MsS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkJSLElBQTNCLEVBQWlDLENBQWpDLENBQVg7O0FBRUEsVUFBSUMsR0FBRyxDQUFDRSxJQUFELENBQUgsSUFBYSxJQUFqQixFQUF1QjtBQUNyQixlQUFPRixHQUFQO0FBQ0QsT0FGRCxNQUVPLElBQUlSLFVBQVUsQ0FBQ1UsSUFBRCxDQUFWLElBQW9CVCxRQUFRLENBQUNPLEdBQUQsQ0FBaEMsRUFBdUM7QUFDNUMsZUFBT0gsTUFBTSxDQUFDSyxJQUFELEVBQU9KLFVBQVUsQ0FBQ0ssSUFBRCxFQUFPSCxHQUFHLENBQUNFLElBQUQsQ0FBVixDQUFqQixFQUFvQ0YsR0FBcEMsQ0FBYjtBQUNELE9BRk0sTUFFQTtBQUNMLGVBQU9OLEtBQUssQ0FBQ1EsSUFBRCxFQUFPSixVQUFVLENBQUNLLElBQUQsRUFBT0gsR0FBRyxDQUFDRSxJQUFELENBQVYsQ0FBakIsRUFBb0NGLEdBQXBDLENBQVo7QUFDRDs7QUFqQkw7QUFvQkQsQ0FyQk0sQ0FGUDs7QUF5QkFRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlgsVUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MiA9XG4vKiNfX1BVUkVfXyovXG5yZXF1aXJlKFwiLi9pbnRlcm5hbC9fY3VycnkyXCIpO1xuXG52YXIgX2lzSW50ZWdlciA9XG4vKiNfX1BVUkVfXyovXG5yZXF1aXJlKFwiLi9pbnRlcm5hbC9faXNJbnRlZ2VyXCIpO1xuXG52YXIgX2lzQXJyYXkgPVxuLyojX19QVVJFX18qL1xucmVxdWlyZShcIi4vaW50ZXJuYWwvX2lzQXJyYXlcIik7XG5cbnZhciBhc3NvYyA9XG4vKiNfX1BVUkVfXyovXG5yZXF1aXJlKFwiLi9hc3NvY1wiKTtcblxudmFyIGRpc3NvYyA9XG4vKiNfX1BVUkVfXyovXG5yZXF1aXJlKFwiLi9kaXNzb2NcIik7XG5cbnZhciByZW1vdmUgPVxuLyojX19QVVJFX18qL1xucmVxdWlyZShcIi4vcmVtb3ZlXCIpO1xuXG52YXIgdXBkYXRlID1cbi8qI19fUFVSRV9fKi9cbnJlcXVpcmUoXCIuL3VwZGF0ZVwiKTtcbi8qKlxuICogTWFrZXMgYSBzaGFsbG93IGNsb25lIG9mIGFuIG9iamVjdCwgb21pdHRpbmcgdGhlIHByb3BlcnR5IGF0IHRoZSBnaXZlbiBwYXRoLlxuICogTm90ZSB0aGF0IHRoaXMgY29waWVzIGFuZCBmbGF0dGVucyBwcm90b3R5cGUgcHJvcGVydGllcyBvbnRvIHRoZSBuZXcgb2JqZWN0XG4gKiBhcyB3ZWxsLiBBbGwgbm9uLXByaW1pdGl2ZSBwcm9wZXJ0aWVzIGFyZSBjb3BpZWQgYnkgcmVmZXJlbmNlLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjExLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEB0eXBlZGVmbiBJZHggPSBTdHJpbmcgfCBJbnRcbiAqIEBzaWcgW0lkeF0gLT4ge2s6IHZ9IC0+IHtrOiB2fVxuICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byB0aGUgdmFsdWUgdG8gb21pdFxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIGNsb25lXG4gKiBAcmV0dXJuIHtPYmplY3R9IEEgbmV3IG9iamVjdCB3aXRob3V0IHRoZSBwcm9wZXJ0eSBhdCBwYXRoXG4gKiBAc2VlIFIuYXNzb2NQYXRoXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi5kaXNzb2NQYXRoKFsnYScsICdiJywgJ2MnXSwge2E6IHtiOiB7YzogNDJ9fX0pOyAvLz0+IHthOiB7Yjoge319fVxuICovXG5cblxudmFyIGRpc3NvY1BhdGggPVxuLyojX19QVVJFX18qL1xuX2N1cnJ5MihmdW5jdGlvbiBkaXNzb2NQYXRoKHBhdGgsIG9iaikge1xuICBzd2l0Y2ggKHBhdGgubGVuZ3RoKSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuIG9iajtcblxuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBfaXNJbnRlZ2VyKHBhdGhbMF0pICYmIF9pc0FycmF5KG9iaikgPyByZW1vdmUocGF0aFswXSwgMSwgb2JqKSA6IGRpc3NvYyhwYXRoWzBdLCBvYmopO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHZhciBoZWFkID0gcGF0aFswXTtcbiAgICAgIHZhciB0YWlsID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwocGF0aCwgMSk7XG5cbiAgICAgIGlmIChvYmpbaGVhZF0gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgfSBlbHNlIGlmIChfaXNJbnRlZ2VyKGhlYWQpICYmIF9pc0FycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZShoZWFkLCBkaXNzb2NQYXRoKHRhaWwsIG9ialtoZWFkXSksIG9iaik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYXNzb2MoaGVhZCwgZGlzc29jUGF0aCh0YWlsLCBvYmpbaGVhZF0pLCBvYmopO1xuICAgICAgfVxuXG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRpc3NvY1BhdGg7Il19