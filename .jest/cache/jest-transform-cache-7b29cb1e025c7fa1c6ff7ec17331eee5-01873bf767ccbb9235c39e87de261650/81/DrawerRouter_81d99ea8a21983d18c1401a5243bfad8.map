{"version":3,"sources":["DrawerRouter.tsx"],"names":["DrawerActions","TabActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","it","history","rest","router","getInitialState","routeGetIdList","routeNames","routeParamList","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport type {\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  ParamListBase,\n} from './types';\nimport TabRouter, {\n  TabActions,\n  TabActionType,\n  TabRouterOptions,\n  TabNavigationState,\n  TabActionHelpers,\n} from './TabRouter';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  openByDefault?: boolean;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: ({ type: 'route'; key: string } | { type: 'drawer' })[];\n};\n\nexport type DrawerActionHelpers<\n  ParamList extends ParamListBase\n> = TabActionHelpers<ParamList> & {\n  /**\n   * Open the drawer sidebar.\n   */\n  openDrawer(): void;\n\n  /**\n   * Close the drawer sidebar.\n   */\n  closeDrawer(): void;\n\n  /**\n   * Open the drawer sidebar if closed, or close if opened.\n   */\n  toggleDrawer(): void;\n};\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state:\n    | DrawerNavigationState<ParamListBase>\n    | PartialState<DrawerNavigationState<ParamListBase>>\n) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\nconst openDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer' }],\n  };\n};\n\nconst closeDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter((it) => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter({\n  openByDefault,\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = (TabRouter(rest) as unknown) as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      let state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (partialState.history ? isDrawerOpen(partialState) : openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]}