{"version":3,"sources":["thenP.js"],"names":["exports","__esModule","_ramda","require","thenP","invoker","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AA0BA,IAAIC,KAAK,GAAG,CAAC,GAAGF,MAAM,CAACG,OAAX,EAAoB,CAApB,EAAuB,MAAvB,CAAZ;AACA,IAAIC,QAAQ,GAAGF,KAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBM,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Composable shortcut for `Promise.then`.\n * The thenP function returns a Promise. It takes two arguments: a callback function for the success of the Promise\n * and the promise instance itself.\n *\n * @func thenP\n * @memberOf RA\n * @aliases then\n * @since {@link https://char0n.github.io/ramda-adjunct/2.8.0|v2.8.0}\n * @deprecated since v2.12.0; available in ramda@0.26.0 as R.then\n * @category Function\n * @sig (a -> Promise b | b) -> Promise b\n * @param {Function} onFulfilled A Function called if the Promise is fulfilled. This function has one argument, the fulfillment value\n * @param {Promise} promise Any Promise or Thenable object\n * @return {Promise} A Promise in the pending status\n\n * @see {@link RA.resolveP|resolveP}, {@link RA.rejectP|rejectP}, {@link RA.allP|allP}\n * @example\n *\n * const promise = Promise.resolve(1);\n * const add1 = v => v + 1;\n *\n * RA.thenP(add1, promise); // => Promise(2)\n */\nvar thenP = (0, _ramda.invoker)(1, 'then');\nvar _default = thenP;\nexports[\"default\"] = _default;"]}