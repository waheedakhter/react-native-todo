{"version":3,"sources":["thenCatchP.js"],"names":["exports","__esModule","thenCatchP","_ramda","require","invoker","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,UAAR,GAAqBF,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA/C;;AAEA,IAAIG,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAwBA,IAAIF,UAAU,GAAG,CAAC,GAAGC,MAAM,CAACE,OAAX,EAAoB,CAApB,EAAuB,MAAvB,CAAjB;AACAL,OAAO,CAACE,UAAR,GAAqBA,UAArB;AACA,IAAII,QAAQ,GAAGJ,UAAf;AACAF,OAAO,CAAC,SAAD,CAAP,GAAqBM,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.thenCatchP = exports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Composable shortcut for `Promise.then` that allows for success and failure callbacks.\n * The thenCatchP function returns a Promise. It takes three arguments: a callback function for the success of the Promise,\n * a callback function for the failure of the Promise, and the promise instance itself.\n *\n * @func thenCatchP\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.27.0|v2.27.0}\n * @category Function\n * @sig (a -> b) -> (c -> d) -> Promise a -> Promise b | d\n * @param {Function} onFulfilled A Function called if the Promise is fulfilled. This function has one argument, the fulfillment value\n * @param {Function} onRejected A Function called if the Promise is rejected. This function has one argument, the error\n * @param {Promise} promise Any Promise or Thenable object\n * @return {Promise}\n * @see {@link RA.resolveP|resolveP}, {@link RA.rejectP|rejectP}, {@link RA.allP|allP}\n * @example\n *\n * const promise = Promise.resolve(1);\n * const add1 = x => x + 1;\n *\n * RA.thenCatchP(add1, console.error, promise); // => Promise(2)\n */\nvar thenCatchP = (0, _ramda.invoker)(2, 'then');\nexports.thenCatchP = thenCatchP;\nvar _default = thenCatchP;\nexports[\"default\"] = _default;"]}