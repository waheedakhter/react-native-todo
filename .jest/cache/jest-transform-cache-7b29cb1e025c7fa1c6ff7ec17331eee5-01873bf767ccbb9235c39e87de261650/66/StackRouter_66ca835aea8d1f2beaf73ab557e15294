a48bb64c97b7ca58de6ae0b0e96a9dce
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = StackRouter;
exports.StackActions = void 0;

var _nonSecure = require("nanoid/non-secure");

var _BaseRouter = _interopRequireDefault(require("./BaseRouter"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var StackActions = {
  replace: function replace(name, params) {
    return {
      type: 'REPLACE',
      payload: {
        name: name,
        params: params
      }
    };
  },
  push: function push(name, params) {
    return {
      type: 'PUSH',
      payload: {
        name: name,
        params: params
      }
    };
  },
  pop: function pop() {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    return {
      type: 'POP',
      payload: {
        count: count
      }
    };
  },
  popToTop: function popToTop() {
    return {
      type: 'POP_TO_TOP'
    };
  }
};
exports.StackActions = StackActions;

function StackRouter(options) {
  var router = (0, _extends2.default)({}, _BaseRouter.default, {
    type: 'stack',
    getInitialState: function getInitialState(_ref) {
      var routeNames = _ref.routeNames,
          routeParamList = _ref.routeParamList;
      var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];
      return {
        stale: false,
        type: 'stack',
        key: "stack-".concat((0, _nonSecure.nanoid)()),
        index: 0,
        routeNames: routeNames,
        routes: [{
          key: "".concat(initialRouteName, "-").concat((0, _nonSecure.nanoid)()),
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        }]
      };
    },
    getRehydratedState: function getRehydratedState(partialState, _ref2) {
      var routeNames = _ref2.routeNames,
          routeParamList = _ref2.routeParamList;
      var state = partialState;

      if (state.stale === false) {
        return state;
      }

      var routes = state.routes.filter(function (route) {
        return routeNames.includes(route.name);
      }).map(function (route) {
        return (0, _extends2.default)({}, route, {
          key: route.key || "".concat(route.name, "-").concat((0, _nonSecure.nanoid)()),
          params: routeParamList[route.name] !== undefined ? (0, _extends2.default)({}, routeParamList[route.name], route.params) : route.params
        });
      });

      if (routes.length === 0) {
        var initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];
        routes.push({
          key: "".concat(initialRouteName, "-").concat((0, _nonSecure.nanoid)()),
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        });
      }

      return {
        stale: false,
        type: 'stack',
        key: "stack-".concat((0, _nonSecure.nanoid)()),
        index: routes.length - 1,
        routeNames: routeNames,
        routes: routes
      };
    },
    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref3) {
      var routeNames = _ref3.routeNames,
          routeParamList = _ref3.routeParamList;
      var routes = state.routes.filter(function (route) {
        return routeNames.includes(route.name);
      });

      if (routes.length === 0) {
        var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];
        routes.push({
          key: "".concat(initialRouteName, "-").concat((0, _nonSecure.nanoid)()),
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        });
      }

      return (0, _extends2.default)({}, state, {
        routeNames: routeNames,
        routes: routes,
        index: Math.min(state.index, routes.length - 1)
      });
    },
    getStateForRouteFocus: function getStateForRouteFocus(state, key) {
      var index = state.routes.findIndex(function (r) {
        return r.key === key;
      });

      if (index === -1 || index === state.index) {
        return state;
      }

      return (0, _extends2.default)({}, state, {
        index: index,
        routes: state.routes.slice(0, index + 1)
      });
    },
    getStateForAction: function getStateForAction(state, action, options) {
      var routeParamList = options.routeParamList;

      switch (action.type) {
        case 'REPLACE':
          {
            var index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {
              return r.key === action.source;
            }) : state.index;

            if (index === -1) {
              return null;
            }

            var _action$payload = action.payload,
                name = _action$payload.name,
                key = _action$payload.key,
                params = _action$payload.params;

            if (!state.routeNames.includes(name)) {
              return null;
            }

            return (0, _extends2.default)({}, state, {
              routes: state.routes.map(function (route, i) {
                return i === index ? {
                  key: key !== undefined ? key : "".concat(name, "-").concat((0, _nonSecure.nanoid)()),
                  name: name,
                  params: routeParamList[name] !== undefined ? (0, _extends2.default)({}, routeParamList[name], params) : params
                } : route;
              })
            });
          }

        case 'PUSH':
          if (state.routeNames.includes(action.payload.name)) {
            var getId = options.routeGetIdList[action.payload.name];
            var id = getId === null || getId === void 0 ? void 0 : getId({
              params: action.payload.params
            });
            var route = action.payload.name && action.payload.key ? state.routes.find(function (route) {
              return route.name === action.payload.name && route.key === action.payload.key;
            }) : id ? state.routes.find(function (route) {
              return route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({
                params: route.params
              }));
            }) : undefined;
            var routes;

            if (route) {
              routes = state.routes.filter(function (r) {
                return r.key !== route.key;
              });
              routes.push((0, _extends2.default)({}, route, {
                params: action.payload.params !== undefined ? (0, _extends2.default)({}, route.params, action.payload.params) : route.params
              }));
            } else {
              var _action$payload$key;

              routes = [].concat((0, _toConsumableArray2.default)(state.routes), [{
                key: (_action$payload$key = action.payload.key) !== null && _action$payload$key !== void 0 ? _action$payload$key : "".concat(action.payload.name, "-").concat((0, _nonSecure.nanoid)()),
                name: action.payload.name,
                params: routeParamList[action.payload.name] !== undefined ? (0, _extends2.default)({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params
              }]);
            }

            return (0, _extends2.default)({}, state, {
              index: routes.length - 1,
              routes: routes
            });
          }

          return null;

        case 'POP':
          {
            var _index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {
              return r.key === action.source;
            }) : state.index;

            if (_index > 0) {
              var count = Math.max(_index - action.payload.count + 1, 1);

              var _routes = state.routes.slice(0, count).concat(state.routes.slice(_index + 1));

              return (0, _extends2.default)({}, state, {
                index: _routes.length - 1,
                routes: _routes
              });
            }

            return null;
          }

        case 'POP_TO_TOP':
          return router.getStateForAction(state, {
            type: 'POP',
            payload: {
              count: state.routes.length - 1
            }
          }, options);

        case 'NAVIGATE':
          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {
            return null;
          }

          if (action.payload.key || action.payload.name) {
            var _index2 = -1;

            var _getId = action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;

            var _id = _getId === null || _getId === void 0 ? void 0 : _getId({
              params: action.payload.params
            });

            if (_id) {
              _index2 = state.routes.findIndex(function (route) {
                return route.name === action.payload.name && _id === (_getId === null || _getId === void 0 ? void 0 : _getId({
                  params: route.params
                }));
              });
            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {
              _index2 = state.index;
            } else {
              for (var i = state.routes.length - 1; i >= 0; i--) {
                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {
                  _index2 = i;
                  break;
                }
              }
            }

            if (_index2 === -1 && action.payload.key && action.payload.name === undefined) {
              return null;
            }

            if (_index2 === -1 && action.payload.name !== undefined) {
              var _action$payload$key2;

              var _routes2 = [].concat((0, _toConsumableArray2.default)(state.routes), [{
                key: (_action$payload$key2 = action.payload.key) !== null && _action$payload$key2 !== void 0 ? _action$payload$key2 : "".concat(action.payload.name, "-").concat((0, _nonSecure.nanoid)()),
                name: action.payload.name,
                params: routeParamList[action.payload.name] !== undefined ? (0, _extends2.default)({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params
              }]);

              return (0, _extends2.default)({}, state, {
                routes: _routes2,
                index: _routes2.length - 1
              });
            }

            var _route = state.routes[_index2];

            var _params;

            if (action.payload.merge === false) {
              _params = routeParamList[_route.name] !== undefined ? (0, _extends2.default)({}, routeParamList[_route.name], action.payload.params) : action.payload.params;
            } else {
              _params = action.payload.params ? (0, _extends2.default)({}, _route.params, action.payload.params) : _route.params;
            }

            return (0, _extends2.default)({}, state, {
              index: _index2,
              routes: [].concat((0, _toConsumableArray2.default)(state.routes.slice(0, _index2)), [_params !== _route.params ? (0, _extends2.default)({}, _route, {
                params: _params
              }) : state.routes[_index2]])
            });
          }

          return null;

        case 'GO_BACK':
          if (state.index > 0) {
            return router.getStateForAction(state, {
              type: 'POP',
              payload: {
                count: 1
              },
              target: action.target,
              source: action.source
            }, options);
          }

          return null;

        default:
          return _BaseRouter.default.getStateForAction(state, action);
      }
    },
    actionCreators: StackActions
  });
  return router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN0YWNrUm91dGVyLnRzeCJdLCJuYW1lcyI6WyJTdGFja0FjdGlvbnMiLCJyZXBsYWNlIiwidHlwZSIsInBheWxvYWQiLCJuYW1lIiwicGFyYW1zIiwicHVzaCIsInBvcCIsImNvdW50IiwicG9wVG9Ub3AiLCJyb3V0ZXIiLCJCYXNlUm91dGVyIiwiZ2V0SW5pdGlhbFN0YXRlIiwicm91dGVQYXJhbUxpc3QiLCJpbml0aWFsUm91dGVOYW1lIiwib3B0aW9ucyIsInJvdXRlTmFtZXMiLCJzdGFsZSIsImtleSIsImluZGV4Iiwicm91dGVzIiwiZ2V0UmVoeWRyYXRlZFN0YXRlIiwic3RhdGUiLCJyb3V0ZSIsImdldFN0YXRlRm9yUm91dGVOYW1lc0NoYW5nZSIsIk1hdGgiLCJnZXRTdGF0ZUZvclJvdXRlRm9jdXMiLCJyIiwiZ2V0U3RhdGVGb3JBY3Rpb24iLCJhY3Rpb24iLCJnZXRJZCIsImlkIiwiaSIsInRhcmdldCIsInNvdXJjZSIsImFjdGlvbkNyZWF0b3JzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsVUFBQSxHQUFBLE9BQUEsQ0FBQSxtQkFBQSxDQUFBOztBQUNBLElBQUEsV0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQSxDQUFBOzs7Ozs7OztBQWtGTyxJQUFNQSxZQUFZLEdBQUc7QUFDMUJDLEVBQUFBLE9BRDBCLG1CQUNuQixJQURtQixFQUNuQixNQURtQixFQUM4QjtBQUN0RCxXQUFPO0FBQUVDLE1BQUFBLElBQUksRUFBTixTQUFBO0FBQW1CQyxNQUFBQSxPQUFPLEVBQUU7QUFBRUMsUUFBQUEsSUFBRixFQUFFQSxJQUFGO0FBQVFDLFFBQUFBLE1BQUFBLEVBQUFBO0FBQVI7QUFBNUIsS0FBUDtBQUZ3QixHQUFBO0FBSTFCQyxFQUFBQSxJQUowQixnQkFJdEIsSUFKc0IsRUFJdEIsTUFKc0IsRUFJMkI7QUFDbkQsV0FBTztBQUFFSixNQUFBQSxJQUFJLEVBQU4sTUFBQTtBQUFnQkMsTUFBQUEs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QyxjQUFBQSxNQUFNLDZDQUNERSxLQUFLLENBQUxBLE1BQUFBLENBQUFBLEtBQUFBLENBQUFBLENBQUFBLEVBREcsT0FDSEEsQ0FEQyxJQUVKLE9BQU0sS0FBS0MsTUFBSyxDQUFoQixNQUFBLDhCQUNJLE1BREo7QUFDZ0JsQixnQkFBQUEsTUFBQUEsRUFBQUE7QUFEaEIsbUJBRUlpQixLQUFLLENBQUxBLE1BQUFBLENBSkUsT0FJRkEsQ0FKQTtBQUhSO0FBVUQ7O0FBRUQsaUJBQUEsSUFBQTs7QUFFRixhQUFBLFNBQUE7QUFDRSxjQUFJQSxLQUFLLENBQUxBLEtBQUFBLEdBQUosQ0FBQSxFQUFxQjtBQUNuQixtQkFBTyxNQUFNLENBQU4saUJBQUEsQ0FBQSxLQUFBLEVBRUw7QUFDRXBCLGNBQUFBLElBQUksRUFETixLQUFBO0FBRUVDLGNBQUFBLE9BQU8sRUFBRTtBQUFFSyxnQkFBQUEsS0FBSyxFQUFFO0FBQVQsZUFGWDtBQUdFeUIsY0FBQUEsTUFBTSxFQUFFSixNQUFNLENBSGhCLE1BQUE7QUFJRUssY0FBQUEsTUFBTSxFQUFFTCxNQUFNLENBQUNLO0FBSmpCLGFBRkssRUFBUCxPQUFPLENBQVA7QUFVRDs7QUFFRCxpQkFBQSxJQUFBOztBQUVGO0FBQ0UsaUJBQU92QixXQUFBQSxDQUFBQSxPQUFBQSxDQUFBQSxpQkFBQUEsQ0FBQUEsS0FBQUEsRUFBUCxNQUFPQSxDQUFQO0FBblFKO0FBdkhBLEtBQUg7QUE4WEN3QixJQUFBQSxjQUFjLEVBQUVuQztBQTlYakIsSUFIRDtBQW9ZQSxTQUFBLE1BQUE7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5hbm9pZCB9IGZyb20gJ25hbm9pZC9ub24tc2VjdXJlJztcbmltcG9ydCBCYXNlUm91dGVyIGZyb20gJy4vQmFzZVJvdXRlcic7XG5pbXBvcnQgdHlwZSB7XG4gIE5hdmlnYXRpb25TdGF0ZSxcbiAgQ29tbW9uTmF2aWdhdGlvbkFjdGlvbixcbiAgUm91dGVyLFxuICBEZWZhdWx0Um91dGVyT3B0aW9ucyxcbiAgUm91dGUsXG4gIFBhcmFtTGlzdEJhc2UsXG59IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBTdGFja0FjdGlvblR5cGUgPVxuICB8IHtcbiAgICAgIHR5cGU6ICdSRVBMQUNFJztcbiAgICAgIHBheWxvYWQ6IHsgbmFtZTogc3RyaW5nOyBrZXk/OiBzdHJpbmcgfCB1bmRlZmluZWQ7IHBhcmFtcz86IG9iamVjdCB9O1xuICAgICAgc291cmNlPzogc3RyaW5nO1xuICAgICAgdGFyZ2V0Pzogc3RyaW5nO1xuICAgIH1cbiAgfCB7XG4gICAgICB0eXBlOiAnUFVTSCc7XG4gICAgICBwYXlsb2FkOiB7IG5hbWU6IHN0cmluZzsga2V5Pzogc3RyaW5nIHwgdW5kZWZpbmVkOyBwYXJhbXM/OiBvYmplY3QgfTtcbiAgICAgIHNvdXJjZT86IHN0cmluZztcbiAgICAgIHRhcmdldD86IHN0cmluZztcbiAgICB9XG4gIHwge1xuICAgICAgdHlwZTogJ1BPUCc7XG4gICAgICBwYXlsb2FkOiB7IGNvdW50OiBudW1iZXIgfTtcbiAgICAgIHNvdXJjZT86IHN0cmluZztcbiAgICAgIHRhcmdldD86IHN0cmluZztcbiAgICB9XG4gIHwge1xuICAgICAgdHlwZTogJ1BPUF9UT19UT1AnO1xuICAgICAgc291cmNlPzogc3RyaW5nO1xuICAgICAgdGFyZ2V0Pzogc3RyaW5nO1xuICAgIH07XG5cbmV4cG9ydCB0eXBlIFN0YWNrUm91dGVyT3B0aW9ucyA9IERlZmF1bHRSb3V0ZXJPcHRpb25zO1xuXG5leHBvcnQgdHlwZSBTdGFja05hdmlnYXRpb25TdGF0ZTxcbiAgUGFyYW1MaXN0IGV4dGVuZHMgUGFyYW1MaXN0QmFzZVxuPiA9IE5hdmlnYXRpb25TdGF0ZTxQYXJhbUxpc3Q+ICYge1xuICAvKipcbiAgICogVHlwZSBvZiB0aGUgcm91dGVyLCBpbiB0aGlzIGNhc2UsIGl0J3Mgc3RhY2suXG4gICAqL1xuICB0eXBlOiAnc3RhY2snO1xufTtcblxuZXhwb3J0IHR5cGUgU3RhY2tBY3Rpb25IZWxwZXJzPFBhcmFtTGlzdCBleHRlbmRzIFBhcmFtTGlzdEJhc2U+ID0ge1xuICAvKipcbiAgICogUmVwbGFjZSB0aGUgY3VycmVudCByb3V0ZSB3aXRoIGEgbmV3IG9uZS5cbiAgICpcbiAgICogQHBhcmFtIG5hbWUgUm91dGUgbmFtZSBvZiB0aGUgbmV3IHJvdXRlLlxuICAgKiBAcGFyYW0gW3BhcmFtc10gUGFyYW1zIG9iamVjdCBmb3IgdGhlIG5ldyByb3V0ZS5cbiAgICovXG4gIHJlcGxhY2U8Um91dGVOYW1lIGV4dGVuZHMga2V5b2YgUGFyYW1MaXN0PihcbiAgICAuLi5hcmdzOiB1bmRlZmluZWQgZXh0ZW5kcyBQYXJhbUxpc3RbUm91dGVOYW1lXVxuICAgICAgPyBbUm91dGVOYW1lXSB8IFtSb3V0ZU5hbWUsIFBhcmFtTGlzdFtSb3V0ZU5hbWVdXVxuICAgICAgOiBbUm91dGVOYW1lLCBQYXJhbUxpc3RbUm91dGVOYW1lXV1cbiAgKTogdm9pZDtcblxuICAvKipcbiAgICogUHVzaCBhIG5ldyBzY3JlZW4gb250byB0aGUgc3RhY2suXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIHJvdXRlIGZvciB0aGUgdGFiLlxuICAgKiBAcGFyYW0gW3BhcmFtc10gUGFyYW1zIG9iamVjdCBmb3IgdGhlIHJvdXRlLlxuICAgKi9cbiAgcHVzaDxSb3V0ZU5hbWUgZXh0ZW5kcyBrZXlvZiBQYXJhbUxpc3Q+KFxuICAgIC4uLmFyZ3M6IHVuZGVmaW5lZCBleHRlbmRzIFBhcmFtTGlzdFtSb3V0ZU5hbWVdXG4gICAgICA/IFtSb3V0ZU5hbWVdIHwgW1JvdXRlTmFtZSwgUGFyYW1MaXN0W1JvdXRlTmFtZV1dXG4gICAgICA6IFtSb3V0ZU5hbWUsIFBhcmFtTGlzdFtSb3V0ZU5hbWVdXVxuICApOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBQb3AgYSBzY3JlZW4gZnJvbSB0aGUgc3RhY2suXG4gICAqL1xuICBwb3AoY291bnQ/OiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBQb3AgdG8gdGhlIGZpcnN0IHJvdXRlIGluIHRoZSBzdGFjaywgZGlzbWlzc2luZyBhbGwgb3RoZXIgc2NyZWVucy5cbiAgICovXG4gIHBvcFRvVG9wKCk6IHZvaWQ7XG59O1xuXG5leHBvcnQgY29uc3QgU3RhY2tBY3Rpb25zID0ge1xuICByZXBsYWNlKG5hbWU6IHN0cmluZywgcGFyYW1zPzogb2JqZWN0KTogU3RhY2tBY3Rpb25UeXBlIHtcbiAgICByZXR1cm4geyB0eXBlOiAnUkVQTEFDRScsIHBheWxvYWQ6IHsgbmFtZSwgcGFyYW1zIH0gfTtcbiAgfSxcbiAgcHVzaChuYW1lOiBzdHJpbmcsIHBhcmFtcz86IG9iamVjdCk6IFN0YWNrQWN0aW9uVHlwZSB7XG4gICAgcmV0dXJuIHsgdHlwZTogJ1BVU0gnLCBwYXlsb2FkOiB7IG5hbWUsIHBhcmFtcyB9IH07XG4gIH0sXG4gIHBvcChjb3VudDogbnVtYmVyID0gMSk6IFN0YWNrQWN0aW9uVHlwZSB7XG4gICAgcmV0dXJuIHsgdHlwZTogJ1BPUCcsIHBheWxvYWQ6IHsgY291bnQgfSB9O1xuICB9LFxuICBwb3BUb1RvcCgpOiBTdGFja0FjdGlvblR5cGUge1xuICAgIHJldHVybiB7IHR5cGU6ICdQT1BfVE9fVE9QJyB9O1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU3RhY2tSb3V0ZXIob3B0aW9uczogU3RhY2tSb3V0ZXJPcHRpb25zKSB7XG4gIGNvbnN0IHJvdXRlcjogUm91dGVyPFxuICAgIFN0YWNrTmF2aWdhdGlvblN0YXRlPFBhcmFtTGlzdEJhc2U+LFxuICAgIENvbW1vbk5hdmlnYXRpb25BY3Rpb24gfCBTdGFja0FjdGlvblR5cGVcbiAgPiA9IHtcbiAgICAuLi5CYXNlUm91dGVyLFxuXG4gICAgdHlwZTogJ3N0YWNrJyxcblxuICAgIGdldEluaXRpYWxTdGF0ZSh7IHJvdXRlTmFtZXMsIHJvdXRlUGFyYW1MaXN0IH0pIHtcbiAgICAgIGNvbnN0IGluaXRpYWxSb3V0ZU5hbWUgPVxuICAgICAgICBvcHRpb25zLmluaXRpYWxSb3V0ZU5hbWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICByb3V0ZU5hbWVzLmluY2x1ZGVzKG9wdGlvbnMuaW5pdGlhbFJvdXRlTmFtZSlcbiAgICAgICAgICA/IG9wdGlvbnMuaW5pdGlhbFJvdXRlTmFtZVxuICAgICAgICAgIDogcm91dGVOYW1lc1swXTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhbGU6IGZhbHNlLFxuICAgICAgICB0eXBlOiAnc3RhY2snLFxuICAgICAgICBrZXk6IGBzdGFjay0ke25hbm9pZCgpfWAsXG4gICAgICAgIGluZGV4OiAwLFxuICAgICAgICByb3V0ZU5hbWVzLFxuICAgICAgICByb3V0ZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IGAke2luaXRpYWxSb3V0ZU5hbWV9LSR7bmFub2lkKCl9YCxcbiAgICAgICAgICAgIG5hbWU6IGluaXRpYWxSb3V0ZU5hbWUsXG4gICAgICAgICAgICBwYXJhbXM6IHJvdXRlUGFyYW1MaXN0W2luaXRpYWxSb3V0ZU5hbWVdLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBnZXRSZWh5ZHJhdGVkU3RhdGUocGFydGlhbFN0YXRlLCB7IHJvdXRlTmFtZXMsIHJvdXRlUGFyYW1MaXN0IH0pIHtcbiAgICAgIGxldCBzdGF0ZSA9IHBhcnRpYWxTdGF0ZTtcblxuICAgICAgaWYgKHN0YXRlLnN0YWxlID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJvdXRlcyA9IHN0YXRlLnJvdXRlc1xuICAgICAgICAuZmlsdGVyKChyb3V0ZSkgPT4gcm91dGVOYW1lcy5pbmNsdWRlcyhyb3V0ZS5uYW1lKSlcbiAgICAgICAgLm1hcChcbiAgICAgICAgICAocm91dGUpID0+XG4gICAgICAgICAgICAoe1xuICAgICAgICAgICAgICAuLi5yb3V0ZSxcbiAgICAgICAgICAgICAga2V5OiByb3V0ZS5rZXkgfHwgYCR7cm91dGUubmFtZX0tJHtuYW5vaWQoKX1gLFxuICAgICAgICAgICAgICBwYXJhbXM6XG4gICAgICAgICAgICAgICAgcm91dGVQYXJhbUxpc3Rbcm91dGUubmFtZV0gIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgLi4ucm91dGVQYXJhbUxpc3Rbcm91dGUubmFtZV0sXG4gICAgICAgICAgICAgICAgICAgICAgLi4ucm91dGUucGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICA6IHJvdXRlLnBhcmFtcyxcbiAgICAgICAgICAgIH0gYXMgUm91dGU8c3RyaW5nPilcbiAgICAgICAgKTtcblxuICAgICAgaWYgKHJvdXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc3QgaW5pdGlhbFJvdXRlTmFtZSA9XG4gICAgICAgICAgb3B0aW9ucy5pbml0aWFsUm91dGVOYW1lICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gb3B0aW9ucy5pbml0aWFsUm91dGVOYW1lXG4gICAgICAgICAgICA6IHJvdXRlTmFtZXNbMF07XG5cbiAgICAgICAgcm91dGVzLnB1c2goe1xuICAgICAgICAgIGtleTogYCR7aW5pdGlhbFJvdXRlTmFtZX0tJHtuYW5vaWQoKX1gLFxuICAgICAgICAgIG5hbWU6IGluaXRpYWxSb3V0ZU5hbWUsXG4gICAgICAgICAgcGFyYW1zOiByb3V0ZVBhcmFtTGlzdFtpbml0aWFsUm91dGVOYW1lXSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YWxlOiBmYWxzZSxcbiAgICAgICAgdHlwZTogJ3N0YWNrJyxcbiAgICAgICAga2V5OiBgc3RhY2stJHtuYW5vaWQoKX1gLFxuICAgICAgICBpbmRleDogcm91dGVzLmxlbmd0aCAtIDEsXG4gICAgICAgIHJvdXRlTmFtZXMsXG4gICAgICAgIHJvdXRlcyxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIGdldFN0YXRlRm9yUm91dGVOYW1lc0NoYW5nZShzdGF0ZSwgeyByb3V0ZU5hbWVzLCByb3V0ZVBhcmFtTGlzdCB9KSB7XG4gICAgICBjb25zdCByb3V0ZXMgPSBzdGF0ZS5yb3V0ZXMuZmlsdGVyKChyb3V0ZSkgPT5cbiAgICAgICAgcm91dGVOYW1lcy5pbmNsdWRlcyhyb3V0ZS5uYW1lKVxuICAgICAgKTtcblxuICAgICAgaWYgKHJvdXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc3QgaW5pdGlhbFJvdXRlTmFtZSA9XG4gICAgICAgICAgb3B0aW9ucy5pbml0aWFsUm91dGVOYW1lICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICByb3V0ZU5hbWVzLmluY2x1ZGVzKG9wdGlvbnMuaW5pdGlhbFJvdXRlTmFtZSlcbiAgICAgICAgICAgID8gb3B0aW9ucy5pbml0aWFsUm91dGVOYW1lXG4gICAgICAgICAgICA6IHJvdXRlTmFtZXNbMF07XG5cbiAgICAgICAgcm91dGVzLnB1c2goe1xuICAgICAgICAgIGtleTogYCR7aW5pdGlhbFJvdXRlTmFtZX0tJHtuYW5vaWQoKX1gLFxuICAgICAgICAgIG5hbWU6IGluaXRpYWxSb3V0ZU5hbWUsXG4gICAgICAgICAgcGFyYW1zOiByb3V0ZVBhcmFtTGlzdFtpbml0aWFsUm91dGVOYW1lXSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICByb3V0ZU5hbWVzLFxuICAgICAgICByb3V0ZXMsXG4gICAgICAgIGluZGV4OiBNYXRoLm1pbihzdGF0ZS5pbmRleCwgcm91dGVzLmxlbmd0aCAtIDEpLFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgZ2V0U3RhdGVGb3JSb3V0ZUZvY3VzKHN0YXRlLCBrZXkpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gc3RhdGUucm91dGVzLmZpbmRJbmRleCgocikgPT4gci5rZXkgPT09IGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA9PT0gLTEgfHwgaW5kZXggPT09IHN0YXRlLmluZGV4KSB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGluZGV4LFxuICAgICAgICByb3V0ZXM6IHN0YXRlLnJvdXRlcy5zbGljZSgwLCBpbmRleCArIDEpLFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgZ2V0U3RhdGVGb3JBY3Rpb24oc3RhdGUsIGFjdGlvbiwgb3B0aW9ucykge1xuICAgICAgY29uc3QgeyByb3V0ZVBhcmFtTGlzdCB9ID0gb3B0aW9ucztcblxuICAgICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdSRVBMQUNFJzoge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID1cbiAgICAgICAgICAgIGFjdGlvbi50YXJnZXQgPT09IHN0YXRlLmtleSAmJiBhY3Rpb24uc291cmNlXG4gICAgICAgICAgICAgID8gc3RhdGUucm91dGVzLmZpbmRJbmRleCgocikgPT4gci5rZXkgPT09IGFjdGlvbi5zb3VyY2UpXG4gICAgICAgICAgICAgIDogc3RhdGUuaW5kZXg7XG5cbiAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCB7IG5hbWUsIGtleSwgcGFyYW1zIH0gPSBhY3Rpb24ucGF5bG9hZDtcblxuICAgICAgICAgIGlmICghc3RhdGUucm91dGVOYW1lcy5pbmNsdWRlcyhuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgcm91dGVzOiBzdGF0ZS5yb3V0ZXMubWFwKChyb3V0ZSwgaSkgPT5cbiAgICAgICAgICAgICAgaSA9PT0gaW5kZXhcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiBrZXkgIT09IHVuZGVmaW5lZCA/IGtleSA6IGAke25hbWV9LSR7bmFub2lkKCl9YCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOlxuICAgICAgICAgICAgICAgICAgICAgIHJvdXRlUGFyYW1MaXN0W25hbWVdICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnJvdXRlUGFyYW1MaXN0W25hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiByb3V0ZVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAnUFVTSCc6XG4gICAgICAgICAgaWYgKHN0YXRlLnJvdXRlTmFtZXMuaW5jbHVkZXMoYWN0aW9uLnBheWxvYWQubmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGdldElkID0gb3B0aW9ucy5yb3V0ZUdldElkTGlzdFthY3Rpb24ucGF5bG9hZC5uYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gZ2V0SWQ/Lih7IHBhcmFtczogYWN0aW9uLnBheWxvYWQucGFyYW1zIH0pO1xuXG4gICAgICAgICAgICBjb25zdCByb3V0ZSA9XG4gICAgICAgICAgICAgIGFjdGlvbi5wYXlsb2FkLm5hbWUgJiYgYWN0aW9uLnBheWxvYWQua2V5XG4gICAgICAgICAgICAgICAgPyBzdGF0ZS5yb3V0ZXMuZmluZChcbiAgICAgICAgICAgICAgICAgICAgKHJvdXRlKSA9PlxuICAgICAgICAgICAgICAgICAgICAgIHJvdXRlLm5hbWUgPT09IGFjdGlvbi5wYXlsb2FkLm5hbWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZS5rZXkgPT09IGFjdGlvbi5wYXlsb2FkLmtleVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIDogaWRcbiAgICAgICAgICAgICAgICA/IHN0YXRlLnJvdXRlcy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAocm91dGUpID0+XG4gICAgICAgICAgICAgICAgICAgICAgcm91dGUubmFtZSA9PT0gYWN0aW9uLnBheWxvYWQubmFtZSAmJlxuICAgICAgICAgICAgICAgICAgICAgIGlkID09PSBnZXRJZD8uKHsgcGFyYW1zOiByb3V0ZS5wYXJhbXMgfSlcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgbGV0IHJvdXRlczogUm91dGU8c3RyaW5nPltdO1xuXG4gICAgICAgICAgICBpZiAocm91dGUpIHtcbiAgICAgICAgICAgICAgcm91dGVzID0gc3RhdGUucm91dGVzLmZpbHRlcigocikgPT4gci5rZXkgIT09IHJvdXRlLmtleSk7XG4gICAgICAgICAgICAgIHJvdXRlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAuLi5yb3V0ZSxcbiAgICAgICAgICAgICAgICBwYXJhbXM6XG4gICAgICAgICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5wYXJhbXMgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnJvdXRlLnBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmFjdGlvbi5wYXlsb2FkLnBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDogcm91dGUucGFyYW1zLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJvdXRlcyA9IFtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZS5yb3V0ZXMsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAga2V5OlxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5rZXkgPz8gYCR7YWN0aW9uLnBheWxvYWQubmFtZX0tJHtuYW5vaWQoKX1gLFxuICAgICAgICAgICAgICAgICAgbmFtZTogYWN0aW9uLnBheWxvYWQubmFtZSxcbiAgICAgICAgICAgICAgICAgIHBhcmFtczpcbiAgICAgICAgICAgICAgICAgICAgcm91dGVQYXJhbUxpc3RbYWN0aW9uLnBheWxvYWQubmFtZV0gIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5yb3V0ZVBhcmFtTGlzdFthY3Rpb24ucGF5bG9hZC5uYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uYWN0aW9uLnBheWxvYWQucGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDogYWN0aW9uLnBheWxvYWQucGFyYW1zLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICBpbmRleDogcm91dGVzLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICAgIHJvdXRlcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgY2FzZSAnUE9QJzoge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID1cbiAgICAgICAgICAgIGFjdGlvbi50YXJnZXQgPT09IHN0YXRlLmtleSAmJiBhY3Rpb24uc291cmNlXG4gICAgICAgICAgICAgID8gc3RhdGUucm91dGVzLmZpbmRJbmRleCgocikgPT4gci5rZXkgPT09IGFjdGlvbi5zb3VyY2UpXG4gICAgICAgICAgICAgIDogc3RhdGUuaW5kZXg7XG5cbiAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IE1hdGgubWF4KGluZGV4IC0gYWN0aW9uLnBheWxvYWQuY291bnQgKyAxLCAxKTtcbiAgICAgICAgICAgIGNvbnN0IHJvdXRlcyA9IHN0YXRlLnJvdXRlc1xuICAgICAgICAgICAgICAuc2xpY2UoMCwgY291bnQpXG4gICAgICAgICAgICAgIC5jb25jYXQoc3RhdGUucm91dGVzLnNsaWNlKGluZGV4ICsgMSkpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgaW5kZXg6IHJvdXRlcy5sZW5ndGggLSAxLFxuICAgICAgICAgICAgICByb3V0ZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAnUE9QX1RPX1RPUCc6XG4gICAgICAgICAgcmV0dXJuIHJvdXRlci5nZXRTdGF0ZUZvckFjdGlvbihcbiAgICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0eXBlOiAnUE9QJyxcbiAgICAgICAgICAgICAgcGF5bG9hZDogeyBjb3VudDogc3RhdGUucm91dGVzLmxlbmd0aCAtIDEgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgKTtcblxuICAgICAgICBjYXNlICdOQVZJR0FURSc6XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQubmFtZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAhc3RhdGUucm91dGVOYW1lcy5pbmNsdWRlcyhhY3Rpb24ucGF5bG9hZC5uYW1lKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFjdGlvbi5wYXlsb2FkLmtleSB8fCBhY3Rpb24ucGF5bG9hZC5uYW1lKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgcm91dGUgYWxyZWFkeSBleGlzdHMsIG5hdmlnYXRlIHRvIHRoYXRcbiAgICAgICAgICAgIGxldCBpbmRleCA9IC0xO1xuXG4gICAgICAgICAgICBjb25zdCBnZXRJZCA9XG4gICAgICAgICAgICAgIC8vIGBnZXRJZGAgYW5kIGBrZXlgIGNhbid0IGJlIHVzZWQgdG9nZXRoZXJcbiAgICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQua2V5ID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQubmFtZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLnJvdXRlR2V0SWRMaXN0W2FjdGlvbi5wYXlsb2FkLm5hbWVdXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBpZCA9IGdldElkPy4oeyBwYXJhbXM6IGFjdGlvbi5wYXlsb2FkLnBhcmFtcyB9KTtcblxuICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgIGluZGV4ID0gc3RhdGUucm91dGVzLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgICAocm91dGUpID0+XG4gICAgICAgICAgICAgICAgICByb3V0ZS5uYW1lID09PSBhY3Rpb24ucGF5bG9hZC5uYW1lICYmXG4gICAgICAgICAgICAgICAgICBpZCA9PT0gZ2V0SWQ/Lih7IHBhcmFtczogcm91dGUucGFyYW1zIH0pXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAoc3RhdGUucm91dGVzW3N0YXRlLmluZGV4XS5uYW1lID09PSBhY3Rpb24ucGF5bG9hZC5uYW1lICYmXG4gICAgICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQua2V5ID09PSB1bmRlZmluZWQpIHx8XG4gICAgICAgICAgICAgIHN0YXRlLnJvdXRlc1tzdGF0ZS5pbmRleF0ua2V5ID09PSBhY3Rpb24ucGF5bG9hZC5rZXlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBpbmRleCA9IHN0YXRlLmluZGV4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHN0YXRlLnJvdXRlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIChzdGF0ZS5yb3V0ZXNbaV0ubmFtZSA9PT0gYWN0aW9uLnBheWxvYWQubmFtZSAmJlxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5rZXkgPT09IHVuZGVmaW5lZCkgfHxcbiAgICAgICAgICAgICAgICAgIHN0YXRlLnJvdXRlc1tpXS5rZXkgPT09IGFjdGlvbi5wYXlsb2FkLmtleVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgaW5kZXggPT09IC0xICYmXG4gICAgICAgICAgICAgIGFjdGlvbi5wYXlsb2FkLmtleSAmJlxuICAgICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5uYW1lID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSAmJiBhY3Rpb24ucGF5bG9hZC5uYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgY29uc3Qgcm91dGVzID0gW1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLnJvdXRlcyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBrZXk6XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5wYXlsb2FkLmtleSA/PyBgJHthY3Rpb24ucGF5bG9hZC5uYW1lfS0ke25hbm9pZCgpfWAsXG4gICAgICAgICAgICAgICAgICBuYW1lOiBhY3Rpb24ucGF5bG9hZC5uYW1lLFxuICAgICAgICAgICAgICAgICAgcGFyYW1zOlxuICAgICAgICAgICAgICAgICAgICByb3V0ZVBhcmFtTGlzdFthY3Rpb24ucGF5bG9hZC5uYW1lXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnJvdXRlUGFyYW1MaXN0W2FjdGlvbi5wYXlsb2FkLm5hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZC5wYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgOiBhY3Rpb24ucGF5bG9hZC5wYXJhbXMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHJvdXRlcyxcbiAgICAgICAgICAgICAgICBpbmRleDogcm91dGVzLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHJvdXRlID0gc3RhdGUucm91dGVzW2luZGV4XTtcblxuICAgICAgICAgICAgbGV0IHBhcmFtcztcblxuICAgICAgICAgICAgaWYgKGFjdGlvbi5wYXlsb2FkLm1lcmdlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICBwYXJhbXMgPVxuICAgICAgICAgICAgICAgIHJvdXRlUGFyYW1MaXN0W3JvdXRlLm5hbWVdICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgIC4uLnJvdXRlUGFyYW1MaXN0W3JvdXRlLm5hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgIC4uLmFjdGlvbi5wYXlsb2FkLnBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgOiBhY3Rpb24ucGF5bG9hZC5wYXJhbXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJhbXMgPSBhY3Rpb24ucGF5bG9hZC5wYXJhbXNcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgLi4ucm91dGUucGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZC5wYXJhbXMsXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiByb3V0ZS5wYXJhbXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgcm91dGVzOiBbXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUucm91dGVzLnNsaWNlKDAsIGluZGV4KSxcbiAgICAgICAgICAgICAgICBwYXJhbXMgIT09IHJvdXRlLnBhcmFtc1xuICAgICAgICAgICAgICAgICAgPyB7IC4uLnJvdXRlLCBwYXJhbXMgfVxuICAgICAgICAgICAgICAgICAgOiBzdGF0ZS5yb3V0ZXNbaW5kZXhdLFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICBjYXNlICdHT19CQUNLJzpcbiAgICAgICAgICBpZiAoc3RhdGUuaW5kZXggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91dGVyLmdldFN0YXRlRm9yQWN0aW9uKFxuICAgICAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdQT1AnLFxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IHsgY291bnQ6IDEgfSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGFjdGlvbi50YXJnZXQsXG4gICAgICAgICAgICAgICAgc291cmNlOiBhY3Rpb24uc291cmNlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIEJhc2VSb3V0ZXIuZ2V0U3RhdGVGb3JBY3Rpb24oc3RhdGUsIGFjdGlvbik7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFjdGlvbkNyZWF0b3JzOiBTdGFja0FjdGlvbnMsXG4gIH07XG5cbiAgcmV0dXJuIHJvdXRlcjtcbn1cbiJdfQ==