ea23be7a6a134f7e70a8d0eb46dbd712
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCallID = getCallID;
exports.setCallID = setCallID;
exports.default = void 0;

var _ReanimatedModule = _interopRequireDefault(require("../ReanimatedModule"));

var _reactNative = require("react-native");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var UPDATED_NODES = [];
var loopID = 1;
var propUpdatesEnqueued = null;
var nodeCount = 0;
var callID = "";

function getCallID() {
  return callID;
}

function setCallID(nextCallID) {
  callID = nextCallID;
}

function sanitizeConfig(config) {
  if (_reactNative.Platform.OS === 'web' || _reactNative.Platform.OS === 'windows' || _reactNative.Platform.OS === 'macos' || ['undefined', 'string', 'function', 'boolean', 'number'].includes(typeof config)) {
    return config;
  } else if (Array.isArray(config)) {
    return config.map(sanitizeConfig);
  } else if (config instanceof AnimatedNode) {
    return config.__nodeID;
  } else if (typeof config === 'object') {
    var output = {};

    for (var property in config) {
      if (property in config) {
        output[property] = sanitizeConfig(config[property]);
      }
    }

    return output;
  }

  return config;
}

function runPropUpdates() {
  var visitedNodes = new Set();

  var findAndUpdateNodes = function findAndUpdateNodes(node) {
    if (!node) {
      console.warn('findAndUpdateNodes was passed a nullish node');
      return;
    }

    if (visitedNodes.has(node)) {
      return;
    } else {
      visitedNodes.add(node);
    }

    if (typeof node.update === 'function') {
      node.update();
    } else {
      var nodes = node.__getChildren();

      if (nodes) {
        for (var i = 0, l = nodes.length; i < l; i++) {
          findAndUpdateNodes(nodes[i]);
        }
      }
    }
  };

  for (var i = 0; i < UPDATED_NODES.length; i++) {
    var node = UPDATED_NODES[i];
    findAndUpdateNodes(node);
  }

  UPDATED_NODES.length = 0;
  propUpdatesEnqueued = null;
  loopID += 1;
}

var scheduleUpdates = _reactNative.Platform.OS === 'web' ? requestAnimationFrame : setImmediate;

var AnimatedNode = function () {
  function AnimatedNode(nodeConfig, inputNodes) {
    (0, _classCallCheck2.default)(this, AnimatedNode);

    _defineProperty(this, "__nodeID", void 0);

    _defineProperty(this, "__lastLoopID", {
      "": -1
    });

    _defineProperty(this, "__memoizedValue", {
      "": null
    });

    _defineProperty(this, "__children", []);

    this.__nodeID = ++nodeCount;
    this.__nodeConfig = sanitizeConfig(nodeConfig);
    this.__initialized = false;
    this.__inputNodes = inputNodes && inputNodes.filter(function (node) {
      return node instanceof AnimatedNode;
    });
  }

  (0, _createClass2.default)(AnimatedNode, [{
    key: "toString",
    value: function toString() {
      return "AnimatedNode, id: ".concat(this.__nodeID);
    }
  }, {
    key: "__attach",
    value: function __attach() {
      this.__nativeInitialize();

      var nodes = this.__inputNodes;

      if (nodes) {
        for (var i = 0, l = nodes.length; i < l; i++) {
          nodes[i].__addChild(this);
        }
      }
    }
  }, {
    key: "__detach",
    value: function __detach() {
      var nodes = this.__inputNodes;

      if (nodes) {
        for (var i = 0, l = nodes.length; i < l; i++) {
          nodes[i].__removeChild(this);
        }
      }

      this.__nativeTearDown();
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      if (!(callID in this.__lastLoopID) || this.__lastLoopID[callID] < loopID) {
        this.__lastLoopID[callID] = loopID;

        var result = this.__onEvaluate();

        this.__memoizedValue[callID] = result;
        return result;
      }

      return this.__memoizedValue[callID];
    }
  }, {
    key: "__forceUpdateCache",
    value: function __forceUpdateCache(newValue) {
      this.__memoizedValue[callID] = newValue;

      this.__markUpdated();
    }
  }, {
    key: "__dangerouslyRescheduleEvaluate",
    value: function __dangerouslyRescheduleEvaluate() {
      this.__lastLoopID[callID] = -1;

      this.__markUpdated();
    }
  }, {
    key: "__markUpdated",
    value: function __markUpdated() {
      UPDATED_NODES.push(this);

      if (!propUpdatesEnqueued) {
        propUpdatesEnqueued = scheduleUpdates(runPropUpdates);
      }
    }
  }, {
    key: "__nativeInitialize",
    value: function __nativeInitialize() {
      if (!this.__initialized) {
        _ReanimatedModule.default.createNode(this.__nodeID, _objectSpread({}, this.__nodeConfig));

        this.__initialized = true;
      }
    }
  }, {
    key: "__nativeTearDown",
    value: function __nativeTearDown() {
      if (this.__initialized) {
        _ReanimatedModule.default.dropNode(this.__nodeID);

        this.__initialized = false;
      }
    }
  }, {
    key: "isNativelyInitialized",
    value: function isNativelyInitialized() {
      return this.__initialized;
    }
  }, {
    key: "__onEvaluate",
    value: function __onEvaluate() {
      throw new Error('Missing implementation of onEvaluate');
    }
  }, {
    key: "__getProps",
    value: function __getProps() {
      return this.__getValue();
    }
  }, {
    key: "__getChildren",
    value: function __getChildren() {
      return this.__children;
    }
  }, {
    key: "__addChild",
    value: function __addChild(child) {
      if (this.__children.length === 0) {
        this.__attach();
      }

      this.__children.push(child);

      child.__nativeInitialize();

      if (_ReanimatedModule.default.connectNodes) {
        _ReanimatedModule.default.connectNodes(this.__nodeID, child.__nodeID);
      } else {
        child.__dangerouslyRescheduleEvaluate();
      }
    }
  }, {
    key: "__removeChild",
    value: function __removeChild(child) {
      var index = this.__children.indexOf(child);

      if (index === -1) {
        console.warn("Trying to remove a child that doesn't exist");
        return;
      }

      if (_ReanimatedModule.default.disconnectNodes) {
        _ReanimatedModule.default.disconnectNodes(this.__nodeID, child.__nodeID);
      }

      this.__children.splice(index, 1);

      if (this.__children.length === 0) {
        this.__detach();
      }
    }
  }, {
    key: "_connectAnimatedView",
    value: function _connectAnimatedView(nativeViewTag) {
      if (_ReanimatedModule.default.connectNodeToView) {
        _ReanimatedModule.default.connectNodeToView(this.__nodeID, nativeViewTag);
      } else {
        this.__dangerouslyRescheduleEvaluate();
      }
    }
  }, {
    key: "_disconnectAnimatedView",
    value: function _disconnectAnimatedView(nativeViewTag) {
      _ReanimatedModule.default.disconnectNodeFromView(this.__nodeID, nativeViewTag);
    }
  }]);
  return AnimatedNode;
}();

exports.default = AnimatedNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,