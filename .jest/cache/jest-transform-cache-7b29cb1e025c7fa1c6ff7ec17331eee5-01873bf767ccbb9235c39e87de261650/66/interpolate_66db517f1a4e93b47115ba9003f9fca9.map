{"version":3,"sources":["interpolate.js"],"names":["interpolateInternalSingleProc","progress","resultForNonZeroRange","result","inS","inputRange","inE","offset","outS","outputRange","outE","interpolateInternalSingle","interpolateInternal","Extrapolate","EXTEND","CLAMP","IDENTITY","i","arr","AnimatedNode","Number","value","parseFloat","Math","extrapolate","extrapolateRight","checkMinElements","checkValidNumbers","checkNonDecreasing","convertToRadians","left","extrapolateLeft","right","output"],"mappings":"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","sourcesContent":["import {\n  lessThan,\n  multiply,\n  sub,\n  add,\n  divide,\n  greaterThan,\n  lessOrEq,\n  eq,\n} from '../operators';\nimport invariant from 'fbjs/lib/invariant';\n\nimport AnimatedNode from '../core/AnimatedNode';\nimport { createAnimatedCond as cond } from '../core/AnimatedCond';\nimport { createAnimatedFunction as proc } from '../core/AnimatedFunction';\n\nconst interpolateInternalSingleProc = proc(function(\n  value,\n  inS,\n  inE,\n  outS,\n  outE\n) {\n  const progress = divide(sub(value, inS), sub(inE, inS));\n  // logic below was made in order to provide a compatibility witn an Animated API\n  const resultForNonZeroRange = add(outS, multiply(progress, sub(outE, outS)));\n  const result = cond(\n    eq(inS, inE),\n    cond(lessOrEq(value, inS), outS, outE),\n    resultForNonZeroRange\n  );\n  return result;\n});\n\nfunction interpolateInternalSingle(value, inputRange, outputRange, offset) {\n  const inS = inputRange[offset];\n  const inE = inputRange[offset + 1];\n  const outS = outputRange[offset];\n  const outE = outputRange[offset + 1];\n  return interpolateInternalSingleProc(value, inS, inE, outS, outE);\n}\n\nfunction interpolateInternal(value, inputRange, outputRange, offset = 0) {\n  if (inputRange.length - offset === 2) {\n    return interpolateInternalSingle(value, inputRange, outputRange, offset);\n  }\n  return cond(\n    lessThan(value, inputRange[offset + 1]),\n    interpolateInternalSingle(value, inputRange, outputRange, offset),\n    interpolateInternal(value, inputRange, outputRange, offset + 1)\n  );\n}\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nfunction checkNonDecreasing(name, arr) {\n  for (let i = 1; i < arr.length; ++i) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode || arr[i - 1] instanceof AnimatedNode)\n      continue;\n    invariant(\n      arr[i] >= arr[i - 1],\n      '%s must be monotonically non-decreasing. (%s)',\n      name,\n      arr\n    );\n  }\n}\n\nfunction checkMinElements(name, arr) {\n  invariant(\n    arr.length >= 2,\n    '%s must have at least 2 elements. (%s)',\n    name,\n    arr\n  );\n}\n\nfunction checkValidNumbers(name, arr) {\n  for (let i = 0; i < arr.length; i++) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode || typeof arr[i] !== 'number') continue;\n    invariant(\n      Number.isFinite(arr[i]),\n      '%s cannot include %s. (%s)',\n      name,\n      arr[i],\n      arr\n    );\n  }\n}\n\nfunction convertToRadians(outputRange) {\n  for (const [i, value] of outputRange.entries()) {\n    if (typeof value === 'string' && value.endsWith('deg')) {\n      outputRange[i] = parseFloat(value) * (Math.PI / 180);\n    } else if (typeof value === 'string' && value.endsWith('rad')) {\n      outputRange[i] = parseFloat(value);\n    }\n  }\n}\n\nexport default function interpolate(value, config) {\n  const {\n    inputRange,\n    outputRange,\n    extrapolate = Extrapolate.EXTEND,\n    extrapolateLeft,\n    extrapolateRight,\n  } = config;\n\n  checkMinElements('inputRange', inputRange);\n  checkValidNumbers('inputRange', inputRange);\n  checkMinElements('outputRange', outputRange);\n  checkValidNumbers('outputRange', outputRange);\n  checkNonDecreasing('inputRange', inputRange);\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange and outputRange must be the same length.'\n  );\n\n  convertToRadians(outputRange);\n  const left = extrapolateLeft || extrapolate;\n  const right = extrapolateRight || extrapolate;\n  let output = interpolateInternal(value, inputRange, outputRange);\n\n  if (left === Extrapolate.EXTEND) {\n  } else if (left === Extrapolate.CLAMP) {\n    output = cond(lessThan(value, inputRange[0]), outputRange[0], output);\n  } else if (left === Extrapolate.IDENTITY) {\n    output = cond(lessThan(value, inputRange[0]), value, output);\n  }\n\n  if (right === Extrapolate.EXTEND) {\n  } else if (right === Extrapolate.CLAMP) {\n    output = cond(\n      greaterThan(value, inputRange[inputRange.length - 1]),\n      outputRange[outputRange.length - 1],\n      output\n    );\n  } else if (right === Extrapolate.IDENTITY) {\n    output = cond(\n      greaterThan(value, inputRange[inputRange.length - 1]),\n      value,\n      output\n    );\n  }\n\n  return output;\n}\n"]}