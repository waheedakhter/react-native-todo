{"version":3,"sources":["lensSatisfies.js"],"names":["exports","__esModule","_ramda","require","_isTrue","_interopRequireDefault","obj","lensSatisfies","curryN","predicate","lens","data","pipe","view","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACF,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AA0BjG,IAAIC,aAAa,GAAG,CAAC,GAAGL,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsB,UAAUC,SAAV,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiC;AACzE,SAAO,CAAC,GAAGT,MAAM,CAACU,IAAX,EAAiB,CAAC,GAAGV,MAAM,CAACW,IAAX,EAAiBH,IAAjB,CAAjB,EAAyCD,SAAzC,EAAoDL,OAAO,CAAC,SAAD,CAA3D,EAAwEO,IAAxE,CAAP;AACD,CAFmB,CAApB;AAGA,IAAIG,QAAQ,GAAGP,aAAf;AACAP,OAAO,CAAC,SAAD,CAAP,GAAqBc,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isTrue = _interopRequireDefault(require(\"./isTrue\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Returns `true` if data structure focused by the given lens satisfies the predicate.\n * Note that the predicate is expected to return boolean value and will be evaluated\n * as `false` unless the predicate returns `true`.\n *\n * @func lensSatisfies\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|1.13.0}\n * @category Relation\n * @typedef Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig  Boolean b => (a -> b) -> Lens s a -> s -> b\n * @see {@link RA.lensNotSatisfy|lensNotSatisfy}\n * @param {Function} predicate The predicate function\n * @param {Function} lens Van Laarhoven lens\n * @param {*} data The data structure\n * @return {boolean} `true` if the focused data structure satisfies the predicate, `false` otherwise\n *\n * @example\n *\n * RA.lensSatisfies(RA.isTrue, R.lensIndex(0), [false, true, 1]); // => false\n * RA.lensSatisfies(RA.isTrue, R.lensIndex(1), [false, true, 1]); // => true\n * RA.lensSatisfies(RA.isTrue, R.lensIndex(2), [false, true, 1]); // => false\n * RA.lensSatisfies(R.identity, R.lensProp('x'), { x: 1 }); // => false\n */\nvar lensSatisfies = (0, _ramda.curryN)(3, function (predicate, lens, data) {\n  return (0, _ramda.pipe)((0, _ramda.view)(lens), predicate, _isTrue[\"default\"])(data);\n});\nvar _default = lensSatisfies;\nexports[\"default\"] = _default;"]}