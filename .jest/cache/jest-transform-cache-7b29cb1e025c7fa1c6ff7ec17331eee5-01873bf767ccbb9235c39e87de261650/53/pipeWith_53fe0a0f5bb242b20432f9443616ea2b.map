{"version":3,"sources":["pipeWith.js"],"names":["_arity","require","_curry2","head","_reduce","tail","identity","pipeWith","xf","list","length","headList","tailList","result","f","call","apply","arguments","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAEVC,OAAO,CAAC,mBAAD,CAFP;;AAIA,IAAIC,OAAO,GAEXD,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIE,IAAI,GAERF,OAAO,CAAC,QAAD,CAFP;;AAIA,IAAIG,OAAO,GAEXH,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAII,IAAI,GAERJ,OAAO,CAAC,QAAD,CAFP;;AAIA,IAAIK,QAAQ,GAEZL,OAAO,CAAC,YAAD,CAFP;;AA4BA,IAAIM,QAAQ,GAEZL,OAAO,CAAC,SAASK,QAAT,CAAkBC,EAAlB,EAAsBC,IAAtB,EAA4B;AAClC,MAAIA,IAAI,CAACC,MAAL,IAAe,CAAnB,EAAsB;AACpB,WAAOJ,QAAP;AACD;;AAED,MAAIK,QAAQ,GAAGR,IAAI,CAACM,IAAD,CAAnB;AACA,MAAIG,QAAQ,GAAGP,IAAI,CAACI,IAAD,CAAnB;AACA,SAAOT,MAAM,CAACW,QAAQ,CAACD,MAAV,EAAkB,YAAY;AACzC,WAAON,OAAO,CAAC,UAAUS,MAAV,EAAkBC,CAAlB,EAAqB;AAClC,aAAON,EAAE,CAACO,IAAH,CAAQ,IAAR,EAAcD,CAAd,EAAiBD,MAAjB,CAAP;AACD,KAFa,EAEXF,QAAQ,CAACK,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAFW,EAEsBL,QAFtB,CAAd;AAGD,GAJY,CAAb;AAKD,CAZM,CAFP;;AAgBAM,MAAM,CAACC,OAAP,GAAiBZ,QAAjB","sourcesContent":["var _arity =\n/*#__PURE__*/\nrequire(\"./internal/_arity\");\n\nvar _curry2 =\n/*#__PURE__*/\nrequire(\"./internal/_curry2\");\n\nvar head =\n/*#__PURE__*/\nrequire(\"./head\");\n\nvar _reduce =\n/*#__PURE__*/\nrequire(\"./internal/_reduce\");\n\nvar tail =\n/*#__PURE__*/\nrequire(\"./tail\");\n\nvar identity =\n/*#__PURE__*/\nrequire(\"./identity\");\n/**\n * Performs left-to-right function composition using transforming function. The first argument may have\n * any arity; the remaining arguments must be unary.\n *\n * **Note:** The result of pipeWith is not automatically curried. Transforming function is not used on the\n * first argument.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig ((* -> *), [((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)]) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.composeWith, R.pipe\n * @example\n *\n *      const pipeWhileNotNil = R.pipeWith((f, res) => R.isNil(res) ? res : f(res));\n *      const f = pipeWhileNotNil([Math.pow, R.negate, R.inc])\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipeWith(f)([g, h, i])(...args) = f(i, f(h, g(...args)))\n */\n\n\nvar pipeWith =\n/*#__PURE__*/\n_curry2(function pipeWith(xf, list) {\n  if (list.length <= 0) {\n    return identity;\n  }\n\n  var headList = head(list);\n  var tailList = tail(list);\n  return _arity(headList.length, function () {\n    return _reduce(function (result, f) {\n      return xf.call(this, f, result);\n    }, headList.apply(this, arguments), tailList);\n  });\n});\n\nmodule.exports = pipeWith;"]}