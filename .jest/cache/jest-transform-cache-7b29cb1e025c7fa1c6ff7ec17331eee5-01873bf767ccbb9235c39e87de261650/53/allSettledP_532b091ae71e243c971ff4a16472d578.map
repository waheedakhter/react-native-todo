{"version":3,"sources":["allSettledP.js"],"names":["exports","__esModule","allSettledPPonyfill","_ramda","require","_isFunction","_interopRequireDefault","_Promise","obj","curryN","allSettledP","Promise","allSettled","bind","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqBA,OAAO,CAACE,mBAAR,GAA8B,KAAK,CAAxD;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACF,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIG,QAAQ,GAAGD,sBAAsB,CAACF,OAAO,CAAC,yCAAD,CAAR,CAArC;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACP,UAAX,GAAwBO,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,IAAIN,mBAAmB,GAAG,CAAC,GAAGC,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsBF,QAAQ,CAAC,SAAD,CAA9B,CAA1B;AAwBAP,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B;AACA,IAAIQ,WAAW,GAAG,CAAC,GAAGL,WAAW,CAAC,SAAD,CAAf,EAA4BM,OAAO,CAACC,UAApC,IAAkD,CAAC,GAAGT,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsB,CAAC,GAAGN,MAAM,CAACU,IAAX,EAAiBF,OAAO,CAACC,UAAzB,EAAqCD,OAArC,CAAtB,CAAlD,GAAyHT,mBAA3I;AACA,IAAIY,QAAQ,GAAGJ,WAAf;AACAV,OAAO,CAAC,SAAD,CAAP,GAAqBc,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = exports.allSettledPPonyfill = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isFunction = _interopRequireDefault(require(\"./isFunction\"));\n\nvar _Promise = _interopRequireDefault(require(\"./internal/ponyfills/Promise.allSettled\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar allSettledPPonyfill = (0, _ramda.curryN)(1, _Promise[\"default\"]);\n/**\n * Returns a promise that is fulfilled with an array of promise state snapshots,\n * but only after all the original promises have settled, i.e. become either fulfilled or rejected.\n * We say that a promise is settled if it is not pending, i.e. if it is either fulfilled or rejected.\n *\n * @func allSettledP\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.18.0|v2.18.0}\n * @category Function\n * @typedef Settlement = { status: String, value: * }\n * @sig [Promise a] -> Promise [Settlement a]\n * @param {Iterable.<*>} iterable An iterable object such as an Array or String\n * @return {Promise} Returns a promise that is fulfilled with an array of promise state snapshots\n * @see {@link RA.allP|allP}\n * @example\n *\n * RA.allSettledP([\n *   Promise.resolve(1),\n *   2,\n *   Promise.reject(3),\n * ]); //=> Promise([{ status: 'fulfilled', value: 1 }, { status: 'fulfilled', value: 2 }, { status: 'rejected', reason: 3 }])\n */\n\nexports.allSettledPPonyfill = allSettledPPonyfill;\nvar allSettledP = (0, _isFunction[\"default\"])(Promise.allSettled) ? (0, _ramda.curryN)(1, (0, _ramda.bind)(Promise.allSettled, Promise)) : allSettledPPonyfill;\nvar _default = allSettledP;\nexports[\"default\"] = _default;"]}