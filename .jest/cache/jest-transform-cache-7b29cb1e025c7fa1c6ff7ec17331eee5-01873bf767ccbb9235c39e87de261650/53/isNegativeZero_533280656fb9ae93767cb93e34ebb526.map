{"version":3,"sources":["isNegativeZero.js"],"names":["exports","__esModule","_ramda","require","isNegativeZero","identical","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAoBA,IAAIC,cAAc,GAAG,CAAC,GAAGF,MAAM,CAACG,SAAX,EAAsB,CAAC,CAAvB,CAArB;AACA,IAAIC,QAAQ,GAAGF,cAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBM,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Checks if value is a negative zero (-0).\n *\n * @func isNegativeZero\n * @memberof RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see @see {@link RA.isPositiveZero|isPositiveZero}\n * @example\n *\n * RA.isNegativeZero(-0); //=> true\n * RA.isNegativeZero(+0); //=> false\n * RA.isNegativeZero(0); //=> false\n * RA.isNegativeZero(null); //=> false\n */\nvar isNegativeZero = (0, _ramda.identical)(-0);\nvar _default = isNegativeZero;\nexports[\"default\"] = _default;"]}