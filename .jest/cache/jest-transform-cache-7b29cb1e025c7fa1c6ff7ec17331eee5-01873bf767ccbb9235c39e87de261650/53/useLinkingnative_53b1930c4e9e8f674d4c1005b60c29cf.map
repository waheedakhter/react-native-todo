{"version":3,"sources":["useLinking.native.tsx"],"names":["isUsingLinking","enabled","getInitialURL","Promise","Linking","resolve","setTimeout","subscribe","listener","callback","url","subscription","getStateFromPath","getStateFromPathDefault","getActionFromState","getActionFromStateDefault","React","Platform","enabledRef","prefixesRef","configRef","getInitialURLRef","getStateFromPathRef","getActionFromStateRef","getInitialState","path","state","thenable","then","onfulfilled","catch","navigation","ref","rootState","r","console","action","e"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Linking, Platform } from 'react-native';\nimport {\n  getActionFromState as getActionFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n} from '@react-navigation/core';\nimport extractPathFromURL from './extractPathFromURL';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\nlet isUsingLinking = false;\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  {\n    enabled = true,\n    prefixes,\n    config,\n    getInitialURL = () =>\n      Promise.race([\n        Linking.getInitialURL(),\n        new Promise<undefined>((resolve) =>\n          // Timeout in 150ms if `getInitialState` doesn't resolve\n          // Workaround for https://github.com/facebook/react-native/issues/25675\n          setTimeout(resolve, 150)\n        ),\n      ]),\n    subscribe = (listener) => {\n      const callback = ({ url }: { url: string }) => listener(url);\n\n      const subscription = Linking.addEventListener('url', callback) as\n        | { remove(): void }\n        | undefined;\n\n      return () => {\n        // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n        if (subscription?.remove) {\n          subscription.remove();\n        } else {\n          Linking.removeEventListener('url', callback);\n        }\n      };\n    },\n    getStateFromPath = getStateFromPathDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: LinkingOptions\n) {\n  React.useEffect(() => {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You are not using both 'linking' prop and 'useLinking'\",\n          \"- You don't have 'useLinking' in multiple components\",\n          Platform.OS === 'android'\n            ? \"- You have set 'android:launchMode=singleTask' in the '<activity />' section of the 'AndroidManifest.xml' file to avoid launching multiple instances\"\n            : '',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const prefixesRef = React.useRef(prefixes);\n  const configRef = React.useRef(config);\n  const getInitialURLRef = React.useRef(getInitialURL);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    prefixesRef.current = prefixes;\n    configRef.current = config;\n    getInitialURLRef.current = getInitialURL;\n    getStateFromPathRef.current = getStateFromPath;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const getInitialState = React.useCallback(() => {\n    let state: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const url = getInitialURLRef.current();\n\n      if (url != null && typeof url !== 'string') {\n        return url.then((url) => {\n          const path = url\n            ? extractPathFromURL(prefixesRef.current, url)\n            : null;\n\n          return path\n            ? getStateFromPathRef.current(path, configRef.current)\n            : undefined;\n        });\n      }\n\n      const path = url ? extractPathFromURL(prefixesRef.current, url) : null;\n\n      state = path\n        ? getStateFromPathRef.current(path, configRef.current)\n        : undefined;\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(state) : state);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n  }, []);\n\n  React.useEffect(() => {\n    const listener = (url: string) => {\n      if (!enabled) {\n        return;\n      }\n\n      const path = extractPathFromURL(prefixesRef.current, url);\n      const navigation = ref.current;\n\n      if (navigation && path) {\n        const state = getStateFromPathRef.current(path, configRef.current);\n\n        if (state) {\n          // Make sure that the routes in the state exist in the root navigator\n          // Otherwise there's an error in the linking configuration\n          const rootState = navigation.getRootState();\n\n          if (\n            state.routes.some((r) => !rootState?.routeNames.includes(r.name))\n          ) {\n            console.warn(\n              \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/5.x/configuring-links for more details on how to specify a linking configuration.\"\n            );\n            return;\n          }\n\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${e.message}`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        }\n      }\n    };\n\n    return subscribe(listener);\n  }, [enabled, ref, subscribe]);\n\n  return {\n    getInitialState,\n  };\n}\n"]}