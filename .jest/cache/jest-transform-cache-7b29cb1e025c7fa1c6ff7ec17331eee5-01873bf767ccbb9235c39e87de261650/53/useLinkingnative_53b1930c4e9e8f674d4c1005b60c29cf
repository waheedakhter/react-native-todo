656f36a8288887ebc55ba4ed19a9e572
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useLinking;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _core = require("@react-navigation/core");

var _extractPathFromURL = _interopRequireDefault(require("./extractPathFromURL"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var isUsingLinking = false;

function useLinking(ref, _ref) {
  var _ref$enabled = _ref.enabled,
      enabled = _ref$enabled === void 0 ? true : _ref$enabled,
      prefixes = _ref.prefixes,
      config = _ref.config,
      _ref$getInitialURL = _ref.getInitialURL,
      getInitialURL = _ref$getInitialURL === void 0 ? function () {
    return Promise.race([_reactNative.Linking.getInitialURL(), new Promise(function (resolve) {
      return setTimeout(resolve, 150);
    })]);
  } : _ref$getInitialURL,
      _ref$subscribe = _ref.subscribe,
      subscribe = _ref$subscribe === void 0 ? function (listener) {
    var callback = function callback(_ref2) {
      var url = _ref2.url;
      return listener(url);
    };

    var subscription = _reactNative.Linking.addEventListener('url', callback);

    return function () {
      if (subscription !== null && subscription !== void 0 && subscription.remove) {
        subscription.remove();
      } else {
        _reactNative.Linking.removeEventListener('url', callback);
      }
    };
  } : _ref$subscribe,
      _ref$getStateFromPath = _ref.getStateFromPath,
      getStateFromPath = _ref$getStateFromPath === void 0 ? _core.getStateFromPath : _ref$getStateFromPath,
      _ref$getActionFromSta = _ref.getActionFromState,
      getActionFromState = _ref$getActionFromSta === void 0 ? _core.getActionFromState : _ref$getActionFromSta;
  React.useEffect(function () {
    if (enabled !== false && isUsingLinking) {
      throw new Error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', "- You are not using both 'linking' prop and 'useLinking'", "- You don't have 'useLinking' in multiple components", _reactNative.Platform.OS === 'android' ? "- You have set 'android:launchMode=singleTask' in the '<activity />' section of the 'AndroidManifest.xml' file to avoid launching multiple instances" : ''].join('\n').trim());
    } else {
      isUsingLinking = enabled !== false;
    }

    return function () {
      isUsingLinking = false;
    };
  });
  var enabledRef = React.useRef(enabled);
  var prefixesRef = React.useRef(prefixes);
  var configRef = React.useRef(config);
  var getInitialURLRef = React.useRef(getInitialURL);
  var getStateFromPathRef = React.useRef(getStateFromPath);
  var getActionFromStateRef = React.useRef(getActionFromState);
  React.useEffect(function () {
    enabledRef.current = enabled;
    prefixesRef.current = prefixes;
    configRef.current = config;
    getInitialURLRef.current = getInitialURL;
    getStateFromPathRef.current = getStateFromPath;
    getActionFromStateRef.current = getActionFromState;
  });
  var getInitialState = React.useCallback(function () {
    var state;

    if (enabledRef.current) {
      var url = getInitialURLRef.current();

      if (url != null && typeof url !== 'string') {
        return url.then(function (url) {
          var path = url ? (0, _extractPathFromURL.default)(prefixesRef.current, url) : null;
          return path ? getStateFromPathRef.current(path, configRef.current) : undefined;
        });
      }

      var path = url ? (0, _extractPathFromURL.default)(prefixesRef.current, url) : null;
      state = path ? getStateFromPathRef.current(path, configRef.current) : undefined;
    }

    var thenable = {
      then: function then(onfulfilled) {
        return Promise.resolve(onfulfilled ? onfulfilled(state) : state);
      },
      catch: function _catch() {
        return thenable;
      }
    };
    return thenable;
  }, []);
  React.useEffect(function () {
    var listener = function listener(url) {
      if (!enabled) {
        return;
      }

      var path = (0, _extractPathFromURL.default)(prefixesRef.current, url);
      var navigation = ref.current;

      if (navigation && path) {
        var state = getStateFromPathRef.current(path, configRef.current);

        if (state) {
          var rootState = navigation.getRootState();

          if (state.routes.some(function (r) {
            return !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name));
          })) {
            console.warn("The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/5.x/configuring-links for more details on how to specify a linking configuration.");
            return;
          }

          var action = getActionFromStateRef.current(state, configRef.current);

          if (action !== undefined) {
            try {
              navigation.dispatch(action);
            } catch (e) {
              console.warn("An error occurred when trying to handle the link '".concat(path, "': ").concat(e.message));
            }
          } else {
            navigation.resetRoot(state);
          }
        }
      }
    };

    return subscribe(listener);
  }, [enabled, ref, subscribe]);
  return {
    getInitialState: getInitialState
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,