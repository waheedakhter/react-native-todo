c98da5972e1d07261ab0e11618b8d608
var _includes = require("./_includes");

var _map = require("./_map");

var _quote = require("./_quote");

var _toISOString = require("./_toISOString");

var keys = require("../keys");

var reject = require("../reject");

function _toString(x, seen) {
  var recur = function recur(y) {
    var xs = seen.concat([x]);
    return _includes(y, xs) ? '<Circular>' : _toString(y, xs);
  };

  var mapPairs = function mapPairs(obj, keys) {
    return _map(function (k) {
      return _quote(k) + ': ' + recur(obj[k]);
    }, keys.slice().sort());
  };

  switch (Object.prototype.toString.call(x)) {
    case '[object Arguments]':
      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';

    case '[object Array]':
      return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {
        return /^\d+$/.test(k);
      }, keys(x)))).join(', ') + ']';

    case '[object Boolean]':
      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();

    case '[object Date]':
      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';

    case '[object Null]':
      return 'null';

    case '[object Number]':
      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);

    case '[object String]':
      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);

    case '[object Undefined]':
      return 'undefined';

    default:
      if (typeof x.toString === 'function') {
        var repr = x.toString();

        if (repr !== '[object Object]') {
          return repr;
        }
      }

      return '{' + mapPairs(x, keys(x)).join(', ') + '}';
  }
}

module.exports = _toString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl90b1N0cmluZy5qcyJdLCJuYW1lcyI6WyJfaW5jbHVkZXMiLCJyZXF1aXJlIiwiX21hcCIsIl9xdW90ZSIsIl90b0lTT1N0cmluZyIsImtleXMiLCJyZWplY3QiLCJfdG9TdHJpbmciLCJ4Iiwic2VlbiIsInJlY3VyIiwieSIsInhzIiwiY29uY2F0IiwibWFwUGFpcnMiLCJvYmoiLCJrIiwic2xpY2UiLCJzb3J0IiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiam9pbiIsInRlc3QiLCJ2YWx1ZU9mIiwiaXNOYU4iLCJOYU4iLCJJbmZpbml0eSIsInJlcHIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxTQUFTLEdBRWJDLE9BQU8sQ0FBQyxhQUFELENBRlA7O0FBSUEsSUFBSUMsSUFBSSxHQUVSRCxPQUFPLENBQUMsUUFBRCxDQUZQOztBQUlBLElBQUlFLE1BQU0sR0FFVkYsT0FBTyxDQUFDLFVBQUQsQ0FGUDs7QUFJQSxJQUFJRyxZQUFZLEdBRWhCSCxPQUFPLENBQUMsZ0JBQUQsQ0FGUDs7QUFJQSxJQUFJSSxJQUFJLEdBRVJKLE9BQU8sQ0FBQyxTQUFELENBRlA7O0FBSUEsSUFBSUssTUFBTSxHQUVWTCxPQUFPLENBQUMsV0FBRCxDQUZQOztBQUlBLFNBQVNNLFNBQVQsQ0FBbUJDLENBQW5CLEVBQXNCQyxJQUF0QixFQUE0QjtBQUMxQixNQUFJQyxLQUFLLEdBQUcsU0FBU0EsS0FBVCxDQUFlQyxDQUFmLEVBQWtCO0FBQzVCLFFBQUlDLEVBQUUsR0FBR0gsSUFBSSxDQUFDSSxNQUFMLENBQVksQ0FBQ0wsQ0FBRCxDQUFaLENBQVQ7QUFDQSxXQUFPUixTQUFTLENBQUNXLENBQUQsRUFBSUMsRUFBSixDQUFULEdBQW1CLFlBQW5CLEdBQWtDTCxTQUFTLENBQUNJLENBQUQsRUFBSUMsRUFBSixDQUFsRDtBQUNELEdBSEQ7O0FBTUEsTUFBSUUsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBVUMsR0FBVixFQUFlVixJQUFmLEVBQXFCO0FBQ2xDLFdBQU9ILElBQUksQ0FBQyxVQUFVYyxDQUFWLEVBQWE7QUFDdkIsYUFBT2IsTUFBTSxDQUFDYSxDQUFELENBQU4sR0FBWSxJQUFaLEdBQW1CTixLQUFLLENBQUNLLEdBQUcsQ0FBQ0MsQ0FBRCxDQUFKLENBQS9CO0FBQ0QsS0FGVSxFQUVSWCxJQUFJLENBQUNZLEtBQUwsR0FBYUMsSUFBYixFQUZRLENBQVg7QUFHRCxHQUpEOztBQU1BLFVBQVFDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCZCxDQUEvQixDQUFSO0FBQ0UsU0FBSyxvQkFBTDtBQUNFLGFBQU8sdUNBQXVDTixJQUFJLENBQUNRLEtBQUQsRUFBUUYsQ0FBUixDQUFKLENBQWVlLElBQWYsQ0FBb0IsSUFBcEIsQ0FBdkMsR0FBbUUsSUFBMUU7O0FBRUYsU0FBSyxnQkFBTDtBQUNFLGFBQU8sTUFBTXJCLElBQUksQ0FBQ1EsS0FBRCxFQUFRRixDQUFSLENBQUosQ0FBZUssTUFBZixDQUFzQkMsUUFBUSxDQUFDTixDQUFELEVBQUlGLE1BQU0sQ0FBQyxVQUFVVSxDQUFWLEVBQWE7QUFDakUsZUFBTyxRQUFRUSxJQUFSLENBQWFSLENBQWIsQ0FBUDtBQUNELE9BRm9ELEVBRWxEWCxJQUFJLENBQUNHLENBQUQsQ0FGOEMsQ0FBVixDQUE5QixFQUVDZSxJQUZELENBRU0sSUFGTixDQUFOLEdBRW9CLEdBRjNCOztBQUlGLFNBQUssa0JBQUw7QUFDRSxhQUFPLE9BQU9mLENBQVAsS0FBYSxRQUFiLEdBQXdCLGlCQUFpQkUsS0FBSyxDQUFDRixDQUFDLENBQUNpQixPQUFGLEVBQUQsQ0FBdEIsR0FBc0MsR0FBOUQsR0FBb0VqQixDQUFDLENBQUNhLFFBQUYsRUFBM0U7O0FBRUYsU0FBSyxlQUFMO0FBQ0UsYUFBTyxlQUFlSyxLQUFLLENBQUNsQixDQUFDLENBQUNpQixPQUFGLEVBQUQsQ0FBTCxHQUFxQmYsS0FBSyxDQUFDaUIsR0FBRCxDQUExQixHQUFrQ3hCLE1BQU0sQ0FBQ0MsWUFBWSxDQUFDSSxDQUFELENBQWIsQ0FBdkQsSUFBNEUsR0FBbkY7O0FBRUYsU0FBSyxlQUFMO0FBQ0UsYUFBTyxNQUFQOztBQUVGLFNBQUssaUJBQUw7QUFDRSxhQUFPLE9BQU9BLENBQVAsS0FBYSxRQUFiLEdBQXdCLGdCQUFnQkUsS0FBSyxDQUFDRixDQUFDLENBQUNpQixPQUFGLEVBQUQsQ0FBckIsR0FBcUMsR0FBN0QsR0FBbUUsSUFBSWpCLENBQUosS0FBVSxDQUFDb0IsUUFBWCxHQUFzQixJQUF0QixHQUE2QnBCLENBQUMsQ0FBQ2EsUUFBRixDQUFXLEVBQVgsQ0FBdkc7O0FBRUYsU0FBSyxpQkFBTDtBQUNFLGFBQU8sT0FBT2IsQ0FBUCxLQUFhLFFBQWIsR0FBd0IsZ0JBQWdCRSxLQUFLLENBQUNGLENBQUMsQ0FBQ2lCLE9BQUYsRUFBRCxDQUFyQixHQUFxQyxHQUE3RCxHQUFtRXRCLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFoRjs7QUFFRixTQUFLLG9CQUFMO0FBQ0UsYUFBTyxXQUFQOztBQUVGO0FBQ0UsVUFBSSxPQUFPQSxDQUFDLENBQUNhLFFBQVQsS0FBc0IsVUFBMUIsRUFBc0M7QUFDcEMsWUFBSVEsSUFBSSxHQUFHckIsQ0FBQyxDQUFDYSxRQUFGLEVBQVg7O0FBRUEsWUFBSVEsSUFBSSxLQUFLLGlCQUFiLEVBQWdDO0FBQzlCLGlCQUFPQSxJQUFQO0FBQ0Q7QUFDRjs7QUFFRCxhQUFPLE1BQU1mLFFBQVEsQ0FBQ04sQ0FBRCxFQUFJSCxJQUFJLENBQUNHLENBQUQsQ0FBUixDQUFSLENBQXFCZSxJQUFyQixDQUEwQixJQUExQixDQUFOLEdBQXdDLEdBQS9DO0FBcENKO0FBc0NEOztBQUVETyxNQUFNLENBQUNDLE9BQVAsR0FBaUJ4QixTQUFqQiIsInNvdXJjZXNDb250ZW50IjpbInZhciBfaW5jbHVkZXMgPVxuLyojX19QVVJFX18qL1xucmVxdWlyZShcIi4vX2luY2x1ZGVzXCIpO1xuXG52YXIgX21hcCA9XG4vKiNfX1BVUkVfXyovXG5yZXF1aXJlKFwiLi9fbWFwXCIpO1xuXG52YXIgX3F1b3RlID1cbi8qI19fUFVSRV9fKi9cbnJlcXVpcmUoXCIuL19xdW90ZVwiKTtcblxudmFyIF90b0lTT1N0cmluZyA9XG4vKiNfX1BVUkVfXyovXG5yZXF1aXJlKFwiLi9fdG9JU09TdHJpbmdcIik7XG5cbnZhciBrZXlzID1cbi8qI19fUFVSRV9fKi9cbnJlcXVpcmUoXCIuLi9rZXlzXCIpO1xuXG52YXIgcmVqZWN0ID1cbi8qI19fUFVSRV9fKi9cbnJlcXVpcmUoXCIuLi9yZWplY3RcIik7XG5cbmZ1bmN0aW9uIF90b1N0cmluZyh4LCBzZWVuKSB7XG4gIHZhciByZWN1ciA9IGZ1bmN0aW9uIHJlY3VyKHkpIHtcbiAgICB2YXIgeHMgPSBzZWVuLmNvbmNhdChbeF0pO1xuICAgIHJldHVybiBfaW5jbHVkZXMoeSwgeHMpID8gJzxDaXJjdWxhcj4nIDogX3RvU3RyaW5nKHksIHhzKTtcbiAgfTsgLy8gIG1hcFBhaXJzIDo6IChPYmplY3QsIFtTdHJpbmddKSAtPiBbU3RyaW5nXVxuXG5cbiAgdmFyIG1hcFBhaXJzID0gZnVuY3Rpb24gKG9iaiwga2V5cykge1xuICAgIHJldHVybiBfbWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgICByZXR1cm4gX3F1b3RlKGspICsgJzogJyArIHJlY3VyKG9ialtrXSk7XG4gICAgfSwga2V5cy5zbGljZSgpLnNvcnQoKSk7XG4gIH07XG5cbiAgc3dpdGNoIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkpIHtcbiAgICBjYXNlICdbb2JqZWN0IEFyZ3VtZW50c10nOlxuICAgICAgcmV0dXJuICcoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oJyArIF9tYXAocmVjdXIsIHgpLmpvaW4oJywgJykgKyAnKSknO1xuXG4gICAgY2FzZSAnW29iamVjdCBBcnJheV0nOlxuICAgICAgcmV0dXJuICdbJyArIF9tYXAocmVjdXIsIHgpLmNvbmNhdChtYXBQYWlycyh4LCByZWplY3QoZnVuY3Rpb24gKGspIHtcbiAgICAgICAgcmV0dXJuIC9eXFxkKyQvLnRlc3Qoayk7XG4gICAgICB9LCBrZXlzKHgpKSkpLmpvaW4oJywgJykgKyAnXSc7XG5cbiAgICBjYXNlICdbb2JqZWN0IEJvb2xlYW5dJzpcbiAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgPyAnbmV3IEJvb2xlYW4oJyArIHJlY3VyKHgudmFsdWVPZigpKSArICcpJyA6IHgudG9TdHJpbmcoKTtcblxuICAgIGNhc2UgJ1tvYmplY3QgRGF0ZV0nOlxuICAgICAgcmV0dXJuICduZXcgRGF0ZSgnICsgKGlzTmFOKHgudmFsdWVPZigpKSA/IHJlY3VyKE5hTikgOiBfcXVvdGUoX3RvSVNPU3RyaW5nKHgpKSkgKyAnKSc7XG5cbiAgICBjYXNlICdbb2JqZWN0IE51bGxdJzpcbiAgICAgIHJldHVybiAnbnVsbCc7XG5cbiAgICBjYXNlICdbb2JqZWN0IE51bWJlcl0nOlxuICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnb2JqZWN0JyA/ICduZXcgTnVtYmVyKCcgKyByZWN1cih4LnZhbHVlT2YoKSkgKyAnKScgOiAxIC8geCA9PT0gLUluZmluaXR5ID8gJy0wJyA6IHgudG9TdHJpbmcoMTApO1xuXG4gICAgY2FzZSAnW29iamVjdCBTdHJpbmddJzpcbiAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgPyAnbmV3IFN0cmluZygnICsgcmVjdXIoeC52YWx1ZU9mKCkpICsgJyknIDogX3F1b3RlKHgpO1xuXG4gICAgY2FzZSAnW29iamVjdCBVbmRlZmluZWRdJzpcbiAgICAgIHJldHVybiAndW5kZWZpbmVkJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAodHlwZW9mIHgudG9TdHJpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIHJlcHIgPSB4LnRvU3RyaW5nKCk7XG5cbiAgICAgICAgaWYgKHJlcHIgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcHI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuICd7JyArIG1hcFBhaXJzKHgsIGtleXMoeCkpLmpvaW4oJywgJykgKyAnfSc7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdG9TdHJpbmc7Il19