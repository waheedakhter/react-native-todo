c7b188e01effd32eb61f29c5e45787b3
"use strict";

exports.__esModule = true;
exports.createSelectorHook = createSelectorHook;
exports.useSelector = void 0;

var _react = require("react");

var _useReduxContext2 = require("./useReduxContext");

var _Subscription = require("../utils/Subscription");

var _useIsomorphicLayoutEffect = require("../utils/useIsomorphicLayoutEffect");

var _Context = require("../components/Context");

var refEquality = function refEquality(a, b) {
  return a === b;
};

function useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {
  var _useReducer = (0, _react.useReducer)(function (s) {
    return s + 1;
  }, 0),
      forceRender = _useReducer[1];

  var subscription = (0, _react.useMemo)(function () {
    return (0, _Subscription.createSubscription)(store, contextSub);
  }, [store, contextSub]);
  var latestSubscriptionCallbackError = (0, _react.useRef)();
  var latestSelector = (0, _react.useRef)();
  var latestStoreState = (0, _react.useRef)();
  var latestSelectedState = (0, _react.useRef)();
  var storeState = store.getState();
  var selectedState;

  try {
    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {
      var newSelectedState = selector(storeState);

      if (latestSelectedState.current === undefined || !equalityFn(newSelectedState, latestSelectedState.current)) {
        selectedState = newSelectedState;
      } else {
        selectedState = latestSelectedState.current;
      }
    } else {
      selectedState = latestSelectedState.current;
    }
  } catch (err) {
    if (latestSubscriptionCallbackError.current) {
      err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
    }

    throw err;
  }

  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    latestSelector.current = selector;
    latestStoreState.current = storeState;
    latestSelectedState.current = selectedState;
    latestSubscriptionCallbackError.current = undefined;
  });
  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    function checkForUpdates() {
      try {
        var newStoreState = store.getState();

        if (newStoreState === latestStoreState.current) {
          return;
        }

        var _newSelectedState = latestSelector.current(newStoreState);

        if (equalityFn(_newSelectedState, latestSelectedState.current)) {
          return;
        }

        latestSelectedState.current = _newSelectedState;
        latestStoreState.current = newStoreState;
      } catch (err) {
        latestSubscriptionCallbackError.current = err;
      }

      forceRender();
    }

    subscription.onStateChange = checkForUpdates;
    subscription.trySubscribe();
    checkForUpdates();
    return function () {
      return subscription.tryUnsubscribe();
    };
  }, [store, subscription]);
  return selectedState;
}

function createSelectorHook(context) {
  if (context === void 0) {
    context = _Context.ReactReduxContext;
  }

  var useReduxContext = context === _Context.ReactReduxContext ? _useReduxContext2.useReduxContext : function () {
    return (0, _react.useContext)(context);
  };
  return function useSelector(selector, equalityFn) {
    if (equalityFn === void 0) {
      equalityFn = refEquality;
    }

    if (process.env.NODE_ENV !== 'production') {
      if (!selector) {
        throw new Error("You must pass a selector to useSelector");
      }

      if (typeof selector !== 'function') {
        throw new Error("You must pass a function as a selector to useSelector");
      }

      if (typeof equalityFn !== 'function') {
        throw new Error("You must pass a function as an equality function to useSelector");
      }
    }

    var _useReduxContext = useReduxContext(),
        store = _useReduxContext.store,
        contextSub = _useReduxContext.subscription;

    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);
    (0, _react.useDebugValue)(selectedState);
    return selectedState;
  };
}

var useSelector = createSelectorHook();
exports.useSelector = useSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZVNlbGVjdG9yLmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiY3JlYXRlU2VsZWN0b3JIb29rIiwidXNlU2VsZWN0b3IiLCJfcmVhY3QiLCJyZXF1aXJlIiwiX3VzZVJlZHV4Q29udGV4dDIiLCJfU3Vic2NyaXB0aW9uIiwiX3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJfQ29udGV4dCIsInJlZkVxdWFsaXR5IiwiYSIsImIiLCJ1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbiIsInNlbGVjdG9yIiwiZXF1YWxpdHlGbiIsInN0b3JlIiwiY29udGV4dFN1YiIsIl91c2VSZWR1Y2VyIiwidXNlUmVkdWNlciIsInMiLCJmb3JjZVJlbmRlciIsInN1YnNjcmlwdGlvbiIsInVzZU1lbW8iLCJjcmVhdGVTdWJzY3JpcHRpb24iLCJsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yIiwidXNlUmVmIiwibGF0ZXN0U2VsZWN0b3IiLCJsYXRlc3RTdG9yZVN0YXRlIiwibGF0ZXN0U2VsZWN0ZWRTdGF0ZSIsInN0b3JlU3RhdGUiLCJnZXRTdGF0ZSIsInNlbGVjdGVkU3RhdGUiLCJjdXJyZW50IiwibmV3U2VsZWN0ZWRTdGF0ZSIsInVuZGVmaW5lZCIsImVyciIsIm1lc3NhZ2UiLCJzdGFjayIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJjaGVja0ZvclVwZGF0ZXMiLCJuZXdTdG9yZVN0YXRlIiwiX25ld1NlbGVjdGVkU3RhdGUiLCJvblN0YXRlQ2hhbmdlIiwidHJ5U3Vic2NyaWJlIiwidHJ5VW5zdWJzY3JpYmUiLCJjb250ZXh0IiwiUmVhY3RSZWR1eENvbnRleHQiLCJ1c2VSZWR1eENvbnRleHQiLCJ1c2VDb250ZXh0IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiRXJyb3IiLCJfdXNlUmVkdXhDb250ZXh0IiwidXNlRGVidWdWYWx1ZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU8sQ0FB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QixtQ0FBbUMsQ0FBQ0MsUUFBRCxFQUFXQyxVQUFYLEVBQXVCQyxLQUF2QixFQUE4QkMsVUFBOUIsQ0FBdkQ7QUFDQSxLQUFDLEdBQUdiLE1BQU0sQ0FBQ21ELGFBQVgsRUFBMEJ2QixhQUExQjtBQUNBLFdBQU9BLGFBQVA7QUFDRCxHQTFCRDtBQTJCRDs7QUEwQkQsSUFBSTdCLFdBQVcsR0FBZ0JELGtCQUFrQixFQUFqRDtBQUNBRixPQUFPLENBQUNHLFdBQVIsR0FBc0JBLFdBQXRCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmNyZWF0ZVNlbGVjdG9ySG9vayA9IGNyZWF0ZVNlbGVjdG9ySG9vaztcbmV4cG9ydHMudXNlU2VsZWN0b3IgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfdXNlUmVkdXhDb250ZXh0MiA9IHJlcXVpcmUoXCIuL3VzZVJlZHV4Q29udGV4dFwiKTtcblxudmFyIF9TdWJzY3JpcHRpb24gPSByZXF1aXJlKFwiLi4vdXRpbHMvU3Vic2NyaXB0aW9uXCIpO1xuXG52YXIgX3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSByZXF1aXJlKFwiLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFwiKTtcblxudmFyIF9Db250ZXh0ID0gcmVxdWlyZShcIi4uL2NvbXBvbmVudHMvQ29udGV4dFwiKTtcblxudmFyIHJlZkVxdWFsaXR5ID0gZnVuY3Rpb24gcmVmRXF1YWxpdHkoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG5cbmZ1bmN0aW9uIHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yikge1xuICB2YXIgX3VzZVJlZHVjZXIgPSAoMCwgX3JlYWN0LnVzZVJlZHVjZXIpKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMgKyAxO1xuICB9LCAwKSxcbiAgICAgIGZvcmNlUmVuZGVyID0gX3VzZVJlZHVjZXJbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9ICgwLCBfcmVhY3QudXNlTWVtbykoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAoMCwgX1N1YnNjcmlwdGlvbi5jcmVhdGVTdWJzY3JpcHRpb24pKHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgfSwgW3N0b3JlLCBjb250ZXh0U3ViXSk7XG4gIHZhciBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yID0gKDAsIF9yZWFjdC51c2VSZWYpKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RvciA9ICgwLCBfcmVhY3QudXNlUmVmKSgpO1xuICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9ICgwLCBfcmVhY3QudXNlUmVmKSgpO1xuICB2YXIgbGF0ZXN0U2VsZWN0ZWRTdGF0ZSA9ICgwLCBfcmVhY3QudXNlUmVmKSgpO1xuICB2YXIgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIHZhciBzZWxlY3RlZFN0YXRlO1xuXG4gIHRyeSB7XG4gICAgaWYgKHNlbGVjdG9yICE9PSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50IHx8IHN0b3JlU3RhdGUgIT09IGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCB8fCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIHZhciBuZXdTZWxlY3RlZFN0YXRlID0gc2VsZWN0b3Ioc3RvcmVTdGF0ZSk7IC8vIGVuc3VyZSBsYXRlc3Qgc2VsZWN0ZWQgc3RhdGUgaXMgcmV1c2VkIHNvIHRoYXQgYSBjdXN0b20gZXF1YWxpdHkgZnVuY3Rpb24gY2FuIHJlc3VsdCBpbiBpZGVudGljYWwgcmVmZXJlbmNlc1xuXG4gICAgICBpZiAobGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID09PSB1bmRlZmluZWQgfHwgIWVxdWFsaXR5Rm4obmV3U2VsZWN0ZWRTdGF0ZSwgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50KSkge1xuICAgICAgICBzZWxlY3RlZFN0YXRlID0gbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAobGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBlcnIubWVzc2FnZSArPSBcIlxcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XFxuXCIgKyBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQuc3RhY2sgKyBcIlxcblxcblwiO1xuICAgIH1cblxuICAgIHRocm93IGVycjtcbiAgfVxuXG4gICgwLCBfdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC51c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KShmdW5jdGlvbiAoKSB7XG4gICAgbGF0ZXN0U2VsZWN0b3IuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgIGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCA9IHN0b3JlU3RhdGU7XG4gICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gc2VsZWN0ZWRTdGF0ZTtcbiAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gIH0pO1xuICAoMCwgX3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QudXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCkoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXdTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTsgLy8gQXZvaWQgY2FsbGluZyBzZWxlY3RvciBtdWx0aXBsZSB0aW1lcyBpZiB0aGUgc3RvcmUncyBzdGF0ZSBoYXMgbm90IGNoYW5nZWRcblxuICAgICAgICBpZiAobmV3U3RvcmVTdGF0ZSA9PT0gbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9uZXdTZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudChuZXdTdG9yZVN0YXRlKTtcblxuICAgICAgICBpZiAoZXF1YWxpdHlGbihfbmV3U2VsZWN0ZWRTdGF0ZSwgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IF9uZXdTZWxlY3RlZFN0YXRlO1xuICAgICAgICBsYXRlc3RTdG9yZVN0YXRlLmN1cnJlbnQgPSBuZXdTdG9yZVN0YXRlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIHdlIGlnbm9yZSBhbGwgZXJyb3JzIGhlcmUsIHNpbmNlIHdoZW4gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpcyByZS1yZW5kZXJlZCwgdGhlIHNlbGVjdG9ycyBhcmUgY2FsbGVkIGFnYWluLCBhbmRcbiAgICAgICAgLy8gd2lsbCB0aHJvdyBhZ2FpbiwgaWYgbmVpdGhlciBwcm9wcyBub3Igc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlZFxuICAgICAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSBlcnI7XG4gICAgICB9XG5cbiAgICAgIGZvcmNlUmVuZGVyKCk7XG4gICAgfVxuXG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW3N0b3JlLCBzdWJzY3JpcHRpb25dKTtcbiAgcmV0dXJuIHNlbGVjdGVkU3RhdGU7XG59XG4vKipcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9ySG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gX0NvbnRleHQuUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gX0NvbnRleHQuUmVhY3RSZWR1eENvbnRleHQgPyBfdXNlUmVkdXhDb250ZXh0Mi51c2VSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICgwLCBfcmVhY3QudXNlQ29udGV4dCkoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTZWxlY3RvcihzZWxlY3RvciwgZXF1YWxpdHlGbikge1xuICAgIGlmIChlcXVhbGl0eUZuID09PSB2b2lkIDApIHtcbiAgICAgIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIGZ1bmN0aW9uIGFzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZXF1YWxpdHlGbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYW4gZXF1YWxpdHkgZnVuY3Rpb24gdG8gdXNlU2VsZWN0b3JcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlLFxuICAgICAgICBjb250ZXh0U3ViID0gX3VzZVJlZHV4Q29udGV4dC5zdWJzY3JpcHRpb247XG5cbiAgICB2YXIgc2VsZWN0ZWRTdGF0ZSA9IHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yik7XG4gICAgKDAsIF9yZWFjdC51c2VEZWJ1Z1ZhbHVlKShzZWxlY3RlZFN0YXRlKTtcbiAgICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbiAgfTtcbn1cbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUncyBzdGF0ZS4gVGhpcyBob29rIHRha2VzIGEgc2VsZWN0b3IgZnVuY3Rpb25cbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxuICpcbiAqIFRoaXMgaG9vayB0YWtlcyBhbiBvcHRpb25hbCBlcXVhbGl0eSBjb21wYXJpc29uIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxuICogd2hldGhlciB0aGUgY29tcG9uZW50IG5lZWRzIHRvIGJlIHJlLXJlbmRlcmVkLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbj19IGVxdWFsaXR5Rm4gdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBlcXVhbGl0eVxuICpcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgY291bnRlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmNvdW50ZXIpXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxuICogfVxuICovXG5cblxudmFyIHVzZVNlbGVjdG9yID0gLyojX19QVVJFX18qL2NyZWF0ZVNlbGVjdG9ySG9vaygpO1xuZXhwb3J0cy51c2VTZWxlY3RvciA9IHVzZVNlbGVjdG9yOyJdfQ==