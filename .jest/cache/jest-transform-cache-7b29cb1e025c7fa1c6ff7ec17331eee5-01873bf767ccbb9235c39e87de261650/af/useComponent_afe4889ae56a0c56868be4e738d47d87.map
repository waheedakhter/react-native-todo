{"version":3,"sources":["useComponent.tsx"],"names":["propsRef","React","rest","props"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEe,SAAA,YAAA,CAAA,SAAA,EAAA,KAAA,EAGW;AACxB,MAAMA,QAAQ,GAAGC,KAAK,CAALA,MAAAA,CADO,KACPA,CAAjB;AAKAD,EAAAA,QAAQ,CAARA,OAAAA,GAAAA,KAAAA;AAEAC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBD,IAAAA,QAAQ,CAARA,OAAAA,GAAAA,IAAAA;AADFC,GAAAA;AAIA,SAAO,KAAK,CAAL,MAAA,CAAcC,UAAAA,IAAD,EAAkD;AACpE,QAAMC,KAAK,GAAGH,QAAQ,CAAtB,OAAA;;AAEA,QAAIG,KAAK,KAAT,IAAA,EAAoB;AAClB,YAAM,IAAA,KAAA,CAAN,+EAAM,CAAN;AAJkE;;AAUpE,WAAO,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAP,IAAO,CAAA,CAAP;AAVK,GAAA,EAAP,OAAA;AAYD","sourcesContent":["import * as React from 'react';\n\nexport default function useComponent<\n  T extends React.ComponentType<any>,\n  P extends {}\n>(Component: T, props: P) {\n  const propsRef = React.useRef<P | null>(props);\n\n  // Normally refs shouldn't be mutated in render\n  // But we return a component which will be rendered\n  // So it's just for immediate consumption\n  propsRef.current = props;\n\n  React.useEffect(() => {\n    propsRef.current = null;\n  });\n\n  return React.useRef((rest: Omit<React.ComponentProps<T>, keyof P>) => {\n    const props = propsRef.current;\n\n    if (props === null) {\n      throw new Error(\n        'The returned component must be rendered in the same render phase as the hook.'\n      );\n    }\n\n    // @ts-expect-error: the props should be fine here\n    return <Component {...props} {...rest} />;\n  }).current;\n}\n"]}