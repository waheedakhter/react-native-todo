{"version":3,"sources":["AnimatedDebug.js"],"names":["AnimatedNode","constructor","value","type","message","toString","__onEvaluate","console","runningInRemoteDebugger","runningInExpoShell"],"mappings":"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","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { NativeModules } from 'react-native';\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    invariant(\n      typeof message === 'string',\n      `Reanimated: Animated.debug node first argument should be of type string but got ${message}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'debug', message, value }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n\n    // read the executionEnvironment off of expo-constants without explicitly\n    // depending on the package\n    const runningInExpoShell =\n      NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants\n        ?.executionEnvironment === 'storeClient';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"]}