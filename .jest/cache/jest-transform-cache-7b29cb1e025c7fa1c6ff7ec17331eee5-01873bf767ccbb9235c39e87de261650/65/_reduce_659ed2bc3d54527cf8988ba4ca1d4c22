a9b12eb171e24fa1735095246f98916c
var _isArrayLike = require("./_isArrayLike");

var _xwrap = require("./_xwrap");

var bind = require("../bind");

function _arrayReduce(xf, acc, list) {
  var idx = 0;
  var len = list.length;

  while (idx < len) {
    acc = xf['@@transducer/step'](acc, list[idx]);

    if (acc && acc['@@transducer/reduced']) {
      acc = acc['@@transducer/value'];
      break;
    }

    idx += 1;
  }

  return xf['@@transducer/result'](acc);
}

function _iterableReduce(xf, acc, iter) {
  var step = iter.next();

  while (!step.done) {
    acc = xf['@@transducer/step'](acc, step.value);

    if (acc && acc['@@transducer/reduced']) {
      acc = acc['@@transducer/value'];
      break;
    }

    step = iter.next();
  }

  return xf['@@transducer/result'](acc);
}

function _methodReduce(xf, acc, obj, methodName) {
  return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));
}

var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';

function _reduce(fn, acc, list) {
  if (typeof fn === 'function') {
    fn = _xwrap(fn);
  }

  if (_isArrayLike(list)) {
    return _arrayReduce(fn, acc, list);
  }

  if (typeof list['fantasy-land/reduce'] === 'function') {
    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');
  }

  if (list[symIterator] != null) {
    return _iterableReduce(fn, acc, list[symIterator]());
  }

  if (typeof list.next === 'function') {
    return _iterableReduce(fn, acc, list);
  }

  if (typeof list.reduce === 'function') {
    return _methodReduce(fn, acc, list, 'reduce');
  }

  throw new TypeError('reduce: list must be array or iterable');
}

module.exports = _reduce;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9yZWR1Y2UuanMiXSwibmFtZXMiOlsiX2lzQXJyYXlMaWtlIiwicmVxdWlyZSIsIl94d3JhcCIsImJpbmQiLCJfYXJyYXlSZWR1Y2UiLCJ4ZiIsImFjYyIsImxpc3QiLCJpZHgiLCJsZW4iLCJsZW5ndGgiLCJfaXRlcmFibGVSZWR1Y2UiLCJpdGVyIiwic3RlcCIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJfbWV0aG9kUmVkdWNlIiwib2JqIiwibWV0aG9kTmFtZSIsInN5bUl0ZXJhdG9yIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcmVkdWNlIiwiZm4iLCJyZWR1Y2UiLCJUeXBlRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxZQUFZLEdBRWhCQyxPQUFPLENBQUMsZ0JBQUQsQ0FGUDs7QUFJQSxJQUFJQyxNQUFNLEdBRVZELE9BQU8sQ0FBQyxVQUFELENBRlA7O0FBSUEsSUFBSUUsSUFBSSxHQUVSRixPQUFPLENBQUMsU0FBRCxDQUZQOztBQUlBLFNBQVNHLFlBQVQsQ0FBc0JDLEVBQXRCLEVBQTBCQyxHQUExQixFQUErQkMsSUFBL0IsRUFBcUM7QUFDbkMsTUFBSUMsR0FBRyxHQUFHLENBQVY7QUFDQSxNQUFJQyxHQUFHLEdBQUdGLElBQUksQ0FBQ0csTUFBZjs7QUFFQSxTQUFPRixHQUFHLEdBQUdDLEdBQWIsRUFBa0I7QUFDaEJILElBQUFBLEdBQUcsR0FBR0QsRUFBRSxDQUFDLG1CQUFELENBQUYsQ0FBd0JDLEdBQXhCLEVBQTZCQyxJQUFJLENBQUNDLEdBQUQsQ0FBakMsQ0FBTjs7QUFFQSxRQUFJRixHQUFHLElBQUlBLEdBQUcsQ0FBQyxzQkFBRCxDQUFkLEVBQXdDO0FBQ3RDQSxNQUFBQSxHQUFHLEdBQUdBLEdBQUcsQ0FBQyxvQkFBRCxDQUFUO0FBQ0E7QUFDRDs7QUFFREUsSUFBQUEsR0FBRyxJQUFJLENBQVA7QUFDRDs7QUFFRCxTQUFPSCxFQUFFLENBQUMscUJBQUQsQ0FBRixDQUEwQkMsR0FBMUIsQ0FBUDtBQUNEOztBQUVELFNBQVNLLGVBQVQsQ0FBeUJOLEVBQXpCLEVBQTZCQyxHQUE3QixFQUFrQ00sSUFBbEMsRUFBd0M7QUFDdEMsTUFBSUMsSUFBSSxHQUFHRCxJQUFJLENBQUNFLElBQUwsRUFBWDs7QUFFQSxTQUFPLENBQUNELElBQUksQ0FBQ0UsSUFBYixFQUFtQjtBQUNqQlQsSUFBQUEsR0FBRyxHQUFHRCxFQUFFLENBQUMsbUJBQUQsQ0FBRixDQUF3QkMsR0FBeEIsRUFBNkJPLElBQUksQ0FBQ0csS0FBbEMsQ0FBTjs7QUFFQSxRQUFJVixHQUFHLElBQUlBLEdBQUcsQ0FBQyxzQkFBRCxDQUFkLEVBQXdDO0FBQ3RDQSxNQUFBQSxHQUFHLEdBQUdBLEdBQUcsQ0FBQyxvQkFBRCxDQUFUO0FBQ0E7QUFDRDs7QUFFRE8sSUFBQUEsSUFBSSxHQUFHRCxJQUFJLENBQUNFLElBQUwsRUFBUDtBQUNEOztBQUVELFNBQU9ULEVBQUUsQ0FBQyxxQkFBRCxDQUFGLENBQTBCQyxHQUExQixDQUFQO0FBQ0Q7O0FBRUQsU0FBU1csYUFBVCxDQUF1QlosRUFBdkIsRUFBMkJDLEdBQTNCLEVBQWdDWSxHQUFoQyxFQUFxQ0MsVUFBckMsRUFBaUQ7QUFDL0MsU0FBT2QsRUFBRSxDQUFDLHFCQUFELENBQUYsQ0FBMEJhLEdBQUcsQ0FBQ0MsVUFBRCxDQUFILENBQWdCaEIsSUFBSSxDQUFDRSxFQUFFLENBQUMsbUJBQUQsQ0FBSCxFQUEwQkEsRUFBMUIsQ0FBcEIsRUFBbURDLEdBQW5ELENBQTFCLENBQVA7QUFDRDs7QUFFRCxJQUFJYyxXQUFXLEdBQUcsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixHQUFnQ0EsTUFBTSxDQUFDQyxRQUF2QyxHQUFrRCxZQUFwRTs7QUFFQSxTQUFTQyxPQUFULENBQWlCQyxFQUFqQixFQUFxQmxCLEdBQXJCLEVBQTBCQyxJQUExQixFQUFnQztBQUM5QixNQUFJLE9BQU9pQixFQUFQLEtBQWMsVUFBbEIsRUFBOEI7QUFDNUJBLElBQUFBLEVBQUUsR0FBR3RCLE1BQU0sQ0FBQ3NCLEVBQUQsQ0FBWDtBQUNEOztBQUVELE1BQUl4QixZQUFZLENBQUNPLElBQUQsQ0FBaEIsRUFBd0I7QUFDdEIsV0FBT0gsWUFBWSxDQUFDb0IsRUFBRCxFQUFLbEIsR0FBTCxFQUFVQyxJQUFWLENBQW5CO0FBQ0Q7O0FBRUQsTUFBSSxPQUFPQSxJQUFJLENBQUMscUJBQUQsQ0FBWCxLQUF1QyxVQUEzQyxFQUF1RDtBQUNyRCxXQUFPVSxhQUFhLENBQUNPLEVBQUQsRUFBS2xCLEdBQUwsRUFBVUMsSUFBVixFQUFnQixxQkFBaEIsQ0FBcEI7QUFDRDs7QUFFRCxNQUFJQSxJQUFJLENBQUNhLFdBQUQsQ0FBSixJQUFxQixJQUF6QixFQUErQjtBQUM3QixXQUFPVCxlQUFlLENBQUNhLEVBQUQsRUFBS2xCLEdBQUwsRUFBVUMsSUFBSSxDQUFDYSxXQUFELENBQUosRUFBVixDQUF0QjtBQUNEOztBQUVELE1BQUksT0FBT2IsSUFBSSxDQUFDTyxJQUFaLEtBQXFCLFVBQXpCLEVBQXFDO0FBQ25DLFdBQU9ILGVBQWUsQ0FBQ2EsRUFBRCxFQUFLbEIsR0FBTCxFQUFVQyxJQUFWLENBQXRCO0FBQ0Q7O0FBRUQsTUFBSSxPQUFPQSxJQUFJLENBQUNrQixNQUFaLEtBQXVCLFVBQTNCLEVBQXVDO0FBQ3JDLFdBQU9SLGFBQWEsQ0FBQ08sRUFBRCxFQUFLbEIsR0FBTCxFQUFVQyxJQUFWLEVBQWdCLFFBQWhCLENBQXBCO0FBQ0Q7O0FBRUQsUUFBTSxJQUFJbUIsU0FBSixDQUFjLHdDQUFkLENBQU47QUFDRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCTCxPQUFqQiIsInNvdXJjZXNDb250ZW50IjpbInZhciBfaXNBcnJheUxpa2UgPVxuLyojX19QVVJFX18qL1xucmVxdWlyZShcIi4vX2lzQXJyYXlMaWtlXCIpO1xuXG52YXIgX3h3cmFwID1cbi8qI19fUFVSRV9fKi9cbnJlcXVpcmUoXCIuL194d3JhcFwiKTtcblxudmFyIGJpbmQgPVxuLyojX19QVVJFX18qL1xucmVxdWlyZShcIi4uL2JpbmRcIik7XG5cbmZ1bmN0aW9uIF9hcnJheVJlZHVjZSh4ZiwgYWNjLCBsaXN0KSB7XG4gIHZhciBpZHggPSAwO1xuICB2YXIgbGVuID0gbGlzdC5sZW5ndGg7XG5cbiAgd2hpbGUgKGlkeCA8IGxlbikge1xuICAgIGFjYyA9IHhmWydAQHRyYW5zZHVjZXIvc3RlcCddKGFjYywgbGlzdFtpZHhdKTtcblxuICAgIGlmIChhY2MgJiYgYWNjWydAQHRyYW5zZHVjZXIvcmVkdWNlZCddKSB7XG4gICAgICBhY2MgPSBhY2NbJ0BAdHJhbnNkdWNlci92YWx1ZSddO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWR4ICs9IDE7XG4gIH1cblxuICByZXR1cm4geGZbJ0BAdHJhbnNkdWNlci9yZXN1bHQnXShhY2MpO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVSZWR1Y2UoeGYsIGFjYywgaXRlcikge1xuICB2YXIgc3RlcCA9IGl0ZXIubmV4dCgpO1xuXG4gIHdoaWxlICghc3RlcC5kb25lKSB7XG4gICAgYWNjID0geGZbJ0BAdHJhbnNkdWNlci9zdGVwJ10oYWNjLCBzdGVwLnZhbHVlKTtcblxuICAgIGlmIChhY2MgJiYgYWNjWydAQHRyYW5zZHVjZXIvcmVkdWNlZCddKSB7XG4gICAgICBhY2MgPSBhY2NbJ0BAdHJhbnNkdWNlci92YWx1ZSddO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc3RlcCA9IGl0ZXIubmV4dCgpO1xuICB9XG5cbiAgcmV0dXJuIHhmWydAQHRyYW5zZHVjZXIvcmVzdWx0J10oYWNjKTtcbn1cblxuZnVuY3Rpb24gX21ldGhvZFJlZHVjZSh4ZiwgYWNjLCBvYmosIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIHhmWydAQHRyYW5zZHVjZXIvcmVzdWx0J10ob2JqW21ldGhvZE5hbWVdKGJpbmQoeGZbJ0BAdHJhbnNkdWNlci9zdGVwJ10sIHhmKSwgYWNjKSk7XG59XG5cbnZhciBzeW1JdGVyYXRvciA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnID8gU3ltYm9sLml0ZXJhdG9yIDogJ0BAaXRlcmF0b3InO1xuXG5mdW5jdGlvbiBfcmVkdWNlKGZuLCBhY2MsIGxpc3QpIHtcbiAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZuID0gX3h3cmFwKGZuKTtcbiAgfVxuXG4gIGlmIChfaXNBcnJheUxpa2UobGlzdCkpIHtcbiAgICByZXR1cm4gX2FycmF5UmVkdWNlKGZuLCBhY2MsIGxpc3QpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBsaXN0WydmYW50YXN5LWxhbmQvcmVkdWNlJ10gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gX21ldGhvZFJlZHVjZShmbiwgYWNjLCBsaXN0LCAnZmFudGFzeS1sYW5kL3JlZHVjZScpO1xuICB9XG5cbiAgaWYgKGxpc3Rbc3ltSXRlcmF0b3JdICE9IG51bGwpIHtcbiAgICByZXR1cm4gX2l0ZXJhYmxlUmVkdWNlKGZuLCBhY2MsIGxpc3Rbc3ltSXRlcmF0b3JdKCkpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBsaXN0Lm5leHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gX2l0ZXJhYmxlUmVkdWNlKGZuLCBhY2MsIGxpc3QpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBsaXN0LnJlZHVjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBfbWV0aG9kUmVkdWNlKGZuLCBhY2MsIGxpc3QsICdyZWR1Y2UnKTtcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlZHVjZTogbGlzdCBtdXN0IGJlIGFycmF5IG9yIGl0ZXJhYmxlJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3JlZHVjZTsiXX0=