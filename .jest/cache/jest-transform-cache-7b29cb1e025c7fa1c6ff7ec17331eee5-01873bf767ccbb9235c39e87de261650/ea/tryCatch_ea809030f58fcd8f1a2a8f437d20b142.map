{"version":3,"sources":["tryCatch.js"],"names":["_arity","require","_concat","_curry2","tryCatch","_tryCatch","tryer","catcher","length","apply","arguments","e","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAEVC,OAAO,CAAC,mBAAD,CAFP;;AAIA,IAAIC,OAAO,GAEXD,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIE,OAAO,GAEXF,OAAO,CAAC,oBAAD,CAFP;;AA4BA,IAAIG,QAAQ,GAEZD,OAAO,CAAC,SAASE,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;AACzC,SAAOP,MAAM,CAACM,KAAK,CAACE,MAAP,EAAe,YAAY;AACtC,QAAI;AACF,aAAOF,KAAK,CAACG,KAAN,CAAY,IAAZ,EAAkBC,SAAlB,CAAP;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV,aAAOJ,OAAO,CAACE,KAAR,CAAc,IAAd,EAAoBP,OAAO,CAAC,CAACS,CAAD,CAAD,EAAMD,SAAN,CAA3B,CAAP;AACD;AACF,GANY,CAAb;AAOD,CARM,CAFP;;AAYAE,MAAM,CAACC,OAAP,GAAiBT,QAAjB","sourcesContent":["var _arity =\n/*#__PURE__*/\nrequire(\"./internal/_arity\");\n\nvar _concat =\n/*#__PURE__*/\nrequire(\"./internal/_concat\");\n\nvar _curry2 =\n/*#__PURE__*/\nrequire(\"./internal/_curry2\");\n/**\n * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n * function evaluates the `tryer`; if it does not throw, it simply returns the\n * result. If the `tryer` *does* throw, the returned function evaluates the\n * `catcher` function and returns its result. Note that for effective\n * composition with this function, both the `tryer` and `catcher` functions\n * must return the same type of results.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n * @param {Function} tryer The function that may throw.\n * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n * @return {Function} A new function that will catch exceptions and send then to the catcher.\n * @example\n *\n *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n *      R.tryCatch(() => { throw 'foo'}, R.always('catched'))('bar') // => 'catched'\n *      R.tryCatch(R.times(R.identity), R.always([]))('s') // => []\n *      R.tryCatch(() => { throw 'this is not a valid value'}, (err, value)=>({error : err,  value }))('bar') // => {'error': 'this is not a valid value', 'value': 'bar'}\n */\n\n\nvar tryCatch =\n/*#__PURE__*/\n_curry2(function _tryCatch(tryer, catcher) {\n  return _arity(tryer.length, function () {\n    try {\n      return tryer.apply(this, arguments);\n    } catch (e) {\n      return catcher.apply(this, _concat([e], arguments));\n    }\n  });\n});\n\nmodule.exports = tryCatch;"]}