{"version":3,"sources":["AnimatedValue.js"],"names":["InternalAnimatedValue","setValue","Platform","ReanimatedModule","toString","interpolate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,YAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,wBAAA,CAAA,CAAA;;AACA,IAAA,sBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA;;AACA,IAAA,IAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;;;;;;;IAGe,a;;;;;;;;;;;;WACbC,kBAAQ,KAARA,EAAgB;AACd,WAAA,iBAAA,CAAuB,KAAvB,UAAA;;AACA,UAAIC,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAAA,KAAAA,IAAyBA,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAzBA,SAAAA,IAAsDA,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAA1D,OAAA,EAAmF;AACjF,aAAA,YAAA,CAAkB,CAAA,GAAA,IAAA,CAAA,GAAA,EAAlB,KAAkB,CAAlB;AADF,OAAA,MAEO;AACL,YAAIC,iBAAAA,CAAAA,OAAAA,CAAAA,QAAAA,IAA6B,OAAA,KAAA,KAAjC,QAAA,EAA4D;AAI1DA,UAAAA,iBAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CAA0B,KAA1BA,QAAAA,EAAAA,KAAAA;AAJF,SAAA,MAKO;AACL,WAAA,GAAA,aAAA,CAAA,YAAA,EAAa,CAAA,GAAA,YAAA,CAAA,iBAAA,EAAA,IAAA,EAAb,KAAa,CAAb,EAAA,IAAA;AACD;AACF;AACF;;;WAEDC,oBAAW;AACT,aAAA,sBAAA,MAAA,CAA6B,KAA7B,QAAA,CAAA;AACD;;;WAEDC,qBAAW,MAAXA,EAAoB;AAClB,aAAO,CAAA,GAAA,YAAA,CAAA,OAAA,EAAA,IAAA,EAAP,MAAO,CAAP;AACD;;;EAvBwCL,sBAAAA,CAA5B,O","sourcesContent":["import { createAnimatedSet as set } from '../core/AnimatedSet';\nimport interpolate from '../derived/interpolate';\nimport InternalAnimatedValue from './InternalAnimatedValue';\nimport { Platform } from 'react-native';\nimport { evaluateOnce } from '../derived/evaluateOnce';\nimport ReanimatedModule from '../ReanimatedModule';\nimport { val } from '../val';\n\n// Animated value wrapped with extra methods for omit cycle of dependencies\nexport default class AnimatedValue extends InternalAnimatedValue {\n  setValue(value) {\n    this.__detachAnimation(this._animation);\n    if (Platform.OS === 'web' || Platform.OS === 'windows' || Platform.OS === 'macos') {\n      this._updateValue(val(value));\n    } else {\n      if (ReanimatedModule.setValue && typeof value === 'number') {\n        // FIXME Remove it after some time\n        // For OTA-safety\n        // FIXME handle setting value with a node\n        ReanimatedModule.setValue(this.__nodeID, value);\n      } else {\n        evaluateOnce(set(this, value), this);\n      }\n    }\n  }\n\n  toString() {\n    return `AnimatedValue, id: ${this.__nodeID}`;\n  }\n\n  interpolate(config) {\n    return interpolate(this, config);\n  }\n}\n"]}