{"version":3,"sources":["isInteger.js"],"names":["exports","__esModule","isIntegerPonyfill","_ramda","require","_isFunction","_interopRequireDefault","_Number","obj","curryN","isInteger","Number","bind","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,iBAAR,GAA4BF,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAAtD;;AAEA,IAAIG,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACF,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIG,OAAO,GAAGD,sBAAsB,CAACF,OAAO,CAAC,uCAAD,CAAR,CAApC;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACP,UAAX,GAAwBO,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,IAAIN,iBAAiB,GAAG,CAAC,GAAGC,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsBF,OAAO,CAAC,SAAD,CAA7B,CAAxB;AA8BAP,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B;AACA,IAAIQ,SAAS,GAAG,CAAC,GAAGL,WAAW,CAAC,SAAD,CAAf,EAA4BM,MAAM,CAACD,SAAnC,IAAgD,CAAC,GAAGP,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsB,CAAC,GAAGN,MAAM,CAACS,IAAX,EAAiBD,MAAM,CAACD,SAAxB,EAAmCC,MAAnC,CAAtB,CAAhD,GAAoHT,iBAApI;AACA,IAAIW,QAAQ,GAAGH,SAAf;AACAV,OAAO,CAAC,SAAD,CAAP,GAAqBa,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.isIntegerPonyfill = exports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isFunction = _interopRequireDefault(require(\"./isFunction\"));\n\nvar _Number = _interopRequireDefault(require(\"./internal/ponyfills/Number.isInteger\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar isIntegerPonyfill = (0, _ramda.curryN)(1, _Number[\"default\"]);\n/**\n * Checks whether the passed value is an `integer`.\n *\n * @func isInteger\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.7.0|v0.7.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotInteger|isNotInteger}\n * @example\n *\n * RA.isInteger(0); //=> true\n * RA.isInteger(1); //=> true\n * RA.isInteger(-100000); //=> true\n *\n * RA.isInteger(0.1);       //=> false\n * RA.isInteger(Math.PI);   //=> false\n *\n * RA.isInteger(NaN);       //=> false\n * RA.isInteger(Infinity);  //=> false\n * RA.isInteger(-Infinity); //=> false\n * RA.isInteger('10');      //=> false\n * RA.isInteger(true);      //=> false\n * RA.isInteger(false);     //=> false\n * RA.isInteger([1]);       //=> false\n */\n\nexports.isIntegerPonyfill = isIntegerPonyfill;\nvar isInteger = (0, _isFunction[\"default\"])(Number.isInteger) ? (0, _ramda.curryN)(1, (0, _ramda.bind)(Number.isInteger, Number)) : isIntegerPonyfill;\nvar _default = isInteger;\nexports[\"default\"] = _default;"]}