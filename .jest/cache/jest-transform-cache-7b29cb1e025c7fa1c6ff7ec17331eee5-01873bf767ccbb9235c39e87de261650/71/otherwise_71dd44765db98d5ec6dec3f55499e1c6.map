{"version":3,"sources":["otherwise.js"],"names":["_curry2","require","_assertPromise","otherwise","f","p","then","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAEXC,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIC,cAAc,GAElBD,OAAO,CAAC,2BAAD,CAFP;;AAiCA,IAAIE,SAAS,GAEbH,OAAO,CAAC,SAASG,SAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;AAC/BH,EAAAA,cAAc,CAAC,WAAD,EAAcG,CAAd,CAAd;;AAEA,SAAOA,CAAC,CAACC,IAAF,CAAO,IAAP,EAAaF,CAAb,CAAP;AACD,CAJM,CAFP;;AAQAG,MAAM,CAACC,OAAP,GAAiBL,SAAjB","sourcesContent":["var _curry2 =\n/*#__PURE__*/\nrequire(\"./internal/_curry2\");\n\nvar _assertPromise =\n/*#__PURE__*/\nrequire(\"./internal/_assertPromise\");\n/**\n * Returns the result of applying the onFailure function to the value inside\n * a failed promise. This is useful for handling rejected promises\n * inside function compositions.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig (e -> b) -> (Promise e a) -> (Promise e b)\n * @sig (e -> (Promise f b)) -> (Promise e a) -> (Promise f b)\n * @param {Function} onFailure The function to apply. Can return a value or a promise of a value.\n * @param {Promise} p\n * @return {Promise} The result of calling `p.then(null, onFailure)`\n * @see R.then\n * @example\n *\n *      var failedFetch = (id) => Promise.reject('bad ID');\n *      var useDefault = () => ({ firstName: 'Bob', lastName: 'Loblaw' })\n *\n *      //recoverFromFailure :: String -> Promise ({firstName, lastName})\n *      var recoverFromFailure = R.pipe(\n *        failedFetch,\n *        R.otherwise(useDefault),\n *        R.then(R.pick(['firstName', 'lastName'])),\n *      );\n *      recoverFromFailure(12345).then(console.log)\n */\n\n\nvar otherwise =\n/*#__PURE__*/\n_curry2(function otherwise(f, p) {\n  _assertPromise('otherwise', p);\n\n  return p.then(null, f);\n});\n\nmodule.exports = otherwise;"]}