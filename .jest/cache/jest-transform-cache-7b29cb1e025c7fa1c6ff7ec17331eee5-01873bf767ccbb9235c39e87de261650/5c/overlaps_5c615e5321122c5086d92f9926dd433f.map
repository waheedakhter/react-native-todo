{"version":3,"sources":["overlaps.js"],"names":["exports","__esModule","_ramda","require","_isNotEmpty","_interopRequireDefault","obj","overlaps","curryN","list1","list2","isEmpty","pipe","intersection","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACF,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAoBjG,IAAIC,QAAQ,GAAG,CAAC,GAAGL,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsB,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AAC3D,MAAI,CAAC,GAAGR,MAAM,CAACS,OAAX,EAAoBF,KAApB,CAAJ,EAAgC;AAC9B,WAAO,IAAP;AACD;;AAED,SAAO,CAAC,GAAGP,MAAM,CAACU,IAAX,EAAiBV,MAAM,CAACW,YAAxB,EAAsCT,WAAW,CAAC,SAAD,CAAjD,EAA8DK,KAA9D,EAAqEC,KAArE,CAAP;AACD,CANc,CAAf;AAOA,IAAII,QAAQ,GAAGP,QAAf;AACAP,OAAO,CAAC,SAAD,CAAP,GAAqBc,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isNotEmpty = _interopRequireDefault(require(\"./isNotEmpty\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Returns true if two lists have at least one element common to both lists.\n *\n * @func overlaps\n * @memberOf RA\n * @category Relation\n * @since {@link https://char0n.github.io/ramda-adjunct/2.30.0|v2.30.0}\n * @sig [a] -> [a] -> Boolean\n * @param {Array} list1 The first list\n * @param {Array} list2 The second list\n * @return {boolean} True if two lists have at least one element common to both lists\n * @example\n *\n * RA.overlaps(['-v', '--verbose'], ['node', 'script.js', '-v']); //=> true\n * RA.overlaps(['-v', '--verbose'], []); //=> false\n * RA.overlaps([1, 2, 3], [3, 4, 5]); //=> true\n * RA.overlaps([1, 2, 3], [4, 5]); //=> false\n */\nvar overlaps = (0, _ramda.curryN)(2, function (list1, list2) {\n  if ((0, _ramda.isEmpty)(list1)) {\n    return true;\n  }\n\n  return (0, _ramda.pipe)(_ramda.intersection, _isNotEmpty[\"default\"])(list1, list2);\n});\nvar _default = overlaps;\nexports[\"default\"] = _default;"]}