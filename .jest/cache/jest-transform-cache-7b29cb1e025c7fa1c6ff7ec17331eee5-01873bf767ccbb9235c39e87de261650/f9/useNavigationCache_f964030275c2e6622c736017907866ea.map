{"version":3,"sources":["useNavigationCache.tsx"],"names":["emitter","cache","current","actions","router","CommonActions","previous","route","acc","rest","dispatch","action","payload","getState","navigation","source","helpers","setOptions","options","o","isFocused","state"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  ParamListBase,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\nimport type { EventMapBase, NavigationHelpers, NavigationProp } from './types';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMapBase>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n> = {\n  [key: string]: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n};\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State>) {\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<NavigationCache<State, ScreenOptions>>(\n    (acc, route) => {\n      const previous = cache.current[route.key];\n\n      if (previous) {\n        // If a cached navigation object already exists, reuse it\n        acc[route.key] = previous;\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { emit, ...rest } = navigation;\n\n        const dispatch = (\n          action: NavigationAction | ((state: State) => NavigationAction)\n        ) => {\n          const payload =\n            typeof action === 'function' ? action(getState()) : action;\n\n          navigation.dispatch(\n            typeof payload === 'object' && payload != null\n              ? { source: route.key, ...payload }\n              : payload\n          );\n        };\n\n        const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n          (acc, name) => {\n            // @ts-expect-error: name is a valid key, but TypeScript is dumb\n            acc[name] = (...args: any) => dispatch(actions[name](...args));\n            return acc;\n          },\n          {}\n        );\n\n        acc[route.key] = {\n          ...rest,\n          ...helpers,\n          ...emitter.create(route.key),\n          dispatch,\n          setOptions: (options: object) =>\n            setOptions((o) => ({\n              ...o,\n              [route.key]: { ...o[route.key], ...options },\n            })),\n          isFocused: () => {\n            const state = getState();\n\n            if (state.routes[state.index].key !== route.key) {\n              return false;\n            }\n\n            // If the current screen is focused, we also need to check if parent navigator is focused\n            // This makes sure that we return the focus state in the whole tree, not just this navigator\n            return navigation ? navigation.isFocused() : true;\n          },\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  return cache.current;\n}\n"]}