{"version":3,"sources":["AnimatedSet.js"],"names":["AnimatedNode","constructor","what","value","type","toString","__onEvaluate","newValue"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AACA,IAAA,IAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;IAEA,W;;;;;AAIEC,uBAAW,IAAXA,EAAW,KAAXA,EAAyB;AAAA;;AAAA;AACvB,KAAA,GAAA,UAAA,CAAA,OAAA,EACEC,IAAI,YAAYF,aAAAA,CADlB,OAAA,EAAA,kFAAA,MAAA,CAAA,IAAA,CAAA;AAIA,KAAA,GAAA,UAAA,CAAA,OAAA,EACEG,KAAK,YAAYH,aAAAA,CADnB,OAAA,EAAA,qGAAA,MAAA,CAAA,KAAA,CAAA;AAIA,8BAAM;AAAEI,MAAAA,IAAI,EAAN,KAAA;AAAeF,MAAAA,IAAf,EAAeA,IAAf;AAAqBC,MAAAA,KAAAA,EAAAA;AAArB,KAAN,EAAoC,CAApC,KAAoC,CAApC;;AATuB,IAAA,eAAA,8CAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,8CAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;AAUvB,KAAA,GAAA,UAAA,CAAA,OAAA,EAAU,CAACD,IAAI,CAAf,SAAA,EAAA,oCAAA;AACA,UAAA,KAAA,GAAA,IAAA;AACA,UAAA,MAAA,GAAA,KAAA;AAZuB;AAaxB;;;;WAEDG,oBAAW;AACT,aAAA,oBAAA,MAAA,CAA2B,KAA3B,QAAA,CAAA;AACD;;;WAEDC,wBAAe;AACb,UAAMC,QAAQ,GAAG,CAAA,GAAA,IAAA,CAAA,GAAA,EAAI,KAArB,MAAiB,CAAjB;;AACA,WAAA,KAAA,CAAA,QAAA,CAAA,QAAA;;AACA,aAAA,QAAA;AACD;;;EA3BuBP,aAAAA,CAA1B,O;;AA8BO,SAAA,iBAAA,CAAA,IAAA,EAAA,KAAA,EAAwC;AAC7C,SAAO,IAAA,WAAA,CAAA,IAAA,EAAsB,CAAA,GAAA,cAAA,CAAA,KAAA,EAA7B,KAA6B,CAAtB,CAAP;AACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport { adapt } from '../core/AnimatedBlock';\n\nclass AnimatedSet extends AnimatedNode {\n  _what;\n  _value;\n\n  constructor(what, value) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: Animated.set first argument should be of type AnimatedNode but got ${what}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got ${value}`\n    );\n    super({ type: 'set', what, value }, [value]);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    this._what = what;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedSet, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const newValue = val(this._value);\n    this._what.setValue(newValue);\n    return newValue;\n  }\n}\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}\n"]}