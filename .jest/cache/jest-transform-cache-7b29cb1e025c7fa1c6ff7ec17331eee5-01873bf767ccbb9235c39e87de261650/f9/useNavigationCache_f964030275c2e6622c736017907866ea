b0d5dabb0d60380ba1bdfe1de03b6cb9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _excluded = ["emit"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useNavigationCache;

var React = _interopRequireWildcard(require("react"));

var _routers = require("@react-navigation/routers");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function useNavigationCache(_ref) {
  var state = _ref.state,
      getState = _ref.getState,
      navigation = _ref.navigation,
      _setOptions = _ref.setOptions,
      router = _ref.router,
      emitter = _ref.emitter;
  var cache = React.useMemo(function () {
    return {
      current: {}
    };
  }, [getState, navigation, _setOptions, router, emitter]);
  var actions = (0, _extends3.default)({}, router.actionCreators, _routers.CommonActions);
  cache.current = state.routes.reduce(function (acc, route) {
    var previous = cache.current[route.key];

    if (previous) {
      acc[route.key] = previous;
    } else {
      var emit = navigation.emit,
          rest = (0, _objectWithoutProperties2.default)(navigation, _excluded);

      var dispatch = function dispatch(action) {
        var payload = typeof action === 'function' ? action(getState()) : action;
        navigation.dispatch(typeof payload === 'object' && payload != null ? (0, _extends3.default)({
          source: route.key
        }, payload) : payload);
      };

      var helpers = Object.keys(actions).reduce(function (acc, name) {
        acc[name] = function () {
          return dispatch(actions[name].apply(actions, arguments));
        };

        return acc;
      }, {});
      acc[route.key] = (0, _extends3.default)({}, rest, helpers, emitter.create(route.key), {
        dispatch: dispatch,
        setOptions: function setOptions(options) {
          return _setOptions(function (o) {
            return (0, _extends3.default)({}, o, (0, _defineProperty2.default)({}, route.key, (0, _extends3.default)({}, o[route.key], options)));
          });
        },
        isFocused: function isFocused() {
          var state = getState();

          if (state.routes[state.index].key !== route.key) {
            return false;
          }

          return navigation ? navigation.isFocused() : true;
        }
      });
    }

    return acc;
  }, {});
  return cache.current;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,