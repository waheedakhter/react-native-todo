{"version":3,"sources":["padCharsEnd.js"],"names":["exports","__esModule","padEndPonyfill","padEndInvoker","_ramda","require","_String","_interopRequireDefault","_isFunction","obj","curry","flip","invoker","padCharsEnd","String","prototype","padEnd","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,cAAR,GAAyBF,OAAO,CAACG,aAAR,GAAwBH,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA3E;;AAEA,IAAII,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACF,OAAO,CAAC,oCAAD,CAAR,CAApC;;AAEA,IAAIG,WAAW,GAAGD,sBAAsB,CAACF,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACR,UAAX,GAAwBQ,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,IAAIP,cAAc,GAAG,CAAC,GAAGE,MAAM,CAACM,KAAX,EAAkBJ,OAAO,CAAC,SAAD,CAAzB,CAArB;AACAN,OAAO,CAACE,cAAR,GAAyBA,cAAzB;AACA,IAAIC,aAAa,GAAG,CAAC,GAAGC,MAAM,CAACO,IAAX,EAAiB,CAAC,GAAGP,MAAM,CAACQ,OAAX,EAAoB,CAApB,EAAuB,QAAvB,CAAjB,CAApB;AAyBAZ,OAAO,CAACG,aAAR,GAAwBA,aAAxB;AACA,IAAIU,WAAW,GAAG,CAAC,GAAGL,WAAW,CAAC,SAAD,CAAf,EAA4BM,MAAM,CAACC,SAAP,CAAiBC,MAA7C,IAAuDb,aAAvD,GAAuED,cAAzF;AACA,IAAIe,QAAQ,GAAGJ,WAAf;AACAb,OAAO,CAAC,SAAD,CAAP,GAAqBiB,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.padEndPonyfill = exports.padEndInvoker = exports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _String = _interopRequireDefault(require(\"./internal/ponyfills/String.padEnd\"));\n\nvar _isFunction = _interopRequireDefault(require(\"./isFunction\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar padEndPonyfill = (0, _ramda.curry)(_String[\"default\"]);\nexports.padEndPonyfill = padEndPonyfill;\nvar padEndInvoker = (0, _ramda.flip)((0, _ramda.invoker)(2, 'padEnd'));\n/**\n * The function pads the current string with a given string\n * (repeated, if needed) so that the resulting string reaches a given length.\n * The padding is applied from the end of the current string.\n *\n * @func padCharsEnd\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category String\n * @sig String -> Number -> String -> String\n * @param {string} padString The string to pad the current string with\n * @param {number} targetLength The length of the resulting string once\n * the current string has been padded\n * @param {string} value String value to be padded\n * @return {string} A new string of the specified length with the pad string\n * applied at the end of the current string\n * @see {@link RA.padEnd|padEnd}, {@link RA.padCharsStart|padCharsStart}, {@link RA.padStart|padStart}\n * @example\n *\n * RA.padCharsEnd('-', 3, 'a'); // => 'a--'\n * RA.padCharsEnd('foo', 10, 'abc'); // => 'abcfoofoof'\n * RA.padCharsEnd('123456', 6, 'abc'); // => 'abc123'\n */\n\nexports.padEndInvoker = padEndInvoker;\nvar padCharsEnd = (0, _isFunction[\"default\"])(String.prototype.padEnd) ? padEndInvoker : padEndPonyfill;\nvar _default = padCharsEnd;\nexports[\"default\"] = _default;"]}