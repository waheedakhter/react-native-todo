{"version":3,"sources":["lensNotEq.js"],"names":["exports","__esModule","_ramda","require","_lensEq","_interopRequireDefault","obj","lensNotEq","complement","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACF,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAuBjG,IAAIC,SAAS,GAAG,CAAC,GAAGL,MAAM,CAACM,UAAX,EAAuBJ,OAAO,CAAC,SAAD,CAA9B,CAAhB;AACA,IAAIK,QAAQ,GAAGF,SAAf;AACAP,OAAO,CAAC,SAAD,CAAP,GAAqBS,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _lensEq = _interopRequireDefault(require(\"./lensEq\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Returns `true` if data structure focused by the given lens doesn't equal provided value.\n *\n * @func lensNotEq\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|1.13.0}\n * @category Relation\n * @typedef Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> b -> s -> Boolean\n * @see {@link RA.lensEq|lensEq}\n * @param {function} lens Van Laarhoven lens\n * @param {*} value The value to compare the focused data structure with\n * @param {*} data The data structure\n * @return {boolean} `false` if the focused data structure equals value, `true` otherwise\n *\n * @example\n *\n * RA.lensNotEq(R.lensIndex(0), 1, [0, 1, 2]); // => true\n * RA.lensNotEq(R.lensIndex(1), 1, [0, 1, 2]); // => false\n * RA.lensNotEq(R.lensPath(['a', 'b']), 'foo', { a: { b: 'foo' } }) // => false\n */\nvar lensNotEq = (0, _ramda.complement)(_lensEq[\"default\"]);\nvar _default = lensNotEq;\nexports[\"default\"] = _default;"]}