c3f4c1c2580fdd650738ac32c1492cc8
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Observable_1 = require("../Observable");

var isArray_1 = require("../util/isArray");

var map_1 = require("../operators/map");

var isObject_1 = require("../util/isObject");

var from_1 = require("./from");

function forkJoin() {
  var sources = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    sources[_i] = arguments[_i];
  }

  if (sources.length === 1) {
    var first_1 = sources[0];

    if (isArray_1.isArray(first_1)) {
      return forkJoinInternal(first_1, null);
    }

    if (isObject_1.isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {
      var keys = Object.keys(first_1);
      return forkJoinInternal(keys.map(function (key) {
        return first_1[key];
      }), keys);
    }
  }

  if (typeof sources[sources.length - 1] === 'function') {
    var resultSelector_1 = sources.pop();
    sources = sources.length === 1 && isArray_1.isArray(sources[0]) ? sources[0] : sources;
    return forkJoinInternal(sources, null).pipe(map_1.map(function (args) {
      return resultSelector_1.apply(void 0, args);
    }));
  }

  return forkJoinInternal(sources, null);
}

exports.forkJoin = forkJoin;

function forkJoinInternal(sources, keys) {
  return new Observable_1.Observable(function (subscriber) {
    var len = sources.length;

    if (len === 0) {
      subscriber.complete();
      return;
    }

    var values = new Array(len);
    var completed = 0;
    var emitted = 0;

    var _loop_1 = function _loop_1(i) {
      var source = from_1.from(sources[i]);
      var hasValue = false;
      subscriber.add(source.subscribe({
        next: function next(value) {
          if (!hasValue) {
            hasValue = true;
            emitted++;
          }

          values[i] = value;
        },
        error: function error(err) {
          return subscriber.error(err);
        },
        complete: function complete() {
          completed++;

          if (completed === len || !hasValue) {
            if (emitted === len) {
              subscriber.next(keys ? keys.reduce(function (result, key, i) {
                return result[key] = values[i], result;
              }, {}) : values);
            }

            subscriber.complete();
          }
        }
      }));
    };

    for (var i = 0; i < len; i++) {
      _loop_1(i);
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcm5hbC9vYnNlcnZhYmxlL2ZvcmtKb2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUEsWUFBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUE7O0FBRUEsSUFBQSxTQUFBLEdBQUEsT0FBQSxDQUFBLGlCQUFBLENBQUE7O0FBQ0EsSUFBQSxLQUFBLEdBQUEsT0FBQSxDQUFBLGtCQUFBLENBQUE7O0FBQ0EsSUFBQSxVQUFBLEdBQUEsT0FBQSxDQUFBLGtCQUFBLENBQUE7O0FBRUEsSUFBQSxNQUFBLEdBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQTs7QUFzSUEsU0FBZ0IsUUFBaEIsR0FBd0I7QUFDdEIsTUFBQSxPQUFBLEdBQUEsRUFBQTs7T0FBQSxJQUFBLEVBQUEsR0FBQSxDLEVBQUEsRUFBQSxHQUFBLFNBQUEsQ0FBQSxNLEVBQUEsRUFBQSxFLEVBQWlCO0FBQWpCLElBQUEsT0FBQSxDQUFBLEVBQUEsQ0FBQSxHQUFBLFNBQUEsQ0FBQSxFQUFBLENBQUE7OztBQUVBLE1BQUksT0FBTyxDQUFDLE1BQVIsS0FBbUIsQ0FBdkIsRUFBMEI7QUFDeEIsUUFBTSxPQUFLLEdBQUcsT0FBTyxDQUFDLENBQUQsQ0FBckI7O0FBQ0EsUUFBSSxTQUFBLENBQUEsT0FBQSxDQUFRLE9BQVIsQ0FBSixFQUFvQjtBQUNsQixhQUFPLGdCQUFnQixDQUFDLE9BQUQsRUFBUSxJQUFSLENBQXZCO0FBQ0Q7O0FBRUQsUUFBSSxVQUFBLENBQUEsUUFBQSxDQUFTLE9BQVQsS0FBbUIsTUFBTSxDQUFDLGNBQVAsQ0FBc0IsT0FBdEIsTUFBaUMsTUFBTSxDQUFDLFNBQS9ELEVBQTBFO0FBQ3hFLFVBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFQLENBQVksT0FBWixDQUFiO0FBQ0EsYUFBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBTCxDQUFTLFVBQUEsR0FBQSxFQUFHO0FBQUksZUFBQSxPQUFLLENBQUwsR0FBSyxDQUFMO0FB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