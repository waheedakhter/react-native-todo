{"version":3,"sources":["into.js"],"names":["_clone","require","_curry3","_isTransformer","_reduce","_stepCat","into","acc","xf","list","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAEVC,OAAO,CAAC,mBAAD,CAFP;;AAIA,IAAIC,OAAO,GAEXD,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIE,cAAc,GAElBF,OAAO,CAAC,2BAAD,CAFP;;AAIA,IAAIG,OAAO,GAEXH,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAII,QAAQ,GAEZJ,OAAO,CAAC,qBAAD,CAFP;;AA4CA,IAAIK,IAAI,GAERJ,OAAO,CAAC,SAASI,IAAT,CAAcC,GAAd,EAAmBC,EAAnB,EAAuBC,IAAvB,EAA6B;AACnC,SAAON,cAAc,CAACI,GAAD,CAAd,GAAsBH,OAAO,CAACI,EAAE,CAACD,GAAD,CAAH,EAAUA,GAAG,CAAC,mBAAD,CAAH,EAAV,EAAsCE,IAAtC,CAA7B,GAA2EL,OAAO,CAACI,EAAE,CAACH,QAAQ,CAACE,GAAD,CAAT,CAAH,EAAoBP,MAAM,CAACO,GAAD,EAAM,EAAN,EAAU,EAAV,EAAc,KAAd,CAA1B,EAAgDE,IAAhD,CAAzF;AACD,CAFM,CAFP;;AAMAC,MAAM,CAACC,OAAP,GAAiBL,IAAjB","sourcesContent":["var _clone =\n/*#__PURE__*/\nrequire(\"./internal/_clone\");\n\nvar _curry3 =\n/*#__PURE__*/\nrequire(\"./internal/_curry3\");\n\nvar _isTransformer =\n/*#__PURE__*/\nrequire(\"./internal/_isTransformer\");\n\nvar _reduce =\n/*#__PURE__*/\nrequire(\"./internal/_reduce\");\n\nvar _stepCat =\n/*#__PURE__*/\nrequire(\"./internal/_stepCat\");\n/**\n * Transforms the items of the list with the transducer and appends the\n * transformed items to the accumulator using an appropriate iterator function\n * based on the accumulator type.\n *\n * The accumulator can be an array, string, object or a transformer. Iterated\n * items will be appended to arrays and concatenated to strings. Objects will\n * be merged directly or 2-item arrays will be merged as key, value pairs.\n *\n * The accumulator can also be a transformer object that provides a 2-arity\n * reducing iterator function, step, 0-arity initial value function, init, and\n * 1-arity result extraction function result. The step function is used as the\n * iterator function in reduce. The result function is used to convert the\n * final accumulator into the return type and in most cases is R.identity. The\n * init function is used to provide the initial accumulator.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the\n * transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig a -> (b -> b) -> [c] -> a\n * @param {*} acc The initial accumulator value.\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.transduce\n * @example\n *\n *      const numbers = [1, 2, 3, 4];\n *      const transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.into([], transducer, numbers); //=> [2, 3]\n *\n *      const intoArray = R.into([]);\n *      intoArray(transducer, numbers); //=> [2, 3]\n */\n\n\nvar into =\n/*#__PURE__*/\n_curry3(function into(acc, xf, list) {\n  return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n});\n\nmodule.exports = into;"]}