{"version":3,"sources":["isIterable.js"],"names":["exports","__esModule","_ramda","require","_isFunction","_interopRequireDefault","obj","isIterable","curryN","val","Symbol","hasIn","iterator","Object","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACF,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAwBjG,IAAIC,UAAU,GAAG,CAAC,GAAGL,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsB,UAAUC,GAAV,EAAe;AACpD,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,KAAP;AACD;;AAED,SAAO,CAAC,GAAGR,MAAM,CAACS,KAAX,EAAkBD,MAAM,CAACE,QAAzB,EAAmCC,MAAM,CAACJ,GAAD,CAAzC,KAAmD,CAAC,GAAGL,WAAW,CAAC,SAAD,CAAf,EAA4BK,GAAG,CAACC,MAAM,CAACE,QAAR,CAA/B,CAA1D;AACD,CANgB,CAAjB;AAOA,IAAIE,QAAQ,GAAGP,UAAf;AACAP,OAAO,CAAC,SAAD,CAAP,GAAqBc,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isFunction = _interopRequireDefault(require(\"./isFunction\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Checks whether the passed value is iterable.\n *\n * @func isIterable\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.18.0|v2.18.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol}\n * @return {boolean}\n * @example\n *\n * RA.isIterable(['arrays', 'are', 'iterable']); //=> true\n * RA.isIterable('strings are iterable, too'); //=> true\n * RA.isIterable((function* () {})()); //=> true (generator objects are both iterable and iterators)\n *\n * RA.isIterable({}); //=> false\n * RA.isIterable(-0); //=> false\n * RA.isIterable(null); //=> false\n * RA.isIterable(undefined); //=> false\n */\nvar isIterable = (0, _ramda.curryN)(1, function (val) {\n  if (typeof Symbol === 'undefined') {\n    return false;\n  }\n\n  return (0, _ramda.hasIn)(Symbol.iterator, Object(val)) && (0, _isFunction[\"default\"])(val[Symbol.iterator]);\n});\nvar _default = isIterable;\nexports[\"default\"] = _default;"]}