{"version":3,"sources":["reduceWhile.js"],"names":["_curryN","require","_reduce","_reduced","reduceWhile","_reduceWhile","pred","fn","a","list","acc","x","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAEXC,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIC,OAAO,GAEXD,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIE,QAAQ,GAEZF,OAAO,CAAC,qBAAD,CAFP;;AAkCA,IAAIG,WAAW,GAEfJ,OAAO,CAAC,CAAD,EAAI,EAAJ,EAAQ,SAASK,YAAT,CAAsBC,IAAtB,EAA4BC,EAA5B,EAAgCC,CAAhC,EAAmCC,IAAnC,EAAyC;AACtD,SAAOP,OAAO,CAAC,UAAUQ,GAAV,EAAeC,CAAf,EAAkB;AAC/B,WAAOL,IAAI,CAACI,GAAD,EAAMC,CAAN,CAAJ,GAAeJ,EAAE,CAACG,GAAD,EAAMC,CAAN,CAAjB,GAA4BR,QAAQ,CAACO,GAAD,CAA3C;AACD,GAFa,EAEXF,CAFW,EAERC,IAFQ,CAAd;AAGD,CAJM,CAFP;;AAQAG,MAAM,CAACC,OAAP,GAAiBT,WAAjB","sourcesContent":["var _curryN =\n/*#__PURE__*/\nrequire(\"./internal/_curryN\");\n\nvar _reduce =\n/*#__PURE__*/\nrequire(\"./internal/_reduce\");\n\nvar _reduced =\n/*#__PURE__*/\nrequire(\"./internal/_reduced\");\n/**\n * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating\n * through the list, successively calling the iterator function. `reduceWhile`\n * also takes a predicate that is evaluated before each step. If the predicate\n * returns `false`, it \"short-circuits\" the iteration and returns the current\n * value of the accumulator.\n *\n * @func\n * @memberOf R\n * @since v0.22.0\n * @category List\n * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} pred The predicate. It is passed the accumulator and the\n *        current element.\n * @param {Function} fn The iterator function. Receives two values, the\n *        accumulator and the current element.\n * @param {*} a The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced\n * @example\n *\n *      const isOdd = (acc, x) => x % 2 === 1;\n *      const xs = [1, 3, 5, 60, 777, 800];\n *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n *\n *      const ys = [2, 4, 6]\n *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n */\n\n\nvar reduceWhile =\n/*#__PURE__*/\n_curryN(4, [], function _reduceWhile(pred, fn, a, list) {\n  return _reduce(function (acc, x) {\n    return pred(acc, x) ? fn(acc, x) : _reduced(acc);\n  }, a, list);\n});\n\nmodule.exports = reduceWhile;"]}