{"version":3,"sources":["useIsFocused.tsx"],"names":["navigation","valueToReturn","isFocused","setIsFocused","React","unsubscribeFocus","unsubscribeBlur"],"mappings":";;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMe,SAAA,YAAA,GAAiC;AAC9C,MAAMA,UAAU,GAAG,CAAA,GAAA,cAAA,CAAnB,OAAmB,GAAnB;;AACA,aAAkC,CAAA,GAAA,KAAA,CAAA,QAAA,EAASA,UAAU,CAArD,SAAkC,CAAlC;AAAA;AAAA,MAAM,SAAN;AAAA,MAAM,YAAN;;AAEA,MAAMC,aAAa,GAAGD,UAAU,CAAhC,SAAsBA,EAAtB;;AAEA,MAAIE,SAAS,KAAb,aAAA,EAAiC;AAM/BC,IAAAA,YAAY,CAAZA,aAAY,CAAZA;AACD;;AAEDC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMC,gBAAgB,GAAGL,UAAU,CAAVA,WAAAA,CAAAA,OAAAA,EAAgC;AAAA,aACvDG,YAAY,CADd,IACc,CAD2C;AAAA,KAAhCH,CAAzB;AAIA,QAAMM,eAAe,GAAGN,UAAU,CAAVA,WAAAA,CAAAA,MAAAA,EAA+B;AAAA,aACrDG,YAAY,CADd,KACc,CADyC;AAAA,KAA/BH,CAAxB;AAIA,WAAO,YAAM;AACXK,MAAAA,gBAAgB;AAChBC,MAAAA,eAAe;AAFjB,KAAA;AATFF,GAAAA,EAaG,CAbHA,UAaG,CAbHA;AAeAA,EAAAA,KAAK,CAALA,aAAAA,CAAAA,aAAAA;AAEA,SAAA,aAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n\n  const valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () =>\n      setIsFocused(true)\n    );\n\n    const unsubscribeBlur = navigation.addListener('blur', () =>\n      setIsFocused(false)\n    );\n\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n\n  React.useDebugValue(valueToReturn);\n\n  return valueToReturn;\n}\n"]}