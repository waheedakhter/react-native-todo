d0a80bc555b405ca926f3cf26eee80ac
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

exports.__esModule = true;
exports["default"] = void 0;
exports.defaultMergeProps = defaultMergeProps;
exports.whenMergePropsIsFunction = whenMergePropsIsFunction;
exports.whenMergePropsIsOmitted = whenMergePropsIsOmitted;
exports.wrapMergePropsFunc = wrapMergePropsFunc;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _verifyPlainObject = _interopRequireDefault(require("../utils/verifyPlainObject"));

function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return (0, _extends2["default"])({}, ownProps, stateProps, dispatchProps);
}

function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName,
        pure = _ref.pure,
        areMergedPropsEqual = _ref.areMergedPropsEqual;
    var hasRunOnce = false;
    var mergedProps;
    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;
        if (process.env.NODE_ENV !== 'production') (0, _verifyPlainObject["default"])(mergedProps, displayName, 'mergeProps');
      }

      return mergedProps;
    };
  };
}

function whenMergePropsIsFunction(mergeProps) {
  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
}

function whenMergePropsIsOmitted(mergeProps) {
  return !mergeProps ? function () {
    return defaultMergeProps;
  } : undefined;
}

var _default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lcmdlUHJvcHMuanMiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHRNZXJnZVByb3BzIiwid2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uIiwid2hlbk1lcmdlUHJvcHNJc09taXR0ZWQiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJfZXh0ZW5kczIiLCJfdmVyaWZ5UGxhaW5PYmplY3QiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsIm93blByb3BzIiwibWVyZ2VQcm9wcyIsImluaXRNZXJnZVByb3BzUHJveHkiLCJkaXNwYXRjaCIsIl9yZWYiLCJkaXNwbGF5TmFtZSIsInB1cmUiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm1lcmdlZFByb3BzIiwibWVyZ2VQcm9wc1Byb3h5IiwibmV4dE1lcmdlZFByb3BzIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwidW5kZWZpbmVkIiwiX2RlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQUQsQ0FBUCxDQUF3RCxTQUF4RCxDQUE3Qjs7QUFFQUMsT0FBTyxDQUFDQyxVQUFSLEdBQXFCLElBQXJCO0FBQ0FELE9BQU8sQ0FBQyxTQUFELENBQVAsR0FBcUIsS0FBSyxDQUExQjtBQUNBQSxPQUFPLENBQUNFLGlCQUFSLEdBQTRCQSxpQkFBNUI7QUFDQUYsT0FBTyxDQUFDRyx3QkFBUixHQUFtQ0Esd0JBQW5DO0FBQ0FILE9BQU8sQ0FBQ0ksdUJBQVIsR0FBa0NBLHVCQUFsQztBQUNBSixPQUFPLENBQUNLLGtCQUFSLEdBQTZCQSxrQkFBN0I7O0FBRUEsSUFBSUMsU0FBUyxHQUFHUixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGdDQUFELENBQVIsQ0FBdEM7O0FBRUEsSUFBSVEsa0JBQWtCLEdBQUdULHNCQUFzQixDQUFDQyxPQUFPLENBQUMsNEJBQUQsQ0FBUixDQUEvQzs7QUFFQSxTQUFTRyxpQkFBVCxDQUEyQk0sVUFBM0IsRUFBdUNDLGFBQXZDLEVBQXNEQyxRQUF0RCxFQUFnRTtBQUM5RCxTQUFPLENBQUMsR0FBR0osU0FBUyxDQUFDLFNBQUQsQ0FBYixFQUEwQixFQUExQixFQUE4QkksUUFBOUIsRUFBd0NGLFVBQXhDLEVBQW9EQyxhQUFwRCxDQUFQO0FBQ0Q7O0FBRUQsU0FBU0osa0JBQVQsQ0FBNEJNLFVBQTVCLEVBQXdDO0FBQ3RDLFNBQU8sU0FBU0MsbUJBQVQsQ0FBNkJDLFFBQTdCLEVBQXVDQyxJQUF2QyxFQUE2QztBQUNsRCxRQUFJQyxXQUFXLEdBQUdELElBQUksQ0FBQ0MsV0FBdkI7QUFBQSxRQUNJQyxJQUFJLEdBQUdGLElBQUksQ0FBQ0UsSUFEaEI7QUFBQSxRQUVJQyxtQkFBbUIsR0FBR0gsSUFBSSxDQUFDRyxtQkFGL0I7QUFHQSxRQUFJQyxVQUFVLEdBQUcsS0FBakI7QUFDQSxRQUFJQyxXQUFKO0FBQ0EsV0FBTyxTQUFTQyxlQUFULENBQXlCWixVQUF6QixFQUFxQ0MsYUFBckMsRUFBb0RDLFFBQXBELEVBQThEO0FBQ25FLFVBQUlXLGVBQWUsR0FBR1YsVUFBVSxDQUFDSCxVQUFELEVBQWFDLGFBQWIsRUFBNEJDLFFBQTVCLENBQWhDOztBQUVBLFVBQUlRLFVBQUosRUFBZ0I7QUFDZCxZQUFJLENBQUNGLElBQUQsSUFBUyxDQUFDQyxtQkFBbUIsQ0FBQ0ksZUFBRCxFQUFrQkYsV0FBbEIsQ0FBakMsRUFBaUVBLFdBQVcsR0FBR0UsZUFBZDtBQUNsRSxPQUZELE1BRU87QUFDTEgsUUFBQUEsVUFBVSxHQUFHLElBQWI7QUFDQUMsUUFBQUEsV0FBVyxHQUFHRSxlQUFkO0FBQ0EsWUFBSUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFFBQVosS0FBeUIsWUFBN0IsRUFBMkMsQ0FBQyxHQUFHakIsa0JBQWtCLENBQUMsU0FBRCxDQUF0QixFQUFtQ1ksV0FBbkMsRUFBZ0RKLFdBQWhELEVBQTZELFlBQTdEO0FBQzVDOztBQUVELGFBQU9JLFdBQVA7QUFDRCxLQVpEO0FBYUQsR0FuQkQ7QUFvQkQ7O0FBRUQsU0FBU2hCLHdCQUFULENBQWtDUSxVQUFsQyxFQUE4QztBQUM1QyxTQUFPLE9BQU9BLFVBQVAsS0FBc0IsVUFBdEIsR0FBbUNOLGtCQUFrQixDQUFDTSxVQUFELENBQXJELEdBQW9FYyxTQUEzRTtBQUNEOztBQUVELFNBQVNyQix1QkFBVCxDQUFpQ08sVUFBakMsRUFBNkM7QUFDM0MsU0FBTyxDQUFDQSxVQUFELEdBQWMsWUFBWTtBQUMvQixXQUFPVCxpQkFBUDtBQUNELEdBRk0sR0FFSHVCLFNBRko7QUFHRDs7QUFFRCxJQUFJQyxRQUFRLEdBQUcsQ0FBQ3ZCLHdCQUFELEVBQTJCQyx1QkFBM0IsQ0FBZjtBQUNBSixPQUFPLENBQUMsU0FBRCxDQUFQLEdBQXFCMEIsUUFBckIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIilbXCJkZWZhdWx0XCJdO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5leHBvcnRzLmRlZmF1bHRNZXJnZVByb3BzID0gZGVmYXVsdE1lcmdlUHJvcHM7XG5leHBvcnRzLndoZW5NZXJnZVByb3BzSXNGdW5jdGlvbiA9IHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbjtcbmV4cG9ydHMud2hlbk1lcmdlUHJvcHNJc09taXR0ZWQgPSB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZDtcbmV4cG9ydHMud3JhcE1lcmdlUHJvcHNGdW5jID0gd3JhcE1lcmdlUHJvcHNGdW5jO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF92ZXJpZnlQbGFpbk9iamVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0XCIpKTtcblxuZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgb3duUHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpO1xufVxuXG5mdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICAgIHB1cmUgPSBfcmVmLnB1cmUsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmLmFyZU1lcmdlZFByb3BzRXF1YWw7XG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgKDAsIF92ZXJpZnlQbGFpbk9iamVjdFtcImRlZmF1bHRcIl0pKG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuXG52YXIgX2RlZmF1bHQgPSBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyJdfQ==