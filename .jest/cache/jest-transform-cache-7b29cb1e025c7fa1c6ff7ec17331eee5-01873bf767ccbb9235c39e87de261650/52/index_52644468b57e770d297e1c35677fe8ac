4675152711eb10f4a103255db01c6af5
'use strict';

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault2(require("@babel/runtime/regenerator"));

var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));

var _wrapNativeSuper2 = _interopRequireDefault2(require("@babel/runtime/helpers/wrapNativeSuper"));

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _emittery() {
  var data = _interopRequireDefault(require('emittery'));

  _emittery = function _emittery() {
    return data;
  };

  return data;
}

function _exit() {
  var data = _interopRequireDefault(require('exit'));

  _exit = function _exit() {
    return data;
  };

  return data;
}

function _throat() {
  var data = _interopRequireDefault(require('throat'));

  _throat = function _throat() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

function _jestWorker() {
  var data = require('jest-worker');

  _jestWorker = function _jestWorker() {
    return data;
  };

  return data;
}

var _runTest = _interopRequireDefault(require('./runTest'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var TEST_WORKER_PATH = require.resolve('./testWorker');

var TestRunner = function () {
  function TestRunner(globalConfig, context) {
    (0, _classCallCheck2.default)(this, TestRunner);

    _defineProperty(this, '_globalConfig', void 0);

    _defineProperty(this, '_context', void 0);

    _defineProperty(this, 'eventEmitter', new (_emittery().default)());

    _defineProperty(this, '__PRIVATE_UNSTABLE_API_supportsEventEmitters__', true);

    _defineProperty(this, 'isSerial', void 0);

    this._globalConfig = globalConfig;
    this._context = context || {};
  }

  (0, _createClass2.default)(TestRunner, [{
    key: "runTests",
    value: function runTests(tests, watcher, onStart, onResult, onFailure, options) {
      return _regenerator.default.async(function runTests$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _regenerator.default.awrap(options.serial ? this._createInBandTestRun(tests, watcher, onStart, onResult, onFailure) : this._createParallelTestRun(tests, watcher, onStart, onResult, onFailure));

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "_createInBandTestRun",
    value: function _createInBandTestRun(tests, watcher, onStart, onResult, onFailure) {
      var _this = this;

      var mutex;
      return _regenerator.default.async(function _createInBandTestRun$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              process.env.JEST_WORKER_ID = '1';
              mutex = (0, _throat().default)(1);
              return _context3.abrupt("return", tests.reduce(function (promise, test) {
                return mutex(function () {
                  return promise.then(function _callee() {
                    var sendMessageToJest;
                    return _regenerator.default.async(function _callee$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            if (!watcher.isInterrupted()) {
                              _context2.next = 2;
                              break;
                            }

                            throw new CancelRun();

                          case 2:
                            if (!onStart) {
                              _context2.next = 8;
                              break;
                            }

                            _context2.next = 5;
                            return _regenerator.default.awrap(onStart(test));

                          case 5:
                            return _context2.abrupt("return", (0, _runTest.default)(test.path, _this._globalConfig, test.context.config, test.context.resolver, _this._context, undefined));

                          case 8:
                            sendMessageToJest = function sendMessageToJest(eventName, args) {
                              return _this.eventEmitter.emit(eventName, (0, _jestUtil().deepCyclicCopy)(args, {
                                keepPrototype: false
                              }));
                            };

                            _context2.next = 11;
                            return _regenerator.default.awrap(_this.eventEmitter.emit('test-file-start', [test]));

                          case 11:
                            return _context2.abrupt("return", (0, _runTest.default)(test.path, _this._globalConfig, test.context.config, test.context.resolver, _this._context, sendMessageToJest));

                          case 12:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, null, null, null, Promise);
                  }).then(function (result) {
                    if (onResult) {
                      return onResult(test, result);
                    } else {
                      return _this.eventEmitter.emit('test-file-success', [test, result]);
                    }
                  }).catch(function (err) {
                    if (onFailure) {
                      return onFailure(test, err);
                    } else {
                      return _this.eventEmitter.emit('test-file-failure', [test, err]);
                    }
                  });
                });
              }, Promise.resolve()));

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "_createParallelTestRun",
    value: function _createParallelTestRun(tests, watcher, onStart, onResult, onFailure) {
      var _this2 = this;

      var resolvers, _iterator, _step, test, worker, mutex, runTestInWorker, onError, onInterrupt, runAllTests, cleanup;

      return _regenerator.default.async(function _createParallelTestRun$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              resolvers = new Map();

              for (_iterator = _createForOfIteratorHelperLoose(tests); !(_step = _iterator()).done;) {
                test = _step.value;

                if (!resolvers.has(test.context.config.name)) {
                  resolvers.set(test.context.config.name, {
                    config: test.context.config,
                    serializableModuleMap: test.context.moduleMap.toJSON()
                  });
                }
              }

              worker = new (_jestWorker().Worker)(TEST_WORKER_PATH, {
                exposedMethods: ['worker'],
                forkOptions: {
                  stdio: 'pipe'
                },
                maxRetries: 3,
                numWorkers: this._globalConfig.maxWorkers,
                setupArgs: [{
                  serializableResolvers: Array.from(resolvers.values())
                }]
              });
              if (worker.getStdout()) worker.getStdout().pipe(process.stdout);
              if (worker.getStderr()) worker.getStderr().pipe(process.stderr);
              mutex = (0, _throat().default)(this._globalConfig.maxWorkers);

              runTestInWorker = function runTestInWorker(test) {
                return mutex(function _callee2() {
                  var promise;
                  return _regenerator.default.async(function _callee2$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          if (!watcher.isInterrupted()) {
                            _context4.next = 2;
                            break;
                          }

                          return _context4.abrupt("return", Promise.reject());

                        case 2:
                          if (!onStart) {
                            _context4.next = 7;
                            break;
                          }

                          _context4.next = 5;
                          return _regenerator.default.awrap(onStart(test));

                        case 5:
                          _context4.next = 9;
                          break;

                        case 7:
                          _context4.next = 9;
                          return _regenerator.default.awrap(_this2.eventEmitter.emit('test-file-start', [test]));

                        case 9:
                          promise = worker.worker({
                            config: test.context.config,
                            context: (0, _extends2.default)({}, _this2._context, {
                              changedFiles: _this2._context.changedFiles && Array.from(_this2._context.changedFiles),
                              sourcesRelatedToTestsInChangedFiles: _this2._context.sourcesRelatedToTestsInChangedFiles && Array.from(_this2._context.sourcesRelatedToTestsInChangedFiles)
                            }),
                            globalConfig: _this2._globalConfig,
                            path: test.path
                          });

                          if (promise.UNSTABLE_onCustomMessage) {
                            promise.UNSTABLE_onCustomMessage(function (_ref) {
                              var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
                                  event = _ref2[0],
                                  payload = _ref2[1];

                              _this2.eventEmitter.emit(event, payload);
                            });
                          }

                          return _context4.abrupt("return", promise);

                        case 12:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, null, null, null, Promise);
                });
              };

              onError = function _callee3(err, test) {
                return _regenerator.default.async(function _callee3$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        if (!onFailure) {
                          _context5.next = 5;
                          break;
                        }

                        _context5.next = 3;
                        return _regenerator.default.awrap(onFailure(test, err));

                      case 3:
                        _context5.next = 7;
                        break;

                      case 5:
                        _context5.next = 7;
                        return _regenerator.default.awrap(_this2.eventEmitter.emit('test-file-failure', [test, err]));

                      case 7:
                        if (err.type === 'ProcessTerminatedError') {
                          console.error('A worker process has quit unexpectedly! ' + 'Most likely this is an initialization error.');
                          (0, _exit().default)(1);
                        }

                      case 8:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, null, null, null, Promise);
              };

              onInterrupt = new Promise(function (_, reject) {
                watcher.on('change', function (state) {
                  if (state.interrupted) {
                    reject(new CancelRun());
                  }
                });
              });
              runAllTests = Promise.all(tests.map(function (test) {
                return runTestInWorker(test).then(function (result) {
                  if (onResult) {
                    return onResult(test, result);
                  } else {
                    return _this2.eventEmitter.emit('test-file-success', [test, result]);
                  }
                }).catch(function (error) {
                  return onError(error, test);
                });
              }));

              cleanup = function _callee4() {
                var _await$worker$end, forceExited;

                return _regenerator.default.async(function _callee4$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        _context6.next = 2;
                        return _regenerator.default.awrap(worker.end());

                      case 2:
                        _await$worker$end = _context6.sent;
                        forceExited = _await$worker$end.forceExited;

                        if (forceExited) {
                          console.error(_chalk().default.yellow('A worker process has failed to exit gracefully and has been force exited. ' + 'This is likely caused by tests leaking due to improper teardown. ' + 'Try running with --detectOpenHandles to find leaks. ' + 'Active timers can also cause this, ensure that .unref() was called on them.'));
                        }

                      case 5:
                      case "end":
                        return _context6.stop();
                    }
                  }
                }, null, null, null, Promise);
              };

              return _context7.abrupt("return", Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup));

            case 12:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "on",
    value: function on(eventName, listener) {
      return this.eventEmitter.on(eventName, listener);
    }
  }]);
  return TestRunner;
}();

exports.default = TestRunner;

var CancelRun = function (_Error) {
  (0, _inherits2.default)(CancelRun, _Error);

  var _super = _createSuper(CancelRun);

  function CancelRun(message) {
    var _this3;

    (0, _classCallCheck2.default)(this, CancelRun);
    _this3 = _super.call(this, message);
    _this3.name = 'CancelRun';
    return _this3;
  }

  return (0, _createClass2.default)(CancelRun);
}((0, _wrapNativeSuper2.default)(Error));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,