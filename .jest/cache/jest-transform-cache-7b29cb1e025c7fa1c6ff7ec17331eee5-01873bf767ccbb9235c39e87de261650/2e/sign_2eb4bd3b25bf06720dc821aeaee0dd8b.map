{"version":3,"sources":["sign.js"],"names":["exports","__esModule","signPonyfill","_ramda","require","_isFunction","_interopRequireDefault","_Math","obj","curryN","sign","Math","bind","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,YAAR,GAAuBF,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAAjD;;AAEA,IAAIG,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACF,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIG,KAAK,GAAGD,sBAAsB,CAACF,OAAO,CAAC,gCAAD,CAAR,CAAlC;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACP,UAAX,GAAwBO,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,IAAIN,YAAY,GAAG,CAAC,GAAGC,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsBF,KAAK,CAAC,SAAD,CAA3B,CAAnB;AAsBAP,OAAO,CAACE,YAAR,GAAuBA,YAAvB;AACA,IAAIQ,IAAI,GAAG,CAAC,GAAGL,WAAW,CAAC,SAAD,CAAf,EAA4BM,IAAI,CAACD,IAAjC,IAAyC,CAAC,GAAGP,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsB,CAAC,GAAGN,MAAM,CAACS,IAAX,EAAiBD,IAAI,CAACD,IAAtB,EAA4BC,IAA5B,CAAtB,CAAzC,GAAoGT,YAA/G;AACA,IAAIW,QAAQ,GAAGH,IAAf;AACAV,OAAO,CAAC,SAAD,CAAP,GAAqBa,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.signPonyfill = exports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isFunction = _interopRequireDefault(require(\"./isFunction\"));\n\nvar _Math = _interopRequireDefault(require(\"./internal/ponyfills/Math.sign\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar signPonyfill = (0, _ramda.curryN)(1, _Math[\"default\"]);\n/**\n * Returns the sign of a number, indicating whether the number is positive, negative or zero.\n *\n * @func sign\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.15.0|v2.15.0}\n * @category Math\n * @sig Number | String -> Number\n * @param {number} number A number\n * @return {number} A number representing the sign of the given argument. If the argument is a positive number, negative number, positive zero or negative zero, the function will return 1, -1, 0 or -0 respectively. Otherwise, NaN is returned\n * @example\n *\n * RA.sign(3); //  1\n * RA.sign(-3); // -1\n * RA.sign('-3'); // -1\n * RA.sign(0); //  0\n * RA.sign(-0); // -0\n * RA.sign(NaN); // NaN\n * RA.sign('foo'); // NaN\n */\n\nexports.signPonyfill = signPonyfill;\nvar sign = (0, _isFunction[\"default\"])(Math.sign) ? (0, _ramda.curryN)(1, (0, _ramda.bind)(Math.sign, Math)) : signPonyfill;\nvar _default = sign;\nexports[\"default\"] = _default;"]}