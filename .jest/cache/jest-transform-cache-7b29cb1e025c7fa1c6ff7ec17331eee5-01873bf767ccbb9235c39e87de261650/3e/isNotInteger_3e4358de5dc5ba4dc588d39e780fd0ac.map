{"version":3,"sources":["isNotInteger.js"],"names":["exports","__esModule","_ramda","require","_isInteger","_interopRequireDefault","obj","isNotInteger","complement","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACF,OAAO,CAAC,aAAD,CAAR,CAAvC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AA+BjG,IAAIC,YAAY,GAAG,CAAC,GAAGL,MAAM,CAACM,UAAX,EAAuBJ,UAAU,CAAC,SAAD,CAAjC,CAAnB;AACA,IAAIK,QAAQ,GAAGF,YAAf;AACAP,OAAO,CAAC,SAAD,CAAP,GAAqBS,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isInteger = _interopRequireDefault(require(\"./isInteger\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Checks whether the passed value is complement of an `integer`.\n *\n *\n * @func isNotInteger\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.7.0|v0.7.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isInteger|isInteger}\n * @example\n *\n * RA.isNotInteger(0); //=> false\n * RA.isNotInteger(1); //=> false\n * RA.isNotInteger(-100000); //=> false\n *\n * RA.isNotInteger(0.1);       //=> true\n * RA.isNotInteger(Math.PI);   //=> true\n *\n * RA.isNotInteger(NaN);       //=> true\n * RA.isNotInteger(Infinity);  //=> true\n * RA.isNotInteger(-Infinity); //=> true\n * RA.isNotInteger('10');      //=> true\n * RA.isNotInteger(true);      //=> true\n * RA.isNotInteger(false);     //=> true\n * RA.isNotInteger([1]);       //=> true\n */\nvar isNotInteger = (0, _ramda.complement)(_isInteger[\"default\"]);\nvar _default = isNotInteger;\nexports[\"default\"] = _default;"]}