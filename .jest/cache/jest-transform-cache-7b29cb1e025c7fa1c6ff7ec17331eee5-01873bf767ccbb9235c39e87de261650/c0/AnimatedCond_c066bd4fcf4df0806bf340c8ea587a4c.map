{"version":3,"sources":["AnimatedCond.js"],"names":["AnimatedNode","constructor","condition","ifBlock","elseBlock","type","cond","toString","__onEvaluate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,IAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;IAEA,Y;;;;;AAKEC,wBAAW,SAAXA,EAAW,OAAXA,EAAW,SAAXA,EAA2C;AAAA;;AAAA;AACzC,KAAA,GAAA,UAAA,CAAA,OAAA,EACEC,SAAS,YAAYF,aAAAA,CADvB,OAAA,EAAA,wFAAA,MAAA,CAAA,SAAA,CAAA;AAIA,KAAA,GAAA,UAAA,CAAA,OAAA,EACEG,OAAO,YAAYH,aAAAA,CADrB,OAAA,EAAA,yFAAA,MAAA,CAAA,OAAA,CAAA;AAIA,KAAA,GAAA,UAAA,CAAA,OAAA,EACEI,SAAS,YAAYJ,aAAAA,CAArBI,OAAAA,IAAqCA,SAAS,KADhD,SAAA,EAAA,+GAAA,MAAA,CAAA,SAAA,CAAA;AAIA,8BACE;AACEC,MAAAA,IAAI,EADN,MAAA;AAEEC,MAAAA,IAAI,EAFN,SAAA;AAGEH,MAAAA,OAHF,EAGEA,OAHF;AAIEC,MAAAA,SAAAA,EAAAA;AAJF,KADF,EAOE,CAAA,SAAA,EAAA,OAAA,EAPF,SAOE,CAPF;;AAbyC,IAAA,eAAA,8CAAA,YAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,8CAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,8CAAA,YAAA,EAAA,KAAA,CAAA,CAAA;;AAsBzC,UAAA,UAAA,GAAA,SAAA;AACA,UAAA,QAAA,GAAA,OAAA;AACA,UAAA,UAAA,GAAA,SAAA;AAxByC;AAyB1C;;;;WAEDG,oBAAW;AACT,aAAA,qBAAA,MAAA,CAA4B,KAA5B,QAAA,CAAA;AACD;;;WAEDC,wBAAe;AACb,UAAI,CAAA,GAAA,IAAA,CAAA,GAAA,EAAI,KAAR,UAAI,CAAJ,EAA0B;AACxB,eAAO,CAAA,GAAA,IAAA,CAAA,GAAA,EAAI,KAAX,QAAO,CAAP;AADF,OAAA,MAEO;AACL,eAAO,KAAA,UAAA,KAAA,SAAA,GAAgC,CAAA,GAAA,IAAA,CAAA,GAAA,EAAI,KAApC,UAAgC,CAAhC,GAAP,SAAA;AACD;AACF;;;EA1CwBR,aAAAA,CAA3B,O;;AA6CO,SAAA,kBAAA,CAAA,IAAA,EAAA,OAAA,EAAA,SAAA,EAAsD;AAC3D,SAAO,IAAA,YAAA,CACL,CAAA,GAAA,cAAA,CAAA,KAAA,EADK,IACL,CADK,EAEL,CAAA,GAAA,cAAA,CAAA,KAAA,EAFK,OAEL,CAFK,EAGLI,SAAS,KAATA,SAAAA,GAAAA,SAAAA,GAAsC,CAAA,GAAA,cAAA,CAAA,KAAA,EAHxC,SAGwC,CAHjC,CAAP;AAKD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedCond extends AnimatedNode {\n  _condition;\n  _ifBlock;\n  _elseBlock;\n\n  constructor(condition, ifBlock, elseBlock) {\n    invariant(\n      condition instanceof AnimatedNode,\n      `Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ${condition}`\n    );\n    invariant(\n      ifBlock instanceof AnimatedNode,\n      `Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ${ifBlock}`\n    );\n    invariant(\n      elseBlock instanceof AnimatedNode || elseBlock === undefined,\n      `Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ${elseBlock}`\n    );\n    super(\n      {\n        type: 'cond',\n        cond: condition,\n        ifBlock,\n        elseBlock,\n      },\n      [condition, ifBlock, elseBlock]\n    );\n    this._condition = condition;\n    this._ifBlock = ifBlock;\n    this._elseBlock = elseBlock;\n  }\n\n  toString() {\n    return `AnimatedCond, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (val(this._condition)) {\n      return val(this._ifBlock);\n    } else {\n      return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n    }\n  }\n}\n\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(\n    adapt(cond),\n    adapt(ifBlock),\n    elseBlock === undefined ? undefined : adapt(elseBlock)\n  );\n}\n"]}