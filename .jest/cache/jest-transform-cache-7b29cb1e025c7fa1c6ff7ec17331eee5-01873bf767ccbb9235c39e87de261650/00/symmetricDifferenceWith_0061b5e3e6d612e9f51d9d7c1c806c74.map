{"version":3,"sources":["symmetricDifferenceWith.js"],"names":["_curry3","require","concat","differenceWith","symmetricDifferenceWith","pred","list1","list2","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAEXC,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIC,MAAM,GAEVD,OAAO,CAAC,UAAD,CAFP;;AAIA,IAAIE,cAAc,GAElBF,OAAO,CAAC,kBAAD,CAFP;;AA2BA,IAAIG,uBAAuB,GAE3BJ,OAAO,CAAC,SAASI,uBAAT,CAAiCC,IAAjC,EAAuCC,KAAvC,EAA8CC,KAA9C,EAAqD;AAC3D,SAAOL,MAAM,CAACC,cAAc,CAACE,IAAD,EAAOC,KAAP,EAAcC,KAAd,CAAf,EAAqCJ,cAAc,CAACE,IAAD,EAAOE,KAAP,EAAcD,KAAd,CAAnD,CAAb;AACD,CAFM,CAFP;;AAMAE,MAAM,CAACC,OAAP,GAAiBL,uBAAjB","sourcesContent":["var _curry3 =\n/*#__PURE__*/\nrequire(\"./internal/_curry3\");\n\nvar concat =\n/*#__PURE__*/\nrequire(\"./concat\");\n\nvar differenceWith =\n/*#__PURE__*/\nrequire(\"./differenceWith\");\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both. Duplication is determined according to the value\n * returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifference, R.difference, R.differenceWith\n * @example\n *\n *      const eqA = R.eqBy(R.prop('a'));\n *      const l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n *      const l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n */\n\n\nvar symmetricDifferenceWith =\n/*#__PURE__*/\n_curry3(function symmetricDifferenceWith(pred, list1, list2) {\n  return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n});\n\nmodule.exports = symmetricDifferenceWith;"]}