{"version":3,"sources":["curryRightN.js"],"names":["exports","__esModule","_ramda","require","curryRightN","curryN","arity","fn","wrapper","_len","arguments","length","args","Array","_key","apply","reverse","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAsBA,IAAIC,WAAW,GAAG,CAAC,GAAGF,MAAM,CAACG,MAAX,EAAmB,CAAnB,EAAsB,UAAUC,KAAV,EAAiBC,EAAjB,EAAqB;AAC3D,SAAO,CAAC,GAAGL,MAAM,CAACG,MAAX,EAAmBC,KAAnB,EAA0B,SAASE,OAAT,GAAmB;AAClD,SAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;AACvFF,MAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAED,WAAOP,EAAE,CAACQ,KAAH,CAAS,IAAT,EAAe,CAAC,GAAGb,MAAM,CAACc,OAAX,EAAoBJ,IAApB,CAAf,CAAP;AACD,GANM,CAAP;AAOD,CARiB,CAAlB;AASA,IAAIK,QAAQ,GAAGb,WAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBiB,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Returns a curried equivalent of the provided function, with the specified arity.\n * This function is like curryN, except that the provided arguments order is reversed.\n *\n * @func curryRightN\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.12.0|v1.12.0}\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {number} length The arity for the returned function\n * @param {Function} fn The function to curry\n * @return {Function}  A new, curried function\n * @see {@link http://ramdajs.com/docs/#curryN|R.curryN}, {@link RA.curryRight|curryRight}\n * @example\n *\n * const concatStrings = (a, b, c) => a + b + c;\n * const concatStringsCurried = RA.curryRightN(3, concatStrings);\n *\n * concatStringCurried('a')('b')('c'); // => 'cba'\n */\nvar curryRightN = (0, _ramda.curryN)(2, function (arity, fn) {\n  return (0, _ramda.curryN)(arity, function wrapper() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return fn.apply(this, (0, _ramda.reverse)(args));\n  });\n});\nvar _default = curryRightN;\nexports[\"default\"] = _default;"]}