{"version":3,"sources":["chain.js"],"names":["_curry2","require","_dispatchable","_makeFlat","_xchain","map","chain","fn","monad","x","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAEXC,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIC,aAAa,GAEjBD,OAAO,CAAC,0BAAD,CAFP;;AAIA,IAAIE,SAAS,GAEbF,OAAO,CAAC,sBAAD,CAFP;;AAIA,IAAIG,OAAO,GAEXH,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAII,GAAG,GAEPJ,OAAO,CAAC,OAAD,CAFP;;AA+BA,IAAIK,KAAK,GAETN,OAAO,CAEPE,aAAa,CAAC,CAAC,oBAAD,EAAuB,OAAvB,CAAD,EAAkCE,OAAlC,EAA2C,SAASE,KAAT,CAAeC,EAAf,EAAmBC,KAAnB,EAA0B;AAChF,MAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AAC/B,WAAO,UAAUC,CAAV,EAAa;AAClB,aAAOF,EAAE,CAACC,KAAK,CAACC,CAAD,CAAN,CAAF,CAAaA,CAAb,CAAP;AACD,KAFD;AAGD;;AAED,SAAON,SAAS,CAAC,KAAD,CAAT,CAAiBE,GAAG,CAACE,EAAD,EAAKC,KAAL,CAApB,CAAP;AACD,CARY,CAFN,CAFP;;AAcAE,MAAM,CAACC,OAAP,GAAiBL,KAAjB","sourcesContent":["var _curry2 =\n/*#__PURE__*/\nrequire(\"./internal/_curry2\");\n\nvar _dispatchable =\n/*#__PURE__*/\nrequire(\"./internal/_dispatchable\");\n\nvar _makeFlat =\n/*#__PURE__*/\nrequire(\"./internal/_makeFlat\");\n\nvar _xchain =\n/*#__PURE__*/\nrequire(\"./internal/_xchain\");\n\nvar map =\n/*#__PURE__*/\nrequire(\"./map\");\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries.\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * If second argument is a function, `chain(f, g)(x)` is equivalent to `f(g(x), x)`.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      const duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\n\n\nvar chain =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function (x) {\n      return fn(monad(x))(x);\n    };\n  }\n\n  return _makeFlat(false)(map(fn, monad));\n}));\n\nmodule.exports = chain;"]}