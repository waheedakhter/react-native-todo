{"version":3,"sources":["call.js"],"names":["curry","require","call","fn","apply","Array","prototype","slice","arguments","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAETC,OAAO,CAAC,SAAD,CAFP;;AAqCA,IAAIC,IAAI,GAERF,KAAK,CAAC,SAASE,IAAT,CAAcC,EAAd,EAAkB;AACtB,SAAOA,EAAE,CAACC,KAAH,CAAS,IAAT,EAAeC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBL,IAAtB,CAA2BM,SAA3B,EAAsC,CAAtC,CAAf,CAAP;AACD,CAFI,CAFL;AAKAC,MAAM,CAACC,OAAP,GAAiBR,IAAjB","sourcesContent":["var curry =\n/*#__PURE__*/\nrequire(\"./curry\");\n/**\n * Returns the result of calling its first argument with the remaining\n * arguments. This is occasionally useful as a converging function for\n * [`R.converge`](#converge): the first branch can produce a function while the\n * remaining branches produce values to be passed to that function as its\n * arguments.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig (*... -> a),*... -> a\n * @param {Function} fn The function to apply to the remaining arguments.\n * @param {...*} args Any number of positional arguments.\n * @return {*}\n * @see R.apply\n * @example\n *\n *      R.call(R.add, 1, 2); //=> 3\n *\n *      const indentN = R.pipe(R.repeat(' '),\n *                           R.join(''),\n *                           R.replace(/^(?!$)/gm));\n *\n *      const format = R.converge(R.call, [\n *                                  R.pipe(R.prop('indent'), indentN),\n *                                  R.prop('value')\n *                              ]);\n *\n *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n * @symb R.call(f, a, b) = f(a, b)\n */\n\n\nvar call =\n/*#__PURE__*/\ncurry(function call(fn) {\n  return fn.apply(this, Array.prototype.slice.call(arguments, 1));\n});\nmodule.exports = call;"]}