{"version":3,"sources":["uniqWith.js"],"names":["_includesWith","require","_curry2","uniqWith","pred","list","idx","len","length","result","item","module","exports"],"mappings":"AAAA,IAAIA,aAAa,GAEjBC,OAAO,CAAC,0BAAD,CAFP;;AAIA,IAAIC,OAAO,GAEXD,OAAO,CAAC,oBAAD,CAFP;;AA2BA,IAAIE,QAAQ,GAEZD,OAAO,CAAC,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8B;AACpC,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGF,IAAI,CAACG,MAAf;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,IAAJ;;AAEA,SAAOJ,GAAG,GAAGC,GAAb,EAAkB;AAChBG,IAAAA,IAAI,GAAGL,IAAI,CAACC,GAAD,CAAX;;AAEA,QAAI,CAACN,aAAa,CAACI,IAAD,EAAOM,IAAP,EAAaD,MAAb,CAAlB,EAAwC;AACtCA,MAAAA,MAAM,CAACA,MAAM,CAACD,MAAR,CAAN,GAAwBE,IAAxB;AACD;;AAEDJ,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAOG,MAAP;AACD,CAjBM,CAFP;;AAqBAE,MAAM,CAACC,OAAP,GAAiBT,QAAjB","sourcesContent":["var _includesWith =\n/*#__PURE__*/\nrequire(\"./internal/_includesWith\");\n\nvar _curry2 =\n/*#__PURE__*/\nrequire(\"./internal/_curry2\");\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied predicate to\n * two list elements. Prefers the first item if two items compare equal based\n * on the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category List\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      const strEq = R.eqBy(String);\n *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n */\n\n\nvar uniqWith =\n/*#__PURE__*/\n_curry2(function uniqWith(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var item;\n\n  while (idx < len) {\n    item = list[idx];\n\n    if (!_includesWith(pred, item, result)) {\n      result[result.length] = item;\n    }\n\n    idx += 1;\n  }\n\n  return result;\n});\n\nmodule.exports = uniqWith;"]}