{"version":3,"sources":["isNaN.js"],"names":["exports","__esModule","isNaNPonyfill","_ramda","require","_isFunction","_interopRequireDefault","_Number","obj","curryN","_isNaN","Number","isNaN","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,aAAR,GAAwBF,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAAlD;;AAEA,IAAIG,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACF,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIG,OAAO,GAAGD,sBAAsB,CAACF,OAAO,CAAC,mCAAD,CAAR,CAApC;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACP,UAAX,GAAwBO,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,IAAIN,aAAa,GAAG,CAAC,GAAGC,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsBF,OAAO,CAAC,SAAD,CAA7B,CAApB;AAmCAP,OAAO,CAACE,aAAR,GAAwBA,aAAxB;;AAEA,IAAIQ,MAAM,GAAG,CAAC,GAAGL,WAAW,CAAC,SAAD,CAAf,EAA4BM,MAAM,CAACC,KAAnC,IAA4C,CAAC,GAAGT,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsBE,MAAM,CAACC,KAA7B,CAA5C,GAAkFV,aAA/F;;AAEA,IAAIW,QAAQ,GAAGH,MAAf;AACAV,OAAO,CAAC,SAAD,CAAP,GAAqBa,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.isNaNPonyfill = exports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isFunction = _interopRequireDefault(require(\"./isFunction\"));\n\nvar _Number = _interopRequireDefault(require(\"./internal/ponyfills/Number.isNaN\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar isNaNPonyfill = (0, _ramda.curryN)(1, _Number[\"default\"]);\n/**\n * Checks whether the passed value is `NaN` and its type is `Number`.\n * It is a more robust version of the original, global isNaN().\n *\n *\n * @func isNaN\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.6.0|v0.6.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotNaN|isNotNaN}\n * @example\n *\n * RA.isNaN(NaN); // => true\n * RA.isNaN(Number.NaN); // => true\n * RA.isNaN(0 / 0); // => true\n *\n * // e.g. these would have been true with global isNaN().\n * RA.isNaN('NaN'); // => false\n * RA.isNaN(undefined); // => false\n * RA.isNaN({}); // => false\n * RA.isNaN('blabla'); // => false\n *\n * RA.isNaN(true); // => false\n * RA.isNaN(null); // => false\n * RA.isNaN(37); // => false\n * RA.isNaN('37'); // => false\n * RA.isNaN('37.37'); // => false\n * RA.isNaN(''); // => false\n * RA.isNaN(' '); // => false\n */\n\nexports.isNaNPonyfill = isNaNPonyfill;\n\nvar _isNaN = (0, _isFunction[\"default\"])(Number.isNaN) ? (0, _ramda.curryN)(1, Number.isNaN) : isNaNPonyfill;\n\nvar _default = _isNaN;\nexports[\"default\"] = _default;"]}