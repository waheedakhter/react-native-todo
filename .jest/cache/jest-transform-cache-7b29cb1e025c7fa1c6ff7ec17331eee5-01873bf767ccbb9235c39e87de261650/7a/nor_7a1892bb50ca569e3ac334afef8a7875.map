{"version":3,"sources":["nor.js"],"names":["exports","__esModule","_ramda","require","nor","complement","or","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAyBA,IAAIC,GAAG,GAAG,CAAC,GAAGF,MAAM,CAACG,UAAX,EAAuBH,MAAM,CAACI,EAA9B,CAAV;AAEA,IAAIC,QAAQ,GAAGH,GAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBO,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Returns true if both arguments are falsy; false otherwise.\n *\n * @func nor\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.20.0|v2.20.0}\n * @category Logic\n * @sig a -> b -> a âŠ½ b\n * @param {*} a\n * @param {*} b\n * @return {boolean} true if both arguments are falsy\n * @see {@link RA.neither|neither}\n * @example\n *\n * RA.nor(true, true); //=> false\n * RA.nor(false, true); //=> false\n * RA.nor(true, false); //=> false\n * RA.nor(false, false); //=> true\n * RA.nor(1, 1); //=> false\n * RA.nor(1, 0); //=> false\n * RA.nor(0, 1); //=> false\n * RA.nor(0, 0); //=> true\n */\nvar nor = (0, _ramda.complement)(_ramda.or); // eslint-disable-line ramda/complement-simplification\n\nvar _default = nor;\nexports[\"default\"] = _default;"]}