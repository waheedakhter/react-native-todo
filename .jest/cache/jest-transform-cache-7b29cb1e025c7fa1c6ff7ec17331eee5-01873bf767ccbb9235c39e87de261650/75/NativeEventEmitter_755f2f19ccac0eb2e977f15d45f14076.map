{"version":3,"sources":["NativeEventEmitter.js"],"names":["NativeEventEmitter","eventType","listener","context","RCTDeviceEventEmitter","addListener","args","emit","removeAllListeners","listenerCount"],"mappings":";;;;;;;;;;;AAcA;;IAKqBA,kB;;;;;;;WAEnB,qBACEC,SADF,EAEEC,QAFF,EAGEC,OAHF,EAIqB;AACnB,aAAOC,+BAAsBC,WAAtB,CAAkCJ,SAAlC,EAA6CC,QAA7C,EAAuDC,OAAvD,CAAP;AACD;;;WAED,cACEF,SADF,EAGQ;AAAA,wCADHK,IACG;AADHA,QAAAA,IACG;AAAA;;AACNF,qCAAsBG,IAAtB,wCAA2BN,SAA3B,SAAyCK,IAAzC;AACD;;;WAED,4BACEL,SADF,EAEQ;AACNG,qCAAsBI,kBAAtB,CAAyCP,SAAzC;AACD;;;WAED,uBAA8CA,SAA9C,EAAyE;AACvE,aAAOG,+BAAsBK,aAAtB,CAAoCR,SAApC,CAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport {\n  type EventSubscription,\n  type IEventEmitter,\n} from '../../vendor/emitter/EventEmitter';\nimport RCTDeviceEventEmitter from '../RCTDeviceEventEmitter';\n\n/**\n * Mock `NativeEventEmitter` to ignore Native Modules.\n */\nexport default class NativeEventEmitter<TEventToArgsMap: {...}>\n  implements IEventEmitter<TEventToArgsMap> {\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n    context?: mixed,\n  ): EventSubscription {\n    return RCTDeviceEventEmitter.addListener(eventType, listener, context);\n  }\n\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: $ElementType<TEventToArgsMap, TEvent>\n  ): void {\n    RCTDeviceEventEmitter.emit(eventType, ...args);\n  }\n\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(\n    eventType?: ?TEvent,\n  ): void {\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\n  }\n\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number {\n    return RCTDeviceEventEmitter.listenerCount(eventType);\n  }\n}\n"]}