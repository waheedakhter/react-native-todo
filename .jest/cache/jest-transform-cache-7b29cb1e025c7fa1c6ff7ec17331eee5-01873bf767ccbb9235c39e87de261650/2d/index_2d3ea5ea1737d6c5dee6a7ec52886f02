2df13d8450f464026cfcf77cd871d172
'use strict';

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var isOptionObject = require('is-plain-obj');

var hasOwnProperty = Object.prototype.hasOwnProperty;
var propertyIsEnumerable = Object.propertyIsEnumerable;

var defineProperty = function defineProperty(object, name, value) {
  return Object.defineProperty(object, name, {
    value: value,
    writable: true,
    enumerable: true,
    configurable: true
  });
};

var globalThis = this;
var defaultMergeOptions = {
  concatArrays: false,
  ignoreUndefined: false
};

var getEnumerableOwnPropertyKeys = function getEnumerableOwnPropertyKeys(value) {
  var keys = [];

  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      keys.push(key);
    }
  }

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(value);

    for (var _iterator = _createForOfIteratorHelperLoose(symbols), _step; !(_step = _iterator()).done;) {
      var symbol = _step.value;

      if (propertyIsEnumerable.call(value, symbol)) {
        keys.push(symbol);
      }
    }
  }

  return keys;
};

function clone(value) {
  if (Array.isArray(value)) {
    return cloneArray(value);
  }

  if (isOptionObject(value)) {
    return cloneOptionObject(value);
  }

  return value;
}

function cloneArray(array) {
  var result = array.slice(0, 0);
  getEnumerableOwnPropertyKeys(array).forEach(function (key) {
    defineProperty(result, key, clone(array[key]));
  });
  return result;
}

function cloneOptionObject(object) {
  var result = Object.getPrototypeOf(object) === null ? Object.create(null) : {};
  getEnumerableOwnPropertyKeys(object).forEach(function (key) {
    defineProperty(result, key, clone(object[key]));
  });
  return result;
}

var mergeKeys = function mergeKeys(merged, source, keys, config) {
  keys.forEach(function (key) {
    if (typeof source[key] === 'undefined' && config.ignoreUndefined) {
      return;
    }

    if (key in merged && merged[key] !== Object.getPrototypeOf(merged)) {
      defineProperty(merged, key, merge(merged[key], source[key], config));
    } else {
      defineProperty(merged, key, clone(source[key]));
    }
  });
  return merged;
};

var concatArrays = function concatArrays(merged, source, config) {
  var result = merged.slice(0, 0);
  var resultIndex = 0;
  [merged, source].forEach(function (array) {
    var indices = [];

    for (var k = 0; k < array.length; k++) {
      if (!hasOwnProperty.call(array, k)) {
        continue;
      }

      indices.push(String(k));

      if (array === merged) {
        defineProperty(result, resultIndex++, array[k]);
      } else {
        defineProperty(result, resultIndex++, clone(array[k]));
      }
    }

    result = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(function (key) {
      return !indices.includes(key);
    }), config);
  });
  return result;
};

function merge(merged, source, config) {
  if (config.concatArrays && Array.isArray(merged) && Array.isArray(source)) {
    return concatArrays(merged, source, config);
  }

  if (!isOptionObject(source) || !isOptionObject(merged)) {
    return clone(source);
  }

  return mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), config);
}

module.exports = function () {
  var config = merge(clone(defaultMergeOptions), this !== globalThis && this || {}, defaultMergeOptions);
  var merged = {
    _: {}
  };

  for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {
    options[_key] = arguments[_key];
  }

  for (var _i = 0, _options = options; _i < _options.length; _i++) {
    var option = _options[_i];

    if (option === undefined) {
      continue;
    }

    if (!isOptionObject(option)) {
      throw new TypeError('`' + option + '` is not an Option Object');
    }

    merged = merge(merged, {
      _: option
    }, config);
  }

  return merged._;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,