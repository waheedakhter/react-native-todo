618a533ceb1fec55a96f3e5e1d1d34e6
var _curry1 = require("./internal/_curry1");

var _has = require("./internal/_has");

var _isArguments = require("./internal/_isArguments");

var hasEnumBug = !{
  toString: null
}.propertyIsEnumerable('toString');
var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

var hasArgsEnumBug = function () {
  'use strict';

  return arguments.propertyIsEnumerable('length');
}();

var contains = function contains(list, item) {
  var idx = 0;

  while (idx < list.length) {
    if (list[idx] === item) {
      return true;
    }

    idx += 1;
  }

  return false;
};

var keys = typeof Object.keys === 'function' && !hasArgsEnumBug ? _curry1(function keys(obj) {
  return Object(obj) !== obj ? [] : Object.keys(obj);
}) : _curry1(function keys(obj) {
  if (Object(obj) !== obj) {
    return [];
  }

  var prop, nIdx;
  var ks = [];

  var checkArgsLength = hasArgsEnumBug && _isArguments(obj);

  for (prop in obj) {
    if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {
      ks[ks.length] = prop;
    }
  }

  if (hasEnumBug) {
    nIdx = nonEnumerableProps.length - 1;

    while (nIdx >= 0) {
      prop = nonEnumerableProps[nIdx];

      if (_has(prop, obj) && !contains(ks, prop)) {
        ks[ks.length] = prop;
      }

      nIdx -= 1;
    }
  }

  return ks;
});
module.exports = keys;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImtleXMuanMiXSwibmFtZXMiOlsiX2N1cnJ5MSIsInJlcXVpcmUiLCJfaGFzIiwiX2lzQXJndW1lbnRzIiwiaGFzRW51bUJ1ZyIsInRvU3RyaW5nIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJub25FbnVtZXJhYmxlUHJvcHMiLCJoYXNBcmdzRW51bUJ1ZyIsImFyZ3VtZW50cyIsImNvbnRhaW5zIiwibGlzdCIsIml0ZW0iLCJpZHgiLCJsZW5ndGgiLCJrZXlzIiwiT2JqZWN0Iiwib2JqIiwicHJvcCIsIm5JZHgiLCJrcyIsImNoZWNrQXJnc0xlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE9BQU8sR0FFWEMsT0FBTyxDQUFDLG9CQUFELENBRlA7O0FBSUEsSUFBSUMsSUFBSSxHQUVSRCxPQUFPLENBQUMsaUJBQUQsQ0FGUDs7QUFJQSxJQUFJRSxZQUFZLEdBRWhCRixPQUFPLENBQUMseUJBQUQsQ0FGUDs7QUFLQSxJQUFJRyxVQUFVLEdBQUcsQ0FFakI7QUFDRUMsRUFBQUEsUUFBUSxFQUFFO0FBRFosRUFFRUMsb0JBRkYsQ0FFdUIsVUFGdkIsQ0FGQTtBQUtBLElBQUlDLGtCQUFrQixHQUFHLENBQUMsYUFBRCxFQUFnQixTQUFoQixFQUEyQixlQUEzQixFQUE0QyxVQUE1QyxFQUF3RCxzQkFBeEQsRUFBZ0YsZ0JBQWhGLEVBQWtHLGdCQUFsRyxDQUF6Qjs7QUFFQSxJQUFJQyxjQUFjLEdBRWxCLFlBQVk7QUFDVjs7QUFFQSxTQUFPQyxTQUFTLENBQUNILG9CQUFWLENBQStCLFFBQS9CLENBQVA7QUFDRCxDQUpELEVBRkE7O0FBUUEsSUFBSUksUUFBUSxHQUFHLFNBQVNBLFFBQVQsQ0FBa0JDLElBQWxCLEVBQXdCQyxJQUF4QixFQUE4QjtBQUMzQyxNQUFJQyxHQUFHLEdBQUcsQ0FBVjs7QUFFQSxTQUFPQSxHQUFHLEdBQUdGLElBQUksQ0FBQ0csTUFBbEIsRUFBMEI7QUFDeEIsUUFBSUgsSUFBSSxDQUFDRSxHQUFELENBQUosS0FBY0QsSUFBbEIsRUFBd0I7QUFDdEIsYUFBTyxJQUFQO0FBQ0Q7O0FBRURDLElBQUFBLEdBQUcsSUFBSSxDQUFQO0FBQ0Q7O0FBRUQsU0FBTyxLQUFQO0FBQ0QsQ0FaRDs7QUFpQ0EsSUFBSUUsSUFBSSxHQUFHLE9BQU9DLE1BQU0sQ0FBQ0QsSUFBZCxLQUF1QixVQUF2QixJQUFxQyxDQUFDUCxjQUF0QyxHQUVYUixPQUFPLENBQUMsU0FBU2UsSUFBVCxDQUFjRSxHQUFkLEVBQW1CO0FBQ3pCLFNBQU9ELE1BQU0sQ0FBQ0MsR0FBRCxDQUFOLEtBQWdCQSxHQUFoQixHQUFzQixFQUF0QixHQUEyQkQsTUFBTSxDQUFDRCxJQUFQLENBQVlFLEdBQVosQ0FBbEM7QUFDRCxDQUZNLENBRkksR0FNWGpCLE9BQU8sQ0FBQyxTQUFTZSxJQUFULENBQWNFLEdBQWQsRUFBbUI7QUFDekIsTUFBSUQsTUFBTSxDQUFDQyxHQUFELENBQU4sS0FBZ0JBLEdBQXBCLEVBQXlCO0FBQ3ZCLFdBQU8sRUFBUDtBQUNEOztBQUVELE1BQUlDLElBQUosRUFBVUMsSUFBVjtBQUNBLE1BQUlDLEVBQUUsR0FBRyxFQUFUOztBQUVBLE1BQUlDLGVBQWUsR0FBR2IsY0FBYyxJQUFJTCxZQUFZLENBQUNjLEdBQUQsQ0FBcEQ7O0FBRUEsT0FBS0MsSUFBTCxJQUFhRCxHQUFiLEVBQWtCO0FBQ2hCLFFBQUlmLElBQUksQ0FBQ2dCLElBQUQsRUFBT0QsR0FBUCxDQUFKLEtBQW9CLENBQUNJLGVBQUQsSUFBb0JILElBQUksS0FBSyxRQUFqRCxDQUFKLEVBQWdFO0FBQzlERSxNQUFBQSxFQUFFLENBQUNBLEVBQUUsQ0FBQ04sTUFBSixDQUFGLEdBQWdCSSxJQUFoQjtBQUNEO0FBQ0Y7O0FBRUQsTUFBSWQsVUFBSixFQUFnQjtBQUNkZSxJQUFBQSxJQUFJLEdBQUdaLGtCQUFrQixDQUFDTyxNQUFuQixHQUE0QixDQUFuQzs7QUFFQSxXQUFPSyxJQUFJLElBQUksQ0FBZixFQUFrQjtBQUNoQkQsTUFBQUEsSUFBSSxHQUFHWCxrQkFBa0IsQ0FBQ1ksSUFBRCxDQUF6Qjs7QUFFQSxVQUFJakIsSUFBSSxDQUFDZ0IsSUFBRCxFQUFPRCxHQUFQLENBQUosSUFBbUIsQ0FBQ1AsUUFBUSxDQUFDVSxFQUFELEVBQUtGLElBQUwsQ0FBaEMsRUFBNEM7QUFDMUNFLFFBQUFBLEVBQUUsQ0FBQ0EsRUFBRSxDQUFDTixNQUFKLENBQUYsR0FBZ0JJLElBQWhCO0FBQ0Q7O0FBRURDLE1BQUFBLElBQUksSUFBSSxDQUFSO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPQyxFQUFQO0FBQ0QsQ0EvQk0sQ0FOUDtBQXNDQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCUixJQUFqQiIsInNvdXJjZXNDb250ZW50IjpbInZhciBfY3VycnkxID1cbi8qI19fUFVSRV9fKi9cbnJlcXVpcmUoXCIuL2ludGVybmFsL19jdXJyeTFcIik7XG5cbnZhciBfaGFzID1cbi8qI19fUFVSRV9fKi9cbnJlcXVpcmUoXCIuL2ludGVybmFsL19oYXNcIik7XG5cbnZhciBfaXNBcmd1bWVudHMgPVxuLyojX19QVVJFX18qL1xucmVxdWlyZShcIi4vaW50ZXJuYWwvX2lzQXJndW1lbnRzXCIpOyAvLyBjb3ZlciBJRSA8IDkga2V5cyBpc3N1ZXNcblxuXG52YXIgaGFzRW51bUJ1ZyA9ICFcbi8qI19fUFVSRV9fKi9cbntcbiAgdG9TdHJpbmc6IG51bGxcbn0ucHJvcGVydHlJc0VudW1lcmFibGUoJ3RvU3RyaW5nJyk7XG52YXIgbm9uRW51bWVyYWJsZVByb3BzID0gWydjb25zdHJ1Y3RvcicsICd2YWx1ZU9mJywgJ2lzUHJvdG90eXBlT2YnLCAndG9TdHJpbmcnLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAnaGFzT3duUHJvcGVydHknLCAndG9Mb2NhbGVTdHJpbmcnXTsgLy8gU2FmYXJpIGJ1Z1xuXG52YXIgaGFzQXJnc0VudW1CdWcgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5wcm9wZXJ0eUlzRW51bWVyYWJsZSgnbGVuZ3RoJyk7XG59KCk7XG5cbnZhciBjb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zKGxpc3QsIGl0ZW0pIHtcbiAgdmFyIGlkeCA9IDA7XG5cbiAgd2hpbGUgKGlkeCA8IGxpc3QubGVuZ3RoKSB7XG4gICAgaWYgKGxpc3RbaWR4XSA9PT0gaXRlbSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWR4ICs9IDE7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgbGlzdCBjb250YWluaW5nIHRoZSBuYW1lcyBvZiBhbGwgdGhlIGVudW1lcmFibGUgb3duIHByb3BlcnRpZXMgb2ZcbiAqIHRoZSBzdXBwbGllZCBvYmplY3QuXG4gKiBOb3RlIHRoYXQgdGhlIG9yZGVyIG9mIHRoZSBvdXRwdXQgYXJyYXkgaXMgbm90IGd1YXJhbnRlZWQgdG8gYmUgY29uc2lzdGVudFxuICogYWNyb3NzIGRpZmZlcmVudCBKUyBwbGF0Zm9ybXMuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAc2lnIHtrOiB2fSAtPiBba11cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBleHRyYWN0IHByb3BlcnRpZXMgZnJvbVxuICogQHJldHVybiB7QXJyYXl9IEFuIGFycmF5IG9mIHRoZSBvYmplY3QncyBvd24gcHJvcGVydGllcy5cbiAqIEBzZWUgUi5rZXlzSW4sIFIudmFsdWVzXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi5rZXlzKHthOiAxLCBiOiAyLCBjOiAzfSk7IC8vPT4gWydhJywgJ2InLCAnYyddXG4gKi9cblxuXG52YXIga2V5cyA9IHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gJ2Z1bmN0aW9uJyAmJiAhaGFzQXJnc0VudW1CdWcgP1xuLyojX19QVVJFX18qL1xuX2N1cnJ5MShmdW5jdGlvbiBrZXlzKG9iaikge1xuICByZXR1cm4gT2JqZWN0KG9iaikgIT09IG9iaiA/IFtdIDogT2JqZWN0LmtleXMob2JqKTtcbn0pIDpcbi8qI19fUFVSRV9fKi9cbl9jdXJyeTEoZnVuY3Rpb24ga2V5cyhvYmopIHtcbiAgaWYgKE9iamVjdChvYmopICE9PSBvYmopIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgcHJvcCwgbklkeDtcbiAgdmFyIGtzID0gW107XG5cbiAgdmFyIGNoZWNrQXJnc0xlbmd0aCA9IGhhc0FyZ3NFbnVtQnVnICYmIF9pc0FyZ3VtZW50cyhvYmopO1xuXG4gIGZvciAocHJvcCBpbiBvYmopIHtcbiAgICBpZiAoX2hhcyhwcm9wLCBvYmopICYmICghY2hlY2tBcmdzTGVuZ3RoIHx8IHByb3AgIT09ICdsZW5ndGgnKSkge1xuICAgICAga3Nba3MubGVuZ3RoXSA9IHByb3A7XG4gICAgfVxuICB9XG5cbiAgaWYgKGhhc0VudW1CdWcpIHtcbiAgICBuSWR4ID0gbm9uRW51bWVyYWJsZVByb3BzLmxlbmd0aCAtIDE7XG5cbiAgICB3aGlsZSAobklkeCA+PSAwKSB7XG4gICAgICBwcm9wID0gbm9uRW51bWVyYWJsZVByb3BzW25JZHhdO1xuXG4gICAgICBpZiAoX2hhcyhwcm9wLCBvYmopICYmICFjb250YWlucyhrcywgcHJvcCkpIHtcbiAgICAgICAga3Nba3MubGVuZ3RoXSA9IHByb3A7XG4gICAgICB9XG5cbiAgICAgIG5JZHggLT0gMTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ga3M7XG59KTtcbm1vZHVsZS5leHBvcnRzID0ga2V5czsiXX0=