f8453b11318cd83d3e671efffeeb4e40
"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _ramda = require("ramda");

var _ap = _interopRequireDefault(require("./internal/ap"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var liftFN = (0, _ramda.curry)(function (arity, fn) {
  var lifted = (0, _ramda.curryN)(arity, fn);
  return (0, _ramda.curryN)(arity, function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var accumulator = (0, _ramda.map)(lifted, (0, _ramda.head)(args));
    var apps = (0, _ramda.slice)(1, Infinity, args);
    return (0, _ramda.reduce)(_ap["default"], accumulator, apps);
  });
});
var _default = liftFN;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpZnRGTi5qcyJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsIl9yYW1kYSIsInJlcXVpcmUiLCJfYXAiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwibGlmdEZOIiwiY3VycnkiLCJhcml0eSIsImZuIiwibGlmdGVkIiwiY3VycnlOIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJhY2N1bXVsYXRvciIsIm1hcCIsImhlYWQiLCJhcHBzIiwic2xpY2UiLCJJbmZpbml0eSIsInJlZHVjZSIsIl9kZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBTyxDQUFDQyxVQUFSLEdBQXFCLElBQXJCO0FBQ0FELE9BQU8sQ0FBQyxTQUFELENBQVAsR0FBcUIsS0FBSyxDQUExQjs7QUFFQSxJQUFJRSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXBCOztBQUVBLElBQUlDLEdBQUcsR0FBR0Msc0JBQXNCLENBQUNGLE9BQU8sQ0FBQyxlQUFELENBQVIsQ0FBaEM7O0FBRUEsU0FBU0Usc0JBQVQsQ0FBZ0NDLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNMLFVBQVgsR0FBd0JLLEdBQXhCLEdBQThCO0FBQUUsZUFBV0E7QUFBYixHQUFyQztBQUEwRDs7QUFpQ2pHLElBQUlDLE1BQU0sR0FBRyxDQUFDLEdBQUdMLE1BQU0sQ0FBQ00sS0FBWCxFQUFrQixVQUFVQyxLQUFWLEVBQWlCQyxFQUFqQixFQUFxQjtBQUNsRCxNQUFJQyxNQUFNLEdBQUcsQ0FBQyxHQUFHVCxNQUFNLENBQUNVLE1BQVgsRUFBbUJILEtBQW5CLEVBQTBCQyxFQUExQixDQUFiO0FBQ0EsU0FBTyxDQUFDLEdBQUdSLE1BQU0sQ0FBQ1UsTUFBWCxFQUFtQkgsS0FBbkIsRUFBMEIsWUFBWTtBQUMzQyxTQUFLLElBQUlJLElBQUksR0FBR0MsU0FBUyxDQUFDQyxNQUFyQixFQUE2QkMsSUFBSSxHQUFHLElBQUlDLEtBQUosQ0FBVUosSUFBVixDQUFwQyxFQUFxREssSUFBSSxHQUFHLENBQWpFLEVBQW9FQSxJQUFJLEdBQUdMLElBQTNFLEVBQWlGSyxJQUFJLEVBQXJGLEVBQXlGO0FBQ3ZGRixNQUFBQSxJQUFJLENBQUNFLElBQUQsQ0FBSixHQUFhSixTQUFTLENBQUNJLElBQUQsQ0FBdEI7QUFDRDs7QUFFRCxRQUFJQyxXQUFXLEdBQUcsQ0FBQyxHQUFHakIsTUFBTSxDQUFDa0IsR0FBWCxFQUFnQlQsTUFBaEIsRUFBd0IsQ0FBQyxHQUFHVCxNQUFNLENBQUNtQixJQUFYLEVBQWlCTCxJQUFqQixDQUF4QixDQUFsQjtBQUNBLFFBQUlNLElBQUksR0FBRyxDQUFDLEdBQUdwQixNQUFNLENBQUNxQixLQUFYLEVBQWtCLENBQWxCLEVBQXFCQyxRQUFyQixFQUErQlIsSUFBL0IsQ0FBWDtBQUNBLFdBQU8sQ0FBQyxHQUFHZCxNQUFNLENBQUN1QixNQUFYLEVBQW1CckIsR0FBRyxDQUFDLFNBQUQsQ0FBdEIsRUFBbUNlLFdBQW5DLEVBQWdERyxJQUFoRCxDQUFQO0FBQ0QsR0FSTSxDQUFQO0FBU0QsQ0FYWSxDQUFiO0FBWUEsSUFBSUksUUFBUSxHQUFHbkIsTUFBZjtBQUNBUCxPQUFPLENBQUMsU0FBRCxDQUFQLEdBQXFCMEIsUUFBckIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JhbWRhID0gcmVxdWlyZShcInJhbWRhXCIpO1xuXG52YXIgX2FwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pbnRlcm5hbC9hcFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG4vKipcbiAqIFwibGlmdHNcIiBhIGZ1bmN0aW9uIHRvIGJlIHRoZSBzcGVjaWZpZWQgYXJpdHksIHNvIHRoYXQgaXQgbWF5IFwibWFwIG92ZXJcIiBvYmplY3RzIHRoYXQgc2F0aXNmeVxuICogdGhlIGZhbnRhc3kgbGFuZCBBcHBseSBzcGVjIG9mIGFsZ2VicmFpYyBzdHJ1Y3R1cmVzLlxuICpcbiAqIExpZnRpbmcgaXMgc3BlY2lmaWMgZm9yIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vc2NhbGF6L3NjYWxhenxzY2FsYXp9IGFuZCB7QGxpbmsgaHR0cDovL3d3dy5mdW5jdGlvbmFsamF2YS5vcmcvfGZ1bmN0aW9uYWwgamF2YX0gaW1wbGVtZW50YXRpb25zLlxuICogT2xkIHZlcnNpb24gb2YgZmFudGFzeSBsYW5kIHNwZWMgd2VyZSBub3QgY29tcGF0aWJsZSB3aXRoIHRoaXMgYXBwcm9hY2gsXG4gKiBidXQgYXMgb2YgZmFudGFzeSBsYW5kIDEuMC4wIEFwcGx5IHNwZWMgYWxzbyBhZG9wdGVkIHRoaXMgYXBwcm9hY2guXG4gKlxuICogVGhpcyBmdW5jdGlvbiBhY3RzIGFzIGludGVyb3AgZm9yIHJhbWRhIDw9IDAuMjMuMCBhbmQge0BsaW5rIGh0dHBzOi8vbW9uZXQuZ2l0aHViLmlvL21vbmV0LmpzL3xtb25ldC5qc30uXG4gKlxuICogTW9yZSBpbmZvIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmFudGFzeWxhbmQvZmFudGFzeS1sYW5kL2lzc3Vlcy81MHxoZXJlfS5cbiAqXG4gKiBAZnVuYyBsaWZ0Rk5cbiAqIEBtZW1iZXJPZiBSQVxuICogQHNpbmNlIHtAbGluayBodHRwczovL2NoYXIwbi5naXRodWIuaW8vcmFtZGEtYWRqdW5jdC8xLjIuMHx2MS4yLjB9XG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBzaWcgQXBwbHkgYSA9PiBOdW1iZXIgLT4gKGEuLi4gLT4gYSkgLT4gKGEuLi4gLT4gYSlcbiAqIEBwYXJhbSB7bnVtYmVyfSBhcml0eSBUaGUgYXJpdHkgb2YgdGhlIGxpZnRlciBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGxpZnQgaW50byBoaWdoZXIgY29udGV4dFxuICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBsaWZ0ZWQgZnVuY3Rpb25cbiAqIEBzZWUge0BsaW5rIGh0dHA6Ly9yYW1kYWpzLmNvbS9kb2NzLyNsaWZ0fFIubGlmdH0sIHtAbGluayBodHRwOi8vcmFtZGFqcy5jb20vZG9jcy8jYXB8Ui5hcH1cbiAqIEBleGFtcGxlXG4gKlxuICogY29uc3QgeyBNYXliZSB9ID0gcmVxdWlyZSgnbW9uZXQnKTtcbiAqXG4gKiBjb25zdCBhZGQzID0gKGEsIGIsIGMpID0+IGEgKyBiICsgYztcbiAqIGNvbnN0IG1hZGQzID0gUkEubGlmdEZOKDMsIGFkZDMpO1xuICpcbiAqIG1hZGQzKE1heWJlLlNvbWUoMTApLCBNYXliZS5Tb21lKDE1KSwgTWF5YmUuU29tZSgxNykpOyAvLz0+IE1heWJlLlNvbWUoNDIpXG4gKiBtYWRkMyhNYXliZS5Tb21lKDEwKSwgTWF5YmUuTm90aGluZygpLCBNYXliZS5Tb21lKDE3KSk7IC8vPT4gTWF5YmUuTm90aGluZygpXG4gKi9cbnZhciBsaWZ0Rk4gPSAoMCwgX3JhbWRhLmN1cnJ5KShmdW5jdGlvbiAoYXJpdHksIGZuKSB7XG4gIHZhciBsaWZ0ZWQgPSAoMCwgX3JhbWRhLmN1cnJ5TikoYXJpdHksIGZuKTtcbiAgcmV0dXJuICgwLCBfcmFtZGEuY3VycnlOKShhcml0eSwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgYWNjdW11bGF0b3IgPSAoMCwgX3JhbWRhLm1hcCkobGlmdGVkLCAoMCwgX3JhbWRhLmhlYWQpKGFyZ3MpKTtcbiAgICB2YXIgYXBwcyA9ICgwLCBfcmFtZGEuc2xpY2UpKDEsIEluZmluaXR5LCBhcmdzKTtcbiAgICByZXR1cm4gKDAsIF9yYW1kYS5yZWR1Y2UpKF9hcFtcImRlZmF1bHRcIl0sIGFjY3VtdWxhdG9yLCBhcHBzKTtcbiAgfSk7XG59KTtcbnZhciBfZGVmYXVsdCA9IGxpZnRGTjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7Il19