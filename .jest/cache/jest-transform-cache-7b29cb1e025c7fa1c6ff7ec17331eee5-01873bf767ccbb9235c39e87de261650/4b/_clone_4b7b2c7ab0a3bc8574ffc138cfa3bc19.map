{"version":3,"sources":["_clone.js"],"names":["_cloneRegExp","require","type","_clone","value","refFrom","refTo","deep","copy","copiedValue","len","length","idx","key","Date","valueOf","module","exports"],"mappings":"AAAA,IAAIA,YAAY,GAEhBC,OAAO,CAAC,gBAAD,CAFP;;AAIA,IAAIC,IAAI,GAERD,OAAO,CAAC,SAAD,CAFP;;AAeA,SAASE,MAAT,CAAgBC,KAAhB,EAAuBC,OAAvB,EAAgCC,KAAhC,EAAuCC,IAAvC,EAA6C;AAC3C,MAAIC,IAAI,GAAG,SAASA,IAAT,CAAcC,WAAd,EAA2B;AACpC,QAAIC,GAAG,GAAGL,OAAO,CAACM,MAAlB;AACA,QAAIC,GAAG,GAAG,CAAV;;AAEA,WAAOA,GAAG,GAAGF,GAAb,EAAkB;AAChB,UAAIN,KAAK,KAAKC,OAAO,CAACO,GAAD,CAArB,EAA4B;AAC1B,eAAON,KAAK,CAACM,GAAD,CAAZ;AACD;;AAEDA,MAAAA,GAAG,IAAI,CAAP;AACD;;AAEDP,IAAAA,OAAO,CAACO,GAAG,GAAG,CAAP,CAAP,GAAmBR,KAAnB;AACAE,IAAAA,KAAK,CAACM,GAAG,GAAG,CAAP,CAAL,GAAiBH,WAAjB;;AAEA,SAAK,IAAII,GAAT,IAAgBT,KAAhB,EAAuB;AACrBK,MAAAA,WAAW,CAACI,GAAD,CAAX,GAAmBN,IAAI,GAAGJ,MAAM,CAACC,KAAK,CAACS,GAAD,CAAN,EAAaR,OAAb,EAAsBC,KAAtB,EAA6B,IAA7B,CAAT,GAA8CF,KAAK,CAACS,GAAD,CAA1E;AACD;;AAED,WAAOJ,WAAP;AACD,GApBD;;AAsBA,UAAQP,IAAI,CAACE,KAAD,CAAZ;AACE,SAAK,QAAL;AACE,aAAOI,IAAI,CAAC,EAAD,CAAX;;AAEF,SAAK,OAAL;AACE,aAAOA,IAAI,CAAC,EAAD,CAAX;;AAEF,SAAK,MAAL;AACE,aAAO,IAAIM,IAAJ,CAASV,KAAK,CAACW,OAAN,EAAT,CAAP;;AAEF,SAAK,QAAL;AACE,aAAOf,YAAY,CAACI,KAAD,CAAnB;;AAEF;AACE,aAAOA,KAAP;AAdJ;AAgBD;;AAEDY,MAAM,CAACC,OAAP,GAAiBd,MAAjB","sourcesContent":["var _cloneRegExp =\n/*#__PURE__*/\nrequire(\"./_cloneRegExp\");\n\nvar type =\n/*#__PURE__*/\nrequire(\"../type\");\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Array} refFrom Array containing the source references\n * @param {Array} refTo Array containing the copied source references\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\n\n\nfunction _clone(value, refFrom, refTo, deep) {\n  var copy = function copy(copiedValue) {\n    var len = refFrom.length;\n    var idx = 0;\n\n    while (idx < len) {\n      if (value === refFrom[idx]) {\n        return refTo[idx];\n      }\n\n      idx += 1;\n    }\n\n    refFrom[idx + 1] = value;\n    refTo[idx + 1] = copiedValue;\n\n    for (var key in value) {\n      copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];\n    }\n\n    return copiedValue;\n  };\n\n  switch (type(value)) {\n    case 'Object':\n      return copy({});\n\n    case 'Array':\n      return copy([]);\n\n    case 'Date':\n      return new Date(value.valueOf());\n\n    case 'RegExp':\n      return _cloneRegExp(value);\n\n    default:\n      return value;\n  }\n}\n\nmodule.exports = _clone;"]}