698239c86f4471e82a014ebe9727f448
var _curry1 = require("./internal/_curry1");

var curryN = require("./curryN");

var max = require("./max");

var pluck = require("./pluck");

var reduce = require("./reduce");

var anyPass = _curry1(function anyPass(preds) {
  return curryN(reduce(max, 0, pluck('length', preds)), function () {
    var idx = 0;
    var len = preds.length;

    while (idx < len) {
      if (preds[idx].apply(this, arguments)) {
        return true;
      }

      idx += 1;
    }

    return false;
  });
});

module.exports = anyPass;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFueVBhc3MuanMiXSwibmFtZXMiOlsiX2N1cnJ5MSIsInJlcXVpcmUiLCJjdXJyeU4iLCJtYXgiLCJwbHVjayIsInJlZHVjZSIsImFueVBhc3MiLCJwcmVkcyIsImlkeCIsImxlbiIsImxlbmd0aCIsImFwcGx5IiwiYXJndW1lbnRzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsT0FBTyxHQUVYQyxPQUFPLENBQUMsb0JBQUQsQ0FGUDs7QUFJQSxJQUFJQyxNQUFNLEdBRVZELE9BQU8sQ0FBQyxVQUFELENBRlA7O0FBSUEsSUFBSUUsR0FBRyxHQUVQRixPQUFPLENBQUMsT0FBRCxDQUZQOztBQUlBLElBQUlHLEtBQUssR0FFVEgsT0FBTyxDQUFDLFNBQUQsQ0FGUDs7QUFJQSxJQUFJSSxNQUFNLEdBRVZKLE9BQU8sQ0FBQyxVQUFELENBRlA7O0FBK0JBLElBQUlLLE9BQU8sR0FFWE4sT0FBTyxDQUFDLFNBQVNNLE9BQVQsQ0FBaUJDLEtBQWpCLEVBQXdCO0FBQzlCLFNBQU9MLE1BQU0sQ0FBQ0csTUFBTSxDQUFDRixHQUFELEVBQU0sQ0FBTixFQUFTQyxLQUFLLENBQUMsUUFBRCxFQUFXRyxLQUFYLENBQWQsQ0FBUCxFQUF5QyxZQUFZO0FBQ2hFLFFBQUlDLEdBQUcsR0FBRyxDQUFWO0FBQ0EsUUFBSUMsR0FBRyxHQUFHRixLQUFLLENBQUNHLE1BQWhCOztBQUVBLFdBQU9GLEdBQUcsR0FBR0MsR0FBYixFQUFrQjtBQUNoQixVQUFJRixLQUFLLENBQUNDLEdBQUQsQ0FBTCxDQUFXRyxLQUFYLENBQWlCLElBQWpCLEVBQXVCQyxTQUF2QixDQUFKLEVBQXVDO0FBQ3JDLGVBQU8sSUFBUDtBQUNEOztBQUVESixNQUFBQSxHQUFHLElBQUksQ0FBUDtBQUNEOztBQUVELFdBQU8sS0FBUDtBQUNELEdBYlksQ0FBYjtBQWNELENBZk0sQ0FGUDs7QUFtQkFLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlIsT0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2N1cnJ5MSA9XG4vKiNfX1BVUkVfXyovXG5yZXF1aXJlKFwiLi9pbnRlcm5hbC9fY3VycnkxXCIpO1xuXG52YXIgY3VycnlOID1cbi8qI19fUFVSRV9fKi9cbnJlcXVpcmUoXCIuL2N1cnJ5TlwiKTtcblxudmFyIG1heCA9XG4vKiNfX1BVUkVfXyovXG5yZXF1aXJlKFwiLi9tYXhcIik7XG5cbnZhciBwbHVjayA9XG4vKiNfX1BVUkVfXyovXG5yZXF1aXJlKFwiLi9wbHVja1wiKTtcblxudmFyIHJlZHVjZSA9XG4vKiNfX1BVUkVfXyovXG5yZXF1aXJlKFwiLi9yZWR1Y2VcIik7XG4vKipcbiAqIFRha2VzIGEgbGlzdCBvZiBwcmVkaWNhdGVzIGFuZCByZXR1cm5zIGEgcHJlZGljYXRlIHRoYXQgcmV0dXJucyB0cnVlIGZvciBhXG4gKiBnaXZlbiBsaXN0IG9mIGFyZ3VtZW50cyBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIHByb3ZpZGVkIHByZWRpY2F0ZXMgaXNcbiAqIHNhdGlzZmllZCBieSB0aG9zZSBhcmd1bWVudHMuXG4gKlxuICogVGhlIGZ1bmN0aW9uIHJldHVybmVkIGlzIGEgY3VycmllZCBmdW5jdGlvbiB3aG9zZSBhcml0eSBtYXRjaGVzIHRoYXQgb2YgdGhlXG4gKiBoaWdoZXN0LWFyaXR5IHByZWRpY2F0ZS5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC45LjBcbiAqIEBjYXRlZ29yeSBMb2dpY1xuICogQHNpZyBbKCouLi4gLT4gQm9vbGVhbildIC0+ICgqLi4uIC0+IEJvb2xlYW4pXG4gKiBAcGFyYW0ge0FycmF5fSBwcmVkaWNhdGVzIEFuIGFycmF5IG9mIHByZWRpY2F0ZXMgdG8gY2hlY2tcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgY29tYmluZWQgcHJlZGljYXRlXG4gKiBAc2VlIFIuYWxsUGFzc1xuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIGNvbnN0IGlzQ2x1YiA9IFIucHJvcEVxKCdzdWl0JywgJ+KZoycpO1xuICogICAgICBjb25zdCBpc1NwYWRlID0gUi5wcm9wRXEoJ3N1aXQnLCAn4pmgJyk7XG4gKiAgICAgIGNvbnN0IGlzQmxhY2tDYXJkID0gUi5hbnlQYXNzKFtpc0NsdWIsIGlzU3BhZGVdKTtcbiAqXG4gKiAgICAgIGlzQmxhY2tDYXJkKHtyYW5rOiAnMTAnLCBzdWl0OiAn4pmjJ30pOyAvLz0+IHRydWVcbiAqICAgICAgaXNCbGFja0NhcmQoe3Jhbms6ICdRJywgc3VpdDogJ+KZoCd9KTsgLy89PiB0cnVlXG4gKiAgICAgIGlzQmxhY2tDYXJkKHtyYW5rOiAnUScsIHN1aXQ6ICfimaYnfSk7IC8vPT4gZmFsc2VcbiAqL1xuXG5cbnZhciBhbnlQYXNzID1cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTEoZnVuY3Rpb24gYW55UGFzcyhwcmVkcykge1xuICByZXR1cm4gY3VycnlOKHJlZHVjZShtYXgsIDAsIHBsdWNrKCdsZW5ndGgnLCBwcmVkcykpLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlkeCA9IDA7XG4gICAgdmFyIGxlbiA9IHByZWRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpZHggPCBsZW4pIHtcbiAgICAgIGlmIChwcmVkc1tpZHhdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlkeCArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBhbnlQYXNzOyJdfQ==