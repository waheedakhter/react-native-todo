{"version":3,"sources":["toUinteger32.js"],"names":["exports","__esModule","_ramda","require","toUinteger32","curryN","val","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAsBA,IAAIC,YAAY,GAAG,CAAC,GAAGF,MAAM,CAACG,MAAX,EAAmB,CAAnB,EAAsB,UAAUC,GAAV,EAAe;AACtD,SAAOA,GAAG,KAAK,CAAf;AACD,CAFkB,CAAnB;AAGA,IAAIC,QAAQ,GAAGH,YAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBO,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Converts double-precision 64-bit binary format IEEE 754 to unsigned 32 bit integer number.\n *\n * @func toUinteger32\n * @aliases toUint32\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.28.0|v2.28.0}\n * @category Math\n * @sig Number -> Number\n * @param {number} val Value to be converted.\n * @return {number}\n * @see {@link RA.toInteger32|toInteger32}, {@link http://speakingjs.com/es5/ch11.html#integers_via_bitwise_operators}\n * @example\n *\n * RA.toUinteger32(1.5); //=> 1\n * RA.toInteger32(2 ** 35); // => 0\n * RA.toInteger32(2 ** 31); // => 2147483648\n * RA.toInteger32(2 ** 30); // => 1073741824\n */\n// eslint-disable-next-line no-bitwise\nvar toUinteger32 = (0, _ramda.curryN)(1, function (val) {\n  return val >>> 0;\n});\nvar _default = toUinteger32;\nexports[\"default\"] = _default;"]}