{"version":3,"sources":["catchP.js"],"names":["exports","__esModule","_ramda","require","catchP","invoker","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAsBA,IAAIC,MAAM,GAAG,CAAC,GAAGF,MAAM,CAACG,OAAX,EAAoB,CAApB,EAAuB,OAAvB,CAAb;AACA,IAAIC,QAAQ,GAAGF,MAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBM,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Composable shortcut for `Promise.catch`.\n * The catchP function returns a Promise. It takes two arguments: a callback function for the failure of the Promise\n * and the promise instance itself.\n *\n * @func catchP\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.29.0|v2.29.0}\n * @category Function\n * @sig (a -> Promise b | b) -> Promise b\n * @param {Function} onRejected A Function called if the Promise is rejected. This function has one argument, the rejection reason.\n * @param {Promise} promise Any Promise\n * @return {Promise} Returns a Promise with dealt rejected cases\n * @see {@link RA.thenP|thenP}, {@link RA.resolveP|resolveP}, {@link RA.rejectP|rejectP}, {@link RA.allP|allP}\n *\n * @example\n *\n * RA.catchP(() => 'b', Promise.resolve('a')); //=> Promise('a')\n * RA.catchP(() => 'b', Promise.reject('a')); //=> Promise('b')\n */\nvar catchP = (0, _ramda.invoker)(1, 'catch');\nvar _default = catchP;\nexports[\"default\"] = _default;"]}