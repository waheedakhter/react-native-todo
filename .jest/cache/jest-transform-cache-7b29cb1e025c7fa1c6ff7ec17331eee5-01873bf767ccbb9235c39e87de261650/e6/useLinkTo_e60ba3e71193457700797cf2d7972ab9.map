{"version":3,"sources":["useLinkTo.tsx"],"names":["navigation","React","NavigationContext","linking","LinkingContext","linkTo","path","options","state","root","current","action"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAKA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEe,SAAA,SAAA,GAAqB;AAClC,MAAMA,UAAU,GAAGC,KAAK,CAALA,UAAAA,CAAiBC,KAAAA,CAApC,iBAAmBD,CAAnB;AACA,MAAME,OAAO,GAAGF,KAAK,CAALA,UAAAA,CAAiBG,eAAAA,CAAjC,OAAgBH,CAAhB;AAEA,MAAMI,MAAM,GAAG,KAAK,CAAL,WAAA,CACZC,UAAAA,IAAD,EAAkB;AAChB,QAAI,CAACA,IAAI,CAAJA,UAAAA,CAAL,GAAKA,CAAL,EAA2B;AACzB,YAAM,IAAA,KAAA,CAAA,iCAAA,MAAA,CAAA,IAAA,EAAN,IAAM,CAAA,CAAN;AACD;;AAED,QAAIN,UAAU,KAAd,SAAA,EAA8B;AAC5B,YAAM,IAAA,KAAA,CAAN,sFAAM,CAAN;AAGD;;AAED,QAAQO,OAAR,GAAA,OAAA,CAAQA,OAAR;AAEA,QAAMC,KAAK,GAAGD,OAAO,KAAPA,IAAAA,IAAAA,OAAO,KAAA,KAAPA,CAAAA,IAAAA,OAAO,CAAPA,gBAAAA,GACVA,OAAO,CAAPA,gBAAAA,CAAAA,IAAAA,EAA+BA,OAAO,CAD5BA,MACVA,CADUA,GAEV,CAAA,GAAA,KAAA,CAAA,gBAAA,EAAA,IAAA,EAAuBA,OAAvB,KAAA,IAAuBA,IAAAA,OAAvB,KAAA,KAAA,CAAuBA,GAAvB,KAAA,CAAuBA,GAAAA,OAAO,CAFlC,MAEI,CAFJ;;AAIA,QAAA,KAAA,EAAW;AACT,UAAIE,IAAI,GAAR,UAAA;AACA,UAFS,OAET;;AAGA,aAAQC,OAAO,GAAGD,IAAI,CAAtB,SAAkBA,EAAlB,EAAqC;AACnCA,QAAAA,IAAI,GAAJA,OAAAA;AACD;;AAED,UAAME,MAAM,GAAG,CAAA,GAAA,KAAA,CAAA,kBAAA,EAAA,KAAA,EAA0BJ,OAA1B,KAAA,IAA0BA,IAAAA,OAA1B,KAAA,KAAA,CAA0BA,GAA1B,KAAA,CAA0BA,GAAAA,OAAO,CAAhD,MAAe,CAAf;;AAEA,UAAII,MAAM,KAAV,SAAA,EAA0B;AACxBF,QAAAA,IAAI,CAAJA,QAAAA,CAAAA,MAAAA;AADF,OAAA,MAEO;AACLA,QAAAA,IAAI,CAAJA,KAAAA,CAAAA,KAAAA;AACD;AAfH,KAAA,MAgBO;AACL,YAAM,IAAA,KAAA,CAAN,iDAAM,CAAN;AACD;AApCU,GAAA,EAsCb,CAAA,OAAA,EAtCF,UAsCE,CAtCa,CAAf;AAyCA,SAAA,MAAA;AACD","sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath,\n  getActionFromState,\n  NavigationContext,\n} from '@react-navigation/core';\nimport LinkingContext from './LinkingContext';\n\nexport default function useLinkTo() {\n  const navigation = React.useContext(NavigationContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (path: string) => {\n      if (!path.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${path}).`);\n      }\n\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside a screen in a navigator?\"\n        );\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(path, options.config)\n        : getStateFromPath(path, options?.config);\n\n      if (state) {\n        let root = navigation;\n        let current;\n\n        // Traverse up to get the root navigation\n        while ((current = root.getParent())) {\n          root = current;\n        }\n\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          root.dispatch(action);\n        } else {\n          root.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n"]}