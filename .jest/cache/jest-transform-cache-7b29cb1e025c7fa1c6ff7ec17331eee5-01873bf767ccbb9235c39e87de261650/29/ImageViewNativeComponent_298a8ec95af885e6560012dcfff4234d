90ea02d613c59de006c2c0d707f40525
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var NativeComponentRegistry = _interopRequireWildcard(require("../NativeComponent/NativeComponentRegistry"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var ImageViewNativeComponent = NativeComponentRegistry.get('RCTImageView', function () {
  return {
    uiViewClassName: 'RCTImageView',
    bubblingEventTypes: {},
    directEventTypes: {
      topLoadStart: {
        registrationName: 'onLoadStart'
      },
      topProgress: {
        registrationName: 'onProgress'
      },
      topError: {
        registrationName: 'onError'
      },
      topPartialLoad: {
        registrationName: 'onPartialLoad'
      },
      topLoad: {
        registrationName: 'onLoad'
      },
      topLoadEnd: {
        registrationName: 'onLoadEnd'
      }
    },
    validAttributes: {
      blurRadius: true,
      capInsets: {
        diff: require('../Utilities/differ/insetsDiffer')
      },
      defaultSource: {
        process: require('./resolveAssetSource')
      },
      defaultSrc: true,
      fadeDuration: true,
      headers: true,
      internal_analyticTag: true,
      loadingIndicatorSrc: true,
      onError: true,
      onLoad: true,
      onLoadEnd: true,
      onLoadStart: true,
      onPartialLoad: true,
      onProgress: true,
      overlayColor: {
        process: require('../StyleSheet/processColor')
      },
      progressiveRenderingEnabled: true,
      resizeMethod: true,
      resizeMode: true,
      shouldNotifyLoadEvents: true,
      source: true,
      src: true,
      tintColor: {
        process: require('../StyleSheet/processColor')
      }
    }
  };
});
var _default = ImageViewNativeComponent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkltYWdlVmlld05hdGl2ZUNvbXBvbmVudC5qcyJdLCJuYW1lcyI6WyJJbWFnZVZpZXdOYXRpdmVDb21wb25lbnQiLCJOYXRpdmVDb21wb25lbnRSZWdpc3RyeSIsImdldCIsInVpVmlld0NsYXNzTmFtZSIsImJ1YmJsaW5nRXZlbnRUeXBlcyIsImRpcmVjdEV2ZW50VHlwZXMiLCJ0b3BMb2FkU3RhcnQiLCJyZWdpc3RyYXRpb25OYW1lIiwidG9wUHJvZ3Jlc3MiLCJ0b3BFcnJvciIsInRvcFBhcnRpYWxMb2FkIiwidG9wTG9hZCIsInRvcExvYWRFbmQiLCJ2YWxpZEF0dHJpYnV0ZXMiLCJibHVyUmFkaXVzIiwiY2FwSW5zZXRzIiwiZGlmZiIsInJlcXVpcmUiLCJkZWZhdWx0U291cmNlIiwicHJvY2VzcyIsImRlZmF1bHRTcmMiLCJmYWRlRHVyYXRpb24iLCJoZWFkZXJzIiwiaW50ZXJuYWxfYW5hbHl0aWNUYWciLCJsb2FkaW5nSW5kaWNhdG9yU3JjIiwib25FcnJvciIsIm9uTG9hZCIsIm9uTG9hZEVuZCIsIm9uTG9hZFN0YXJ0Iiwib25QYXJ0aWFsTG9hZCIsIm9uUHJvZ3Jlc3MiLCJvdmVybGF5Q29sb3IiLCJwcm9ncmVzc2l2ZVJlbmRlcmluZ0VuYWJsZWQiLCJyZXNpemVNZXRob2QiLCJyZXNpemVNb2RlIiwic2hvdWxkTm90aWZ5TG9hZEV2ZW50cyIsInNvdXJjZSIsInNyYyIsInRpbnRDb2xvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFhQTs7Ozs7O0FBeUJBLElBQU1BLHdCQUE4QyxHQUFHQyx1QkFBdUIsQ0FBQ0MsR0FBeEIsQ0FDckQsY0FEcUQsRUFFckQ7QUFBQSxTQUFPO0FBQ0xDLElBQUFBLGVBQWUsRUFBRSxjQURaO0FBRUxDLElBQUFBLGtCQUFrQixFQUFFLEVBRmY7QUFHTEMsSUFBQUEsZ0JBQWdCLEVBQUU7QUFDaEJDLE1BQUFBLFlBQVksRUFBRTtBQUNaQyxRQUFBQSxnQkFBZ0IsRUFBRTtBQUROLE9BREU7QUFJaEJDLE1BQUFBLFdBQVcsRUFBRTtBQUNYRCxRQUFBQSxnQkFBZ0IsRUFBRTtBQURQLE9BSkc7QUFPaEJFLE1BQUFBLFFBQVEsRUFBRTtBQUNSRixRQUFBQSxnQkFBZ0IsRUFBRTtBQURWLE9BUE07QUFVaEJHLE1BQUFBLGNBQWMsRUFBRTtBQUNkSCxRQUFBQSxnQkFBZ0IsRUFBRTtBQURKLE9BVkE7QUFhaEJJLE1BQUFBLE9BQU8sRUFBRTtBQUNQSixRQUFBQSxnQkFBZ0IsRUFBRTtBQURYLE9BYk87QUFnQmhCSyxNQUFBQSxVQUFVLEVBQUU7QUFDVkwsUUFBQUEsZ0JBQWdCLEVBQUU7QUFEUjtBQWhCSSxLQUhiO0FBdUJMTSxJQUFBQSxlQUFlLEVBQUU7QUFDZkMsTUFBQUEsVUFBVSxFQUFFLElBREc7QUFFZkMsTUFBQUEsU0FBUyxFQUFFO0FBQ1RDLFFBQUFBLElBQUksRUFBRUMsT0FBTyxDQUFDLGtDQUFEO0FBREosT0FGSTtBQUtmQyxNQUFBQSxhQUFhLEVBQUU7QUFDYkMsUUFBQUEsT0FBTyxFQUFFRixPQUFPLENBQUMsc0JBQUQ7QUFESCxPQUxBO0FBUWZHLE1BQUFBLFVBQVUsRUFBRSxJQVJHO0FBU2ZDLE1BQUFBLFlBQVksRUFBRSxJQVRDO0FBVWZDLE1BQUFBLE9BQU8sRUFBRSxJQVZNO0FBV2ZDLE1BQUFBLG9CQUFvQixFQUFFLElBWFA7QUFZZkMsTUFBQUEsbUJBQW1CLEVBQUUsSUFaTjtBQWFmQyxNQUFBQSxPQUFPLEVBQUUsSUFiTTtBQWNmQyxNQUFBQSxNQUFNLEVBQUUsSUFkTztBQWVmQyxNQUFBQSxTQUFTLEVBQUUsSUFmSTtBQWdCZkMsTUFBQUEsV0FBVyxFQUFFLElBaEJFO0FBaUJmQyxNQUFBQSxhQUFhLEVBQUUsSUFqQkE7QUFrQmZDLE1BQUFBLFVBQVUsRUFBRSxJQWxCRztBQW1CZkMsTUFBQUEsWUFBWSxFQUFFO0FBQ1paLFFBQUFBLE9BQU8sRUFBRUYsT0FBTyxDQUFDLDRCQUFEO0FBREosT0FuQkM7QUFzQmZlLE1BQUFBLDJCQUEyQixFQUFFLElBdEJkO0FBdUJmQyxNQUFBQSxZQUFZLEVBQUUsSUF2QkM7QUF3QmZDLE1BQUFBLFVBQVUsRUFBRSxJQXhCRztBQXlCZkMsTUFBQUEsc0JBQXNCLEVBQUUsSUF6QlQ7QUEwQmZDLE1BQUFBLE1BQU0sRUFBRSxJQTFCTztBQTJCZkMsTUFBQUEsR0FBRyxFQUFFLElBM0JVO0FBNEJmQyxNQUFBQSxTQUFTLEVBQUU7QUFDVG5CLFFBQUFBLE9BQU8sRUFBRUYsT0FBTyxDQUFDLDRCQUFEO0FBRFA7QUE1Qkk7QUF2QlosR0FBUDtBQUFBLENBRnFELENBQXZEO2VBNERlakIsd0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtSZXNvbHZlZEFzc2V0U291cmNlfSBmcm9tICcuL0Fzc2V0U291cmNlUmVzb2x2ZXInO1xuaW1wb3J0IHR5cGUge0ltYWdlUHJvcHN9IGZyb20gJy4vSW1hZ2VQcm9wcyc7XG5pbXBvcnQgdHlwZSB7Vmlld1Byb3BzfSBmcm9tICcuLi9Db21wb25lbnRzL1ZpZXcvVmlld1Byb3BUeXBlcyc7XG5pbXBvcnQgKiBhcyBOYXRpdmVDb21wb25lbnRSZWdpc3RyeSBmcm9tICcuLi9OYXRpdmVDb21wb25lbnQvTmF0aXZlQ29tcG9uZW50UmVnaXN0cnknO1xuaW1wb3J0IHR5cGUge0hvc3RDb21wb25lbnR9IGZyb20gJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IHR5cGUge1xuICBDb2xvclZhbHVlLFxuICBEYW5nZXJvdXNseUltcHJlY2lzZVN0eWxlLFxuICBJbWFnZVN0eWxlUHJvcCxcbn0gZnJvbSAnLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcblxudHlwZSBQcm9wcyA9ICRSZWFkT25seTx7XG4gIC4uLkltYWdlUHJvcHMsXG4gIC4uLlZpZXdQcm9wcyxcblxuICBzdHlsZT86IEltYWdlU3R5bGVQcm9wIHwgRGFuZ2Vyb3VzbHlJbXByZWNpc2VTdHlsZSxcblxuICAvLyBpT1MgbmF0aXZlIHByb3BzXG4gIHRpbnRDb2xvcj86IENvbG9yVmFsdWUsXG5cbiAgLy8gQW5kcm9pZCBuYXRpdmUgcHJvcHNcbiAgc2hvdWxkTm90aWZ5TG9hZEV2ZW50cz86IGJvb2xlYW4sXG4gIHNyYz86ID9SZXNvbHZlZEFzc2V0U291cmNlIHwgJFJlYWRPbmx5QXJyYXk8e3VyaTogc3RyaW5nLCAuLi59PixcbiAgaGVhZGVycz86ID9zdHJpbmcsXG4gIGRlZmF1bHRTcmM/OiA/c3RyaW5nLFxuICBsb2FkaW5nSW5kaWNhdG9yU3JjPzogP3N0cmluZyxcbn0+O1xuXG5jb25zdCBJbWFnZVZpZXdOYXRpdmVDb21wb25lbnQ6IEhvc3RDb21wb25lbnQ8UHJvcHM+ID0gTmF0aXZlQ29tcG9uZW50UmVnaXN0cnkuZ2V0PFByb3BzPihcbiAgJ1JDVEltYWdlVmlldycsXG4gICgpID0+ICh7XG4gICAgdWlWaWV3Q2xhc3NOYW1lOiAnUkNUSW1hZ2VWaWV3JyxcbiAgICBidWJibGluZ0V2ZW50VHlwZXM6IHt9LFxuICAgIGRpcmVjdEV2ZW50VHlwZXM6IHtcbiAgICAgIHRvcExvYWRTdGFydDoge1xuICAgICAgICByZWdpc3RyYXRpb25OYW1lOiAnb25Mb2FkU3RhcnQnLFxuICAgICAgfSxcbiAgICAgIHRvcFByb2dyZXNzOiB7XG4gICAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvblByb2dyZXNzJyxcbiAgICAgIH0sXG4gICAgICB0b3BFcnJvcjoge1xuICAgICAgICByZWdpc3RyYXRpb25OYW1lOiAnb25FcnJvcicsXG4gICAgICB9LFxuICAgICAgdG9wUGFydGlhbExvYWQ6IHtcbiAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uUGFydGlhbExvYWQnLFxuICAgICAgfSxcbiAgICAgIHRvcExvYWQ6IHtcbiAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uTG9hZCcsXG4gICAgICB9LFxuICAgICAgdG9wTG9hZEVuZDoge1xuICAgICAgICByZWdpc3RyYXRpb25OYW1lOiAnb25Mb2FkRW5kJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB2YWxpZEF0dHJpYnV0ZXM6IHtcbiAgICAgIGJsdXJSYWRpdXM6IHRydWUsXG4gICAgICBjYXBJbnNldHM6IHtcbiAgICAgICAgZGlmZjogcmVxdWlyZSgnLi4vVXRpbGl0aWVzL2RpZmZlci9pbnNldHNEaWZmZXInKSxcbiAgICAgIH0sXG4gICAgICBkZWZhdWx0U291cmNlOiB7XG4gICAgICAgIHByb2Nlc3M6IHJlcXVpcmUoJy4vcmVzb2x2ZUFzc2V0U291cmNlJyksXG4gICAgICB9LFxuICAgICAgZGVmYXVsdFNyYzogdHJ1ZSxcbiAgICAgIGZhZGVEdXJhdGlvbjogdHJ1ZSxcbiAgICAgIGhlYWRlcnM6IHRydWUsXG4gICAgICBpbnRlcm5hbF9hbmFseXRpY1RhZzogdHJ1ZSxcbiAgICAgIGxvYWRpbmdJbmRpY2F0b3JTcmM6IHRydWUsXG4gICAgICBvbkVycm9yOiB0cnVlLFxuICAgICAgb25Mb2FkOiB0cnVlLFxuICAgICAgb25Mb2FkRW5kOiB0cnVlLFxuICAgICAgb25Mb2FkU3RhcnQ6IHRydWUsXG4gICAgICBvblBhcnRpYWxMb2FkOiB0cnVlLFxuICAgICAgb25Qcm9ncmVzczogdHJ1ZSxcbiAgICAgIG92ZXJsYXlDb2xvcjoge1xuICAgICAgICBwcm9jZXNzOiByZXF1aXJlKCcuLi9TdHlsZVNoZWV0L3Byb2Nlc3NDb2xvcicpLFxuICAgICAgfSxcbiAgICAgIHByb2dyZXNzaXZlUmVuZGVyaW5nRW5hYmxlZDogdHJ1ZSxcbiAgICAgIHJlc2l6ZU1ldGhvZDogdHJ1ZSxcbiAgICAgIHJlc2l6ZU1vZGU6IHRydWUsXG4gICAgICBzaG91bGROb3RpZnlMb2FkRXZlbnRzOiB0cnVlLFxuICAgICAgc291cmNlOiB0cnVlLFxuICAgICAgc3JjOiB0cnVlLFxuICAgICAgdGludENvbG9yOiB7XG4gICAgICAgIHByb2Nlc3M6IHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJyksXG4gICAgICB9LFxuICAgIH0sXG4gIH0pLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgSW1hZ2VWaWV3TmF0aXZlQ29tcG9uZW50O1xuIl19