{"version":3,"sources":["unzipObjWith.js"],"names":["exports","__esModule","_ramda","require","_lengthEq","_interopRequireDefault","obj","unzipObjWith","curryN","fn","pipe","toPairs","map","flip","apply","transpose","when","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,SAAS,GAAGC,sBAAsB,CAACF,OAAO,CAAC,YAAD,CAAR,CAAtC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAmBjG,IAAIC,YAAY,GAAG,CAAC,GAAGL,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsB,UAAUC,EAAV,EAAcH,GAAd,EAAmB;AAC1D,SAAO,CAAC,GAAGJ,MAAM,CAACQ,IAAX,EAAiBR,MAAM,CAACS,OAAxB,EAAiC,CAAC,GAAGT,MAAM,CAACU,GAAX,EAAgB,CAAC,GAAGV,MAAM,CAACQ,IAAX,EAAiBR,MAAM,CAACW,IAAxB,EAA8BX,MAAM,CAACY,KAArC,EAA4CL,EAA5C,CAAhB,CAAjC,EAAmGP,MAAM,CAACa,SAA1G,EAAqH,CAAC,GAAGb,MAAM,CAACc,IAAX,EAAiB,CAAC,GAAGZ,SAAS,CAAC,SAAD,CAAb,EAA0B,CAA1B,CAAjB,EAA+C,YAAY;AACrL,WAAO,CAAC,EAAD,EAAK,EAAL,CAAP;AACD,GAF2H,CAArH,EAEHE,GAFG,CAAP;AAGD,CAJkB,CAAnB;AAKA,IAAIW,QAAQ,GAAGV,YAAf;AACAP,OAAO,CAAC,SAAD,CAAP,GAAqBiB,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _lengthEq = _interopRequireDefault(require(\"./lengthEq\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Creates a new list out of the supplied object by applying the function to each key/value pairing.\n *\n * @func unzipObjWith\n * @memberOf RA\n * @category Object\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @sig  (v, k) => [k, v] -> { k: v } -> [[k], [v]]\n * @param {Function} fn The function to transform each value-key pair\n * @param {Object} obj Object to unzip\n * @return {Array} A pair of tw lists: a list of keys and a list of values\n * @see {@link https://ramdajs.com/docs/#zipObj|zipObj}, {@link RA.zipObjWith|zipObjWith}\n * @example\n *\n * RA.unzipObjWith((v, k) => [`new${k.toUpperCase()}`, 2 * v], { a: 1, b: 2, c: 3 });\n * //=> [['newA', 'newB', 'newC'], [2, 4, 6]]\n */\nvar unzipObjWith = (0, _ramda.curryN)(2, function (fn, obj) {\n  return (0, _ramda.pipe)(_ramda.toPairs, (0, _ramda.map)((0, _ramda.pipe)(_ramda.flip, _ramda.apply)(fn)), _ramda.transpose, (0, _ramda.when)((0, _lengthEq[\"default\"])(0), function () {\n    return [[], []];\n  }))(obj);\n});\nvar _default = unzipObjWith;\nexports[\"default\"] = _default;"]}