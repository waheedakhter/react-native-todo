{"version":3,"sources":["tap.js"],"names":["_curry2","require","_dispatchable","_xtap","tap","fn","x","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAEXC,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIC,aAAa,GAEjBD,OAAO,CAAC,0BAAD,CAFP;;AAIA,IAAIE,KAAK,GAETF,OAAO,CAAC,kBAAD,CAFP;;AAyBA,IAAIG,GAAG,GAEPJ,OAAO,CAEPE,aAAa,CAAC,EAAD,EAAKC,KAAL,EAAY,SAASC,GAAT,CAAaC,EAAb,EAAiBC,CAAjB,EAAoB;AAC3CD,EAAAA,EAAE,CAACC,CAAD,CAAF;AACA,SAAOA,CAAP;AACD,CAHY,CAFN,CAFP;;AASAC,MAAM,CAACC,OAAP,GAAiBJ,GAAjB","sourcesContent":["var _curry2 =\n/*#__PURE__*/\nrequire(\"./internal/_curry2\");\n\nvar _dispatchable =\n/*#__PURE__*/\nrequire(\"./internal/_dispatchable\");\n\nvar _xtap =\n/*#__PURE__*/\nrequire(\"./internal/_xtap\");\n/**\n * Runs the given function with the supplied object, then returns the object.\n *\n * Acts as a transducer if a transformer is given as second parameter.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> *) -> a -> a\n * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n * @param {*} x\n * @return {*} `x`.\n * @example\n *\n *      const sayX = x => console.log('x is ' + x);\n *      R.tap(sayX, 100); //=> 100\n *      // logs 'x is 100'\n * @symb R.tap(f, a) = a\n */\n\n\nvar tap =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_dispatchable([], _xtap, function tap(fn, x) {\n  fn(x);\n  return x;\n}));\n\nmodule.exports = tap;"]}