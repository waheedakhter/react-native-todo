{"version":3,"sources":["dropArgs.js"],"names":["exports","__esModule","_ramda","require","dropArgs","nAry","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAoBA,IAAIC,QAAQ,GAAG,CAAC,GAAGF,MAAM,CAACG,IAAX,EAAiB,CAAjB,CAAf;AACA,IAAIC,QAAQ,GAAGF,QAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBM,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Accepts a function with any arity and returns a function with arity of zero.\n * The returned function ignores any arguments supplied to it.\n *\n * @func dropArgs\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.10.0|v2.10.0}\n * @category Logic\n * @sig (...a -> b)-> () -> b\n * @param {Function} fn The function with any arity\n * @return {Function} Returns function with arity of zero\n * @see {@link http://ramdajs.com/docs/#nAry|R.nAry}\n * @example\n *\n * const fn = (a = 1, b = 2) => a + b;\n *\n * RA.dropArgs(fn)('ignore1', 'ignore2'); //=> 3\n */\nvar dropArgs = (0, _ramda.nAry)(0);\nvar _default = dropArgs;\nexports[\"default\"] = _default;"]}