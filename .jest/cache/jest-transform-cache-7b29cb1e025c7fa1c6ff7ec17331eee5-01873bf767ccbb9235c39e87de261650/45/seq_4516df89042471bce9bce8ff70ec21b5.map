{"version":3,"sources":["seq.js"],"names":["exports","__esModule","_ramda","require","seq","curry","fns","x","tap","tx","map","fn","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAoCA,IAAIC,GAAG,GAAG,CAAC,GAAGF,MAAM,CAACG,KAAX,EAAkB,UAAUC,GAAV,EAAeC,CAAf,EAAkB;AAC5C,SAAO,CAAC,GAAGL,MAAM,CAACM,GAAX,EAAgB,UAAUC,EAAV,EAAc;AACnC,WAAO,CAAC,GAAGP,MAAM,CAACQ,GAAX,EAAgB,UAAUC,EAAV,EAAc;AACnC,aAAOA,EAAE,CAACF,EAAD,CAAT;AACD,KAFM,EAEJH,GAFI,CAAP;AAGD,GAJM,EAIJC,CAJI,CAAP;AAKD,CANS,CAAV;AAOA,IAAIK,QAAQ,GAAGR,GAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBY,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/* eslint-disable max-len */\n\n/**\n * Runs the given list of functions in order with the supplied object, then returns the object.\n * Also known as the normal order sequencing combinator.\n *\n * Acts as a transducer if a transformer is given as second parameter.\n *\n * @func seq\n * @aliases sequencing\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.3.0|v2.3.0}\n * @category Function\n * @sig [(a -> *), (a -> *), ...] -> a -> a\n * @param {Array} fns The list of functions to call in order with `x` whose return values will be thrown away\n * @param {*} x\n * @return {*} `x`\n * @see {@link http://ramdajs.com/docs/#tap|R.tap}, {@link http://www.cs.rpi.edu/academics/courses/spring11/proglang/handouts/lambda-calculus-chapter.pdf|sequencing combinator explained}\n * @example\n *\n * RA.seq([console.info, console.log])('foo'); //=> prints 'foo' via info then log\n *\n * // usage in composition\n * R.pipe(\n *   R.concat('prefix '),\n *   RA.seq([\n *     console.info, //=> prints 'prefix test'\n *     console.log //=> prints 'prefix test'\n *   ]),\n *   R.toUpper\n * )('test'); //=> 'PREFIX TEST'\n */\n\n/* eslint-enable max-len */\nvar seq = (0, _ramda.curry)(function (fns, x) {\n  return (0, _ramda.tap)(function (tx) {\n    return (0, _ramda.map)(function (fn) {\n      return fn(tx);\n    })(fns);\n  })(x);\n});\nvar _default = seq;\nexports[\"default\"] = _default;"]}