{"version":3,"sources":["pathNotEq.js"],"names":["exports","__esModule","_ramda","require","pathNotEq","complement","pathEq","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AA8BA,IAAIC,SAAS,GAAG,CAAC,GAAGF,MAAM,CAACG,UAAX,EAAuBH,MAAM,CAACI,MAA9B,CAAhB;AACA,IAAIC,QAAQ,GAAGH,SAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBO,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/* eslint-disable max-len */\n\n/**\n * Determines whether a nested path on an object doesn't have a specific value,\n * in R.equals terms. Most likely used to filter a list.\n *\n * @func pathNotEq\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.4.0|v2.4.0}\n * @category Relation\n * @sig [Idx] => a => {a} => Boolean\n * @sig Idx = String | Int\n * @param {Array} path The path of the nested property to use\n * @param {a} val The value to compare the nested property with\n * @param {Object} object The object to check the nested property in\n * @return {boolean} Returns Boolean `false` if the value equals the nested object property, `true` otherwise\n * @see {@link http://ramdajs.com/docs/#pathEq|R.pathEq}\n * @example\n *\n * const user1 = { address: { zipCode: 90210 } };\n * const user2 = { address: { zipCode: 55555 } };\n * const user3 = { name: 'Bob' };\n * const users = [ user1, user2, user3 ];\n * const isFamous = R.pathNotEq(['address', 'zipCode'], 90210);\n * R.filter(isFamous, users); //=> [ user2, user3 ]\n */\n\n/* eslint-enable max-len */\nvar pathNotEq = (0, _ramda.complement)(_ramda.pathEq);\nvar _default = pathNotEq;\nexports[\"default\"] = _default;"]}