{"version":3,"sources":["rangeStep.js"],"names":["exports","__esModule","_ramda","require","_floor","_interopRequireDefault","obj","rangeStep","curryN","step","from","to","callback","always","n","rangeEnd","map","range","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACF,OAAO,CAAC,SAAD,CAAR,CAAnC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AA2BjG,IAAIC,SAAS,GAAG,CAAC,GAAGL,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,EAAtB,EAA0B;AAC9D,MAAIC,QAAQ,GAAGH,IAAI,KAAK,CAAT,GAAa,CAAC,GAAGP,MAAM,CAACW,MAAX,EAAmBH,IAAnB,CAAb,GAAwC,UAAUI,CAAV,EAAa;AAClE,WAAOJ,IAAI,GAAGD,IAAI,GAAGK,CAArB;AACD,GAFD;AAGA,MAAIC,QAAQ,GAAGN,IAAI,KAAK,CAAT,GAAaE,EAAE,GAAGD,IAAlB,GAAyB,CAAC,GAAGN,MAAM,CAAC,SAAD,CAAV,EAAuB,CAACO,EAAE,GAAGD,IAAN,IAAcD,IAArC,CAAxC;AACA,SAAO,CAAC,GAAGP,MAAM,CAACc,GAAX,EAAgBJ,QAAhB,EAA0B,CAAC,GAAGV,MAAM,CAACe,KAAX,EAAkB,CAAlB,EAAqBF,QAArB,CAA1B,CAAP;AACD,CANe,CAAhB;AAOA,IAAIG,QAAQ,GAAGX,SAAf;AACAP,OAAO,CAAC,SAAD,CAAP,GAAqBkB,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _floor = _interopRequireDefault(require(\"./floor\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from start up to, but not including, end.\n *\n * `Note`: JavaScript follows the IEEE-754 standard for resolving floating-point values which can produce unexpected results.\n *\n * @func rangeStep\n * @memberOf RA\n * @category List\n * @since {@link https://char0n.github.io/ramda-adjunct/2.30.0|v2.30.0}\n * @sig Number -> Number -> Number -> [Number]\n * @param {number} step The value to increment or decrement by\n * @param {number} from The start of the range\n * @param {number} to The end of the range\n * @return {number[]} Returns the range of numbers\n * @see {@link http://ramdajs.com/docs/#range|R.range}\n * @example\n *\n * RA.rangeStep(1, 0, 4); // => [0, 1 ,2, 3]\n * RA.rangeStep(-1, 0, -4); // => [0, -1, -2, -3]\n * RA.rangeStep(1, 1, 5); // => [1, 2, 3, 4]\n * RA.rangeStep(5, 0, 20); // => [0, 5, 10, 15]\n * RA.rangeStep(-1, 0, -4); // => [0, -1, -2, -3]\n * RA.rangeStep(0, 1, 4); // => [1, 1, 1]\n * RA.rangeStep(1, 0, 0); // => []\n */\nvar rangeStep = (0, _ramda.curryN)(3, function (step, from, to) {\n  var callback = step === 0 ? (0, _ramda.always)(from) : function (n) {\n    return from + step * n;\n  };\n  var rangeEnd = step === 0 ? to - from : (0, _floor[\"default\"])((to - from) / step);\n  return (0, _ramda.map)(callback, (0, _ramda.range)(0, rangeEnd));\n});\nvar _default = rangeStep;\nexports[\"default\"] = _default;"]}