{"version":3,"sources":["createNativeWrapper.tsx"],"names":["NATIVE_WRAPPER_PROPS_FILTER","nativeViewProps","config","ComponentWrapper","gestureHandlerProps","allowedKeys","res","props","_ref","_gestureHandlerRef","node","Component"],"mappings":";;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAGA,IAAA,yBAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAMA,2BAA2B,8CAC5BC,yBAAAA,CAD+B,eAAH,IAAG,uBAAH,EAAjC,6BAAiC,EAAjC;;AAMe,SAAA,mBAAA,CAAA,SAAA,EAGb;AAAA,MADAC,MACA,uEAHa,EAGb;AACA,MAAMC,gBAAgB,GAAG,KAAK,CAAL,UAAA,CAGvB,UAAA,KAAA,EAAA,GAAA,EAAgB;AAEhB,QAAMC,mBAAmB,GAAG,MAAM,CAAN,IAAA,CAAA,KAAA,EAAA,MAAA,CAC1B,UAAA,GAAA,EAAA,GAAA,EAAc;AAEZ,UAAMC,WAA8B,GAApC,2BAAA;;AACA,UAAIA,WAAW,CAAXA,QAAAA,CAAJ,GAAIA,CAAJ,EAA+B;AAE7BC,QAAAA,GAAG,CAAHA,GAAG,CAAHA,GAAWC,KAAK,CAAhBD,GAAgB,CAAhBA;AACD;;AACD,aAAA,GAAA;AARwB,KAAA,6BAUrBJ,MAVqB,EAA5B;;AAYA,QAAMM,IAAI,GAAG,CAAA,GAAA,KAAA,CAAb,MAAa,GAAb;;AACA,QAAMC,kBAAkB,GAAG,CAAA,GAAA,KAAA,CAA3B,MAA2B,GAA3B;;AACA,KAAA,GAAA,KAAA,CAAA,mBAAA,EAAA,GAAA,EAGE,YAAM;AACJ,UAAMC,IAAI,GAAGD,kBAAkB,CAD3B,OACJ;;AAEA,UAAID,IAAI,CAAJA,OAAAA,IAAJ,IAAA,EAA0B;AAExBA,QAAAA,IAAI,CAAJA,OAAAA,CAAAA,UAAAA,GAA0BE,IAAI,CAA9BF,UAAAA;AACA,eAAOA,IAAI,CAAX,OAAA;AACD;;AACD,aAAA,IAAA;AAXJ,KAAA,EAaE,CAAA,IAAA,EAbF,kBAaE,CAbF;AAeA,WACE,KAAA,CAAA,aAAA,CAAC,yBAAA,CAAD,wBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,mBAAA,EAAA;AAGE,MAAA,GAAG,EAAEC;AAHP,KAAA,CAAA,EAIE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAsB,MAAA,GAAG,EAAED;AAA3B,KAAA,CAAA,CAJF,CADF;AAlCF,GAAyB,CAAzB;AA4CAL,EAAAA,gBAAgB,CAAhBA,WAAAA,GAA+BQ,SAAS,CAATA,WAAAA,IAA/BR,kBAAAA;AAEA,SAAA,gBAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { useImperativeHandle, useRef } from 'react';\n\nimport {\n  NativeViewGestureHandler,\n  NativeViewGestureHandlerProps,\n  nativeViewProps,\n} from './NativeViewGestureHandler';\n\n/*\n * This array should consist of:\n *   - All keys in propTypes from NativeGestureHandler\n *     (and all keys in GestureHandlerPropTypes)\n *   - 'onGestureHandlerEvent'\n *   - 'onGestureHandlerStateChange'\n */\nconst NATIVE_WRAPPER_PROPS_FILTER = [\n  ...nativeViewProps,\n  'onGestureHandlerEvent',\n  'onGestureHandlerStateChange',\n] as const;\n\nexport default function createNativeWrapper<P>(\n  Component: React.ComponentType<P>,\n  config: Readonly<NativeViewGestureHandlerProps> = {}\n) {\n  const ComponentWrapper = React.forwardRef<\n    React.ComponentType<any>,\n    P & NativeViewGestureHandlerProps\n  >((props, ref) => {\n    // filter out props that should be passed to gesture handler wrapper\n    const gestureHandlerProps = Object.keys(props).reduce(\n      (res, key) => {\n        // TS being overly protective with it's types, see https://github.com/microsoft/TypeScript/issues/26255#issuecomment-458013731 for more info\n        const allowedKeys: readonly string[] = NATIVE_WRAPPER_PROPS_FILTER;\n        if (allowedKeys.includes(key)) {\n          // @ts-ignore FIXME(TS)\n          res[key] = props[key];\n        }\n        return res;\n      },\n      { ...config } // watch out not to modify config\n    );\n    const _ref = useRef<React.ComponentType<P>>();\n    const _gestureHandlerRef = useRef<React.ComponentType<P>>();\n    useImperativeHandle(\n      ref,\n      // @ts-ignore TODO(TS) decide how nulls work in this context\n      () => {\n        const node = _gestureHandlerRef.current;\n        // add handlerTag for relations config\n        if (_ref.current && node) {\n          // @ts-ignore FIXME(TS) think about createHandler return type\n          _ref.current.handlerTag = node.handlerTag;\n          return _ref.current;\n        }\n        return null;\n      },\n      [_ref, _gestureHandlerRef]\n    );\n    return (\n      <NativeViewGestureHandler\n        {...gestureHandlerProps}\n        // @ts-ignore TODO(TS)\n        ref={_gestureHandlerRef}>\n        <Component {...props} ref={_ref} />\n      </NativeViewGestureHandler>\n    );\n  });\n\n  ComponentWrapper.displayName = Component.displayName || 'ComponentWrapper';\n\n  return ComponentWrapper;\n}\n"]}