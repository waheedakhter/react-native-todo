{"version":3,"sources":["noneP.js"],"names":["exports","__esModule","_ramda","require","_allP","_interopRequireDefault","_rejectP","_resolveP","obj","noneP","curryN","pipe","map","p","then","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,KAAK,GAAGC,sBAAsB,CAACF,OAAO,CAAC,QAAD,CAAR,CAAlC;;AAEA,IAAIG,QAAQ,GAAGD,sBAAsB,CAACF,OAAO,CAAC,WAAD,CAAR,CAArC;;AAEA,IAAII,SAAS,GAAGF,sBAAsB,CAACF,OAAO,CAAC,YAAD,CAAR,CAAtC;;AAEA,SAASE,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACP,UAAX,GAAwBO,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAqBjG,IAAIC,KAAK,GAAG,CAAC,GAAGP,MAAM,CAACQ,MAAX,EAAmB,CAAnB,EAAsB,CAAC,GAAGR,MAAM,CAACS,IAAX,EAAiB,CAAC,GAAGT,MAAM,CAACU,GAAX,EAAgBL,SAAS,CAAC,SAAD,CAAzB,CAAjB,EAAwD,CAAC,GAAGL,MAAM,CAACU,GAAX,EAAgB,UAAUC,CAAV,EAAa;AACrH,SAAOA,CAAC,CAACC,IAAF,CAAOR,QAAQ,CAAC,SAAD,CAAf,EAA4BC,SAAS,CAAC,SAAD,CAArC,CAAP;AACD,CAFyF,CAAxD,EAE9BH,KAAK,CAAC,SAAD,CAFyB,CAAtB,CAAZ;AAGA,IAAIW,QAAQ,GAAGN,KAAf;AACAT,OAAO,CAAC,SAAD,CAAP,GAAqBe,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _allP = _interopRequireDefault(require(\"./allP\"));\n\nvar _rejectP = _interopRequireDefault(require(\"./rejectP\"));\n\nvar _resolveP = _interopRequireDefault(require(\"./resolveP\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Returns a Promise that is resolved with an array of reasons when all of the provided Promises reject, or rejected when any Promise is resolved.\n * This pattern is like allP, but fulfillments and rejections are transposed - rejections become the fulfillment values and vice versa.\n *\n * @func noneP\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category Function\n * @sig [Promise a] -> Promise [a]\n * @param {Iterable.<*>} iterable An iterable object such as an Array or String\n * @return {Promise} A Promise that is resolved with a list of rejection reasons if all Promises are rejected, or a Promise that is rejected with the fulfillment value of the first Promise that resolves.\n * @see {@link RA.allP|allP}\n * @example\n *\n * RA.noneP([Promise.reject('hello'), Promise.reject('world')]); //=> Promise(['hello', 'world'])\n * RA.noneP([]); //=> Promise([])\n * RA.noneP([Promise.reject(), Promise.resolve('hello world')]); //=> Promise('hello world')\n * RA.noneP([Promise.reject(), 'hello world']); //=> Promise('hello world')\n */\nvar noneP = (0, _ramda.curryN)(1, (0, _ramda.pipe)((0, _ramda.map)(_resolveP[\"default\"]), (0, _ramda.map)(function (p) {\n  return p.then(_rejectP[\"default\"], _resolveP[\"default\"]);\n}), _allP[\"default\"]));\nvar _default = noneP;\nexports[\"default\"] = _default;"]}