{"version":3,"sources":["isFunction.js"],"names":["exports","__esModule","_ramda","require","_isGeneratorFunction","_interopRequireDefault","_isAsyncFunction","obj","isFunction","anyPass","pipe","type","identical","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,oBAAoB,GAAGC,sBAAsB,CAACF,OAAO,CAAC,uBAAD,CAAR,CAAjD;;AAEA,IAAIG,gBAAgB,GAAGD,sBAAsB,CAACF,OAAO,CAAC,mBAAD,CAAR,CAA7C;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACN,UAAX,GAAwBM,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAsBjG,IAAIC,UAAU,GAAG,CAAC,GAAGN,MAAM,CAACO,OAAX,EAAoB,CAAC,CAAC,GAAGP,MAAM,CAACQ,IAAX,EAAiBR,MAAM,CAACS,IAAxB,EAA8B,CAAC,GAAGT,MAAM,CAACU,SAAX,EAAsB,UAAtB,CAA9B,CAAD,EAAmER,oBAAoB,CAAC,SAAD,CAAvF,EAAoGE,gBAAgB,CAAC,SAAD,CAApH,CAApB,CAAjB;AACA,IAAIO,QAAQ,GAAGL,UAAf;AACAR,OAAO,CAAC,SAAD,CAAP,GAAqBa,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isGeneratorFunction = _interopRequireDefault(require(\"./isGeneratorFunction\"));\n\nvar _isAsyncFunction = _interopRequireDefault(require(\"./isAsyncFunction\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Checks if input value is `Function`.\n *\n * @func isFunction\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.5.0|v0.5.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotFunction|isNotFunction}, {@link RA.isAsyncFunction|isNotAsyncFunction}, {@link RA.isGeneratorFunction|isGeneratorFunction}\n * @example\n *\n * RA.isFunction(function test() { }); //=> true\n * RA.isFunction(function* test() { }); //=> true\n * RA.isFunction(async function test() { }); //=> true\n * RA.isFunction(() => {}); //=> true\n * RA.isFunction(null); //=> false\n * RA.isFunction('abc'); //=> false\n */\nvar isFunction = (0, _ramda.anyPass)([(0, _ramda.pipe)(_ramda.type, (0, _ramda.identical)('Function')), _isGeneratorFunction[\"default\"], _isAsyncFunction[\"default\"]]);\nvar _default = isFunction;\nexports[\"default\"] = _default;"]}