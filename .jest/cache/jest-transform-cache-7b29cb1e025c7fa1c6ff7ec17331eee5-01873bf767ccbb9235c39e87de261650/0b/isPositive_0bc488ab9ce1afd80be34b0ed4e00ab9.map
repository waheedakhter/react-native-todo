{"version":3,"sources":["isPositive.js"],"names":["exports","__esModule","_ramda","require","_isNumber","_interopRequireDefault","obj","isPositive","both","lt","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,SAAS,GAAGC,sBAAsB,CAACF,OAAO,CAAC,YAAD,CAAR,CAAtC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAqBjG,IAAIC,UAAU,GAAG,CAAC,GAAGL,MAAM,CAACM,IAAX,EAAiBJ,SAAS,CAAC,SAAD,CAA1B,EAAuC,CAAC,GAAGF,MAAM,CAACO,EAAX,EAAe,CAAf,CAAvC,CAAjB;AACA,IAAIC,QAAQ,GAAGH,UAAf;AACAP,OAAO,CAAC,SAAD,CAAP,GAAqBU,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isNumber = _interopRequireDefault(require(\"./isNumber\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Checks if value is a positive `Number` primitive or object. Zero is not considered positive.\n *\n * @func isPositive\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.15.0|v1.15.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNegative|isNegative}\n * @example\n *\n * RA.isPositive(1); // => true\n * RA.isPositive(Number.MAX_VALUE); // => true\n * RA.isPositive(-Infinity); // => false\n * RA.isPositive(NaN); // => false\n * RA.isPositive('5'); // => false\n */\nvar isPositive = (0, _ramda.both)(_isNumber[\"default\"], (0, _ramda.lt)(0));\nvar _default = isPositive;\nexports[\"default\"] = _default;"]}