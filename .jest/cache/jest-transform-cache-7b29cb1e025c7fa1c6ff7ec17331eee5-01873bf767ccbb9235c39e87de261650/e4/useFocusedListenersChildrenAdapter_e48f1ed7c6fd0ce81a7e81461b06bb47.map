{"version":3,"sources":["useFocusedListenersChildrenAdapter.tsx"],"names":["focusedListeners","addListener","React","NavigationBuilderContext","listener","callback","navigation","result","handled"],"mappings":";;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,yBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,4BAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAce,SAAA,kCAAA,OAGH;AAAA,MAH+C,UAG/C,QAH+C,UAG/C;AAAA,MADVA,gBACU,QADVA,gBACU;;AACV,0BAAwBE,KAAK,CAALA,UAAAA,CAAiBC,yBAAAA,CAAzC,OAAwBD,CAAxB;AAAA,MAAQD,WAAR,qBAAQA,WAAR;;AAEA,MAAMG,QAAQ,GAAG,KAAK,CAAL,WAAA,CACdC,UAAAA,QAAD,EAA8C;AAC5C,QAAIC,UAAU,CAAd,SAAIA,EAAJ,EAA4B;AAC1B,2DAAA,gBAAA,wCAAyC;AAAA,YAAzC,SAAyC;;AACvC,yBAA4BF,SAAQ,CAApC,QAAoC,CAApC;AAAA,YAAM,OAAN,cAAM,OAAN;AAAA,YAAiBG,MAAjB,cAAiBA,MAAjB;;AAEA,YAAA,OAAA,EAAa;AACX,iBAAO;AAAEC,YAAAA,OAAF,EAAEA,OAAF;AAAWD,YAAAA,MAAAA,EAAAA;AAAX,WAAP;AACD;AACF;;AAED,aAAO;AAAEC,QAAAA,OAAO,EAAT,IAAA;AAAiBD,QAAAA,MAAM,EAAEF,QAAQ,CAAA,UAAA;AAAjC,OAAP;AATF,KAAA,MAUO;AACL,aAAO;AAAEG,QAAAA,OAAO,EAAT,KAAA;AAAkBD,QAAAA,MAAM,EAAE;AAA1B,OAAP;AACD;AAdY,GAAA,EAgBf,CAAA,gBAAA,EAhBF,UAgBE,CAhBe,CAAjB;AAmBAL,EAAAA,KAAK,CAALA,SAAAA,CAAgB;AAAA,WAAMD,WAAN,KAAA,IAAMA,IAAAA,WAAN,KAAA,KAAA,CAAMA,GAAN,KAAA,CAAMA,GAAAA,WAAW,CAAA,OAAA,EAAjCC,QAAiC,CAAjB;AAAA,GAAhBA,EAAwD,CAAA,WAAA,EAAxDA,QAAwD,CAAxDA;AAID","sourcesContent":["import * as React from 'react';\nimport type { ParamListBase } from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(() => addListener?.('focus', listener), [\n    addListener,\n    listener,\n  ]);\n}\n"]}