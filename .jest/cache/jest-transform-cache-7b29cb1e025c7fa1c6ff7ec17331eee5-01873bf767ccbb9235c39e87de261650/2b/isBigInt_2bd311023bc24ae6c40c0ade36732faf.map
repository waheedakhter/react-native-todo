{"version":3,"sources":["isBigInt.js"],"names":["exports","__esModule","_ramda","require","isBigInt","curryN","pipe","type","identical","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAqBA,IAAIC,QAAQ,GAAG,CAAC,GAAGF,MAAM,CAACG,MAAX,EAAmB,CAAnB,EAAsB,CAAC,GAAGH,MAAM,CAACI,IAAX,EAAiBJ,MAAM,CAACK,IAAxB,EAA8B,CAAC,GAAGL,MAAM,CAACM,SAAX,EAAsB,QAAtB,CAA9B,CAAtB,CAAf;AACA,IAAIC,QAAQ,GAAGL,QAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBS,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Checks if value is a BigInt.\n *\n * @func isBigInt\n * @memberOf RA\n * @category Type\n * @since {@link https://char0n.github.io/ramda-adjunct/2.27.0|v2.27.0}\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @example\n *\n * RA.isBigInt(5); // => false\n * RA.isBigInt(Number.MAX_VALUE); // => false\n * RA.isBigInt(-Infinity); // => false\n * RA.isBigInt(10); // => false\n * RA.isBigInt(10n); // => true\n * RA.isBigInt(BitInt(9007199254740991)); // => true\n */\nvar isBigInt = (0, _ramda.curryN)(1, (0, _ramda.pipe)(_ramda.type, (0, _ramda.identical)('BigInt')));\nvar _default = isBigInt;\nexports[\"default\"] = _default;"]}