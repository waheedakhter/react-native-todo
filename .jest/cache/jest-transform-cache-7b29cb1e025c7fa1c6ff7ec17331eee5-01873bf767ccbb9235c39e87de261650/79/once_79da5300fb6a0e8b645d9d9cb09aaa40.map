{"version":3,"sources":["once.js"],"names":["_arity","require","_curry1","once","fn","called","result","length","apply","arguments","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAEVC,OAAO,CAAC,mBAAD,CAFP;;AAIA,IAAIC,OAAO,GAEXD,OAAO,CAAC,oBAAD,CAFP;;AAwBA,IAAIE,IAAI,GAERD,OAAO,CAAC,SAASC,IAAT,CAAcC,EAAd,EAAkB;AACxB,MAAIC,MAAM,GAAG,KAAb;AACA,MAAIC,MAAJ;AACA,SAAON,MAAM,CAACI,EAAE,CAACG,MAAJ,EAAY,YAAY;AACnC,QAAIF,MAAJ,EAAY;AACV,aAAOC,MAAP;AACD;;AAEDD,IAAAA,MAAM,GAAG,IAAT;AACAC,IAAAA,MAAM,GAAGF,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAT;AACA,WAAOH,MAAP;AACD,GARY,CAAb;AASD,CAZM,CAFP;;AAgBAI,MAAM,CAACC,OAAP,GAAiBR,IAAjB","sourcesContent":["var _arity =\n/*#__PURE__*/\nrequire(\"./internal/_arity\");\n\nvar _curry1 =\n/*#__PURE__*/\nrequire(\"./internal/_curry1\");\n/**\n * Accepts a function `fn` and returns a function that guards invocation of\n * `fn` such that `fn` can only ever be called once, no matter how many times\n * the returned function is invoked. The first value calculated is returned in\n * subsequent invocations.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a... -> b) -> (a... -> b)\n * @param {Function} fn The function to wrap in a call-only-once wrapper.\n * @return {Function} The wrapped function.\n * @example\n *\n *      const addOneOnce = R.once(x => x + 1);\n *      addOneOnce(10); //=> 11\n *      addOneOnce(addOneOnce(50)); //=> 11\n */\n\n\nvar once =\n/*#__PURE__*/\n_curry1(function once(fn) {\n  var called = false;\n  var result;\n  return _arity(fn.length, function () {\n    if (called) {\n      return result;\n    }\n\n    called = true;\n    result = fn.apply(this, arguments);\n    return result;\n  });\n});\n\nmodule.exports = once;"]}