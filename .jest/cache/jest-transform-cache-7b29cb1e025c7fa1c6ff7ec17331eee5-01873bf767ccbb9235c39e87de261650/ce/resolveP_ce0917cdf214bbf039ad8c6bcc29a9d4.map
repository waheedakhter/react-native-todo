{"version":3,"sources":["resolveP.js"],"names":["exports","__esModule","_ramda","require","resolveP","bind","Promise","resolve","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AA2BA,IAAIC,QAAQ,GAAG,CAAC,GAAGF,MAAM,CAACG,IAAX,EAAiBC,OAAO,CAACC,OAAzB,EAAkCD,OAAlC,CAAf;AACA,IAAIE,QAAQ,GAAGJ,QAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBQ,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/* eslint-disable max-len */\n\n/**\n * Composable shortcut for `Promise.resolve`.\n *\n * Returns a Promise object that is resolved with the given value.\n * If the value is a thenable (i.e. has a \"then\" method), the returned promise will\n * \"follow\" that thenable, adopting its eventual state.\n *\n * @func resolveP\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.16.0|v1.16.0}\n * @category Function\n * @sig a -> Promise a\n * @param {*} [value=undefined] Argument to be resolved by this Promise. Can also be a Promise or a thenable to resolve\n * @return {Promise} A Promise that is resolved with the given value, or the promise passed as value, if the value was a promise object\n * @see {@link RA.rejectP|rejectP}\n * @example\n *\n * RA.resolveP(); //=> Promise(undefined)\n * RA.resolveP('a'); //=> Promise('a')\n * RA.resolveP([1, 2, 3]); //=> Promise([1, 2, 3])\n */\n\n/* eslint-enable max-len */\nvar resolveP = (0, _ramda.bind)(Promise.resolve, Promise);\nvar _default = resolveP;\nexports[\"default\"] = _default;"]}