{"version":3,"sources":["isSparseArray.js"],"names":["exports","__esModule","_ramda","require","_isArray","_interopRequireDefault","obj","isSparseArray","both","converge","complement","identical","pipe","values","length","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,QAAQ,GAAGC,sBAAsB,CAACF,OAAO,CAAC,WAAD,CAAR,CAArC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AA2BjG,IAAIC,aAAa,GAAG,CAAC,GAAGL,MAAM,CAACM,IAAX,EAAiBJ,QAAQ,CAAC,SAAD,CAAzB,EAAsC,CAAC,GAAGF,MAAM,CAACO,QAAX,EAAqB,CAAC,GAAGP,MAAM,CAACQ,UAAX,EAAuBR,MAAM,CAACS,SAA9B,CAArB,EAA+D,CAAC,CAAC,GAAGT,MAAM,CAACU,IAAX,EAAiBV,MAAM,CAACW,MAAxB,EAAgCX,MAAM,CAACY,MAAvC,CAAD,EAAiDZ,MAAM,CAACY,MAAxD,CAA/D,CAAtC,CAApB;AACA,IAAIC,QAAQ,GAAGR,aAAf;AACAP,OAAO,CAAC,SAAD,CAAP,GAAqBe,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isArray = _interopRequireDefault(require(\"./isArray\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Checks if input value is a sparse Array.\n * An array with at least one \"empty slot\" in it is often called a \"sparse array.\"\n * Empty slot doesn't mean that the slot contains `null` or `undefined` values,\n * but rather that the slots don't exist.\n *\n * @func isSparseArray\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.20.0|v2.20.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} list The list to test\n * @return {boolean}\n * @see {@link https://github.com/getify/You-Dont-Know-JS/blob/f0d591b6502c080b92e18fc470432af8144db610/types%20%26%20grammar/ch3.md#array|Sparse Arrays}, {@link RA.isArray|isArray}\n * @example\n *\n * RA.isSparseArray(new Array(3)); // => true\n * RA.isSparseArray([1,,3]); // => true\n *\n * const list = [1, 2, 3];\n * delete list[1];\n * RA.isSparseArray(list); // => true\n *\n * RA.isSparseArray([1, 2, 3]); // => false\n */\nvar isSparseArray = (0, _ramda.both)(_isArray[\"default\"], (0, _ramda.converge)((0, _ramda.complement)(_ramda.identical), [(0, _ramda.pipe)(_ramda.values, _ramda.length), _ramda.length]));\nvar _default = isSparseArray;\nexports[\"default\"] = _default;"]}