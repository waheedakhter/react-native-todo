{"version":3,"sources":["isInteger32.js"],"names":["exports","__esModule","_ramda","require","_toInteger","_interopRequireDefault","obj","isInteger32","curryN","val","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACF,OAAO,CAAC,eAAD,CAAR,CAAvC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAuBjG,IAAIC,WAAW,GAAG,CAAC,GAAGL,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsB,UAAUC,GAAV,EAAe;AACrD,SAAO,CAAC,GAAGL,UAAU,CAAC,SAAD,CAAd,EAA2BK,GAA3B,MAAoCA,GAA3C;AACD,CAFiB,CAAlB;AAGA,IAAIC,QAAQ,GAAGH,WAAf;AACAP,OAAO,CAAC,SAAD,CAAP,GAAqBU,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _toInteger = _interopRequireDefault(require(\"./toInteger32\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Checks whether the passed value is a signed 32 bit integer.\n *\n * @func isInteger32\n * @aliases isInt32\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.32.0|v2.32.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.toInteger32|toInteger32}\n * @example\n *\n * RA.isInteger32(0); //=> true\n * RA.isInteger32((-2) ** 31); //=> true\n *\n * RA.isInteger32(Infinity); //=> false\n * RA.isInteger32(NaN); //=> false\n * RA.isInteger32(2 ** 31); //=> false\n */\nvar isInteger32 = (0, _ramda.curryN)(1, function (val) {\n  return (0, _toInteger[\"default\"])(val) === val;\n});\nvar _default = isInteger32;\nexports[\"default\"] = _default;"]}