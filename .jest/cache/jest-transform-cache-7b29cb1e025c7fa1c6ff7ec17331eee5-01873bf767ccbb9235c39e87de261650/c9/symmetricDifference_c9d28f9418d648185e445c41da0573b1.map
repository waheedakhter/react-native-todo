{"version":3,"sources":["symmetricDifference.js"],"names":["_curry2","require","concat","difference","symmetricDifference","list1","list2","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAEXC,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIC,MAAM,GAEVD,OAAO,CAAC,UAAD,CAFP;;AAIA,IAAIE,UAAU,GAEdF,OAAO,CAAC,cAAD,CAFP;;AAuBA,IAAIG,mBAAmB,GAEvBJ,OAAO,CAAC,SAASI,mBAAT,CAA6BC,KAA7B,EAAoCC,KAApC,EAA2C;AACjD,SAAOJ,MAAM,CAACC,UAAU,CAACE,KAAD,EAAQC,KAAR,CAAX,EAA2BH,UAAU,CAACG,KAAD,EAAQD,KAAR,CAArC,CAAb;AACD,CAFM,CAFP;;AAMAE,MAAM,CAACC,OAAP,GAAiBJ,mBAAjB","sourcesContent":["var _curry2 =\n/*#__PURE__*/\nrequire(\"./internal/_curry2\");\n\nvar concat =\n/*#__PURE__*/\nrequire(\"./concat\");\n\nvar difference =\n/*#__PURE__*/\nrequire(\"./difference\");\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\n * @example\n *\n *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n */\n\n\nvar symmetricDifference =\n/*#__PURE__*/\n_curry2(function symmetricDifference(list1, list2) {\n  return concat(difference(list1, list2), difference(list2, list1));\n});\n\nmodule.exports = symmetricDifference;"]}