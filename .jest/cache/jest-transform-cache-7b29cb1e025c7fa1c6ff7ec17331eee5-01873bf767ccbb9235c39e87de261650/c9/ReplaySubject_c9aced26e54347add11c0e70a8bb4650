f14f8e30d5b3a9bcf3cc22559eff914f
"use strict";

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Subject_1 = require("./Subject");

var queue_1 = require("./scheduler/queue");

var Subscription_1 = require("./Subscription");

var observeOn_1 = require("./operators/observeOn");

var ObjectUnsubscribedError_1 = require("./util/ObjectUnsubscribedError");

var SubjectSubscription_1 = require("./SubjectSubscription");

var ReplaySubject = function (_super) {
  __extends(ReplaySubject, _super);

  function ReplaySubject(bufferSize, windowTime, scheduler) {
    if (bufferSize === void 0) {
      bufferSize = Number.POSITIVE_INFINITY;
    }

    if (windowTime === void 0) {
      windowTime = Number.POSITIVE_INFINITY;
    }

    var _this = _super.call(this) || this;

    _this.scheduler = scheduler;
    _this._events = [];
    _this._infiniteTimeWindow = false;
    _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
    _this._windowTime = windowTime < 1 ? 1 : windowTime;

    if (windowTime === Number.POSITIVE_INFINITY) {
      _this._infiniteTimeWindow = true;
      _this.next = _this.nextInfiniteTimeWindow;
    } else {
      _this.next = _this.nextTimeWindow;
    }

    return _this;
  }

  ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
    if (!this.isStopped) {
      var _events = this._events;

      _events.push(value);

      if (_events.length > this._bufferSize) {
        _events.shift();
      }
    }

    _super.prototype.next.call(this, value);
  };

  ReplaySubject.prototype.nextTimeWindow = function (value) {
    if (!this.isStopped) {
      this._events.push(new ReplayEvent(this._getNow(), value));

      this._trimBufferThenGetEvents();
    }

    _super.prototype.next.call(this, value);
  };

  ReplaySubject.prototype._subscribe = function (subscriber) {
    var _infiniteTimeWindow = this._infiniteTimeWindow;

    var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();

    var scheduler = this.scheduler;
    var len = _events.length;
    var subscription;

    if (this.closed) {
      throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
    } else if (this.isStopped || this.hasError) {
      subscription = Subscription_1.Subscription.EMPTY;
    } else {
      this.observers.push(subscriber);
      subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
    }

    if (scheduler) {
      subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
    }

    if (_infiniteTimeWindow) {
      for (var i = 0; i < len && !subscriber.closed; i++) {
        subscriber.next(_events[i]);
      }
    } else {
      for (var i = 0; i < len && !subscriber.closed; i++) {
        subscriber.next(_events[i].value);
      }
    }

    if (this.hasError) {
      subscriber.error(this.thrownError);
    } else if (this.isStopped) {
      subscriber.complete();
    }

    return subscription;
  };

  ReplaySubject.prototype._getNow = function () {
    return (this.scheduler || queue_1.queue).now();
  };

  ReplaySubject.prototype._trimBufferThenGetEvents = function () {
    var now = this._getNow();

    var _bufferSize = this._bufferSize;
    var _windowTime = this._windowTime;
    var _events = this._events;
    var eventsCount = _events.length;
    var spliceCount = 0;

    while (spliceCount < eventsCount) {
      if (now - _events[spliceCount].time < _windowTime) {
        break;
      }

      spliceCount++;
    }

    if (eventsCount > _bufferSize) {
      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
    }

    if (spliceCount > 0) {
      _events.splice(0, spliceCount);
    }

    return _events;
  };

  return ReplaySubject;
}(Subject_1.Subject);

exports.ReplaySubject = ReplaySubject;

var ReplayEvent = function () {
  function ReplayEvent(time, value) {
    this.time = time;
    this.value = value;
  }

  return ReplayEvent;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbnRlcm5hbC9SZXBsYXlTdWJqZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxTQUFBLEdBQUEsT0FBQSxDQUFBLFdBQUEsQ0FBQTs7QUFFQSxJQUFBLE9BQUEsR0FBQSxPQUFBLENBQUEsbUJBQUEsQ0FBQTs7QUFFQSxJQUFBLGNBQUEsR0FBQSxPQUFBLENBQUEsZ0JBQUEsQ0FBQTs7QUFDQSxJQUFBLFdBQUEsR0FBQSxPQUFBLENBQUEsdUJBQUEsQ0FBQTs7QUFDQSxJQUFBLHlCQUFBLEdBQUEsT0FBQSxDQUFBLGdDQUFBLENBQUE7O0FBQ0EsSUFBQSxxQkFBQSxHQUFBLE9BQUEsQ0FBQSx1QkFBQSxDQUFBOztBQVFBLElBQUEsYUFBQSxHQUFBLFVBQUEsTUFBQSxFQUFBO0FBQXNDLEVBQUEsU0FBQSxDQUFBLGFBQUEsRUFBQSxNQUFBLENBQUE7O0FBTXBDLFdBQUEsYUFBQSxDQUFZLFVBQVosRUFDWSxVQURaLEVBRW9CLFNBRnBCLEVBRTZDO0FBRmpDLFFBQUEsVUFBQSxLQUFBLEtBQUEsQ0FBQSxFQUFBO0FBQUEsTUFBQSxVQUFBLEdBQXFCLE1BQU0sQ0FBQyxpQkFBNUI7QUFBNkM7O0FBQzdDLFFBQUEsVUFBQSxLQUFBLEtBQUEsQ0FBQSxFQUFBO0FBQUEsTUFBQSxVQUFBLEdBQXFCLE1BQU0sQ0FBQyxpQkFBNUI7QUFBNkM7O0FBRHpELFFBQUEsS0FBQSxHQUdFLE1BQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxLQUFPLElBSFQ7O0FBRW9CLElBQUEsS0FBQSxDQUFBLFNBQUEsR0FBQSxTQUFBO0FBUFosSUFBQSxLQUFBLENBQUEsT0FBQSxHQUFrQyxFQUFsQztBQUdBLElBQUEsS0FBQSxDQUFBLG1CQUFBLEdBQStCLEtBQS9CO0FBTU4sSUFBQSxLQUFJLENBQUMsV0FBTCxHQUFtQixVQUFVLEdBQUcsQ0FBYixHQUFpQixDQUFqQixHQUFxQixVQUF4QztBQUNBLElBQUEsS0FBSSxDQUFDLFdBQUwsR0FBbUIsVUFBVSxHQUFHLENBQWIsR0FBaUIsQ0FBakIsR0FBcUIsVUFBeEM7O0FBRUEsUUFBSSxVQUFVLEtBQUssTUFBTSxDQUFDLGlCQUExQixFQUE2QztBQUMzQyxNQUFBLEtBQUksQ0FBQyxtQkFBTCxHQUEyQixJQUEzQjtBQUNBLE1BQUEsS0FBSSxDQUFDLElBQUwsR0FBWSxLQUFJLENBQUMsc0JBQWpCO0FBQ0QsS0FIRCxNQUdPO0FBQ0wsTUFBQSxLQUFJLENBQUMsSUFBTCxHQUFZLEtBQUksQ0FBQyxjQUFqQjtBQUNEOzs7QUFDRjs7QUFFTyxFQUFBLGFBQUEsQ0FBQSxTQUFBLENBQUEsc0JBQUEsR0FBUixVQUErQixLQUEvQixFQUF1QztBQUNyQyxRQUFJLENBQUMsS0FBSyxTQUFWLEVBQXFCO0FBQ25CLFVBQU0sT0FBTyxHQUFHLEtBQUssT0FBckI7O0FBQ0EsTUFBQSxPQUFPLENBQUMsSUFBUixDQUFhLEtBQWI7O0FBR0EsVUFBSSxPQUFPLENBQUMsTUFBUixHQUFpQixLQUFLLFdBQTFCLEVBQXVDO0FBQ3JDLFFBQUEsT0FBTyxDQUFDLEtBQVI7QUFDRDtBQUNGOztBQUNELElBQUEsTUFBQSxDQUFBLFNBQUEsQ0FBTSxJQUFOLENBQVUsSUFBVixDQUFVLElBQVYsRUFBVyxLQUFYO0FBQ0QsR0FYTzs7QUFhQSxFQUFBLGFBQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxHQUFSLFVBQXVCLEtBQXZCLEVBQStCO0FBQzdCLFFBQUksQ0FBQyxLQUFLLFNBQVYsRUFBcUI7QUFDbkIsV0FBSyxPQUFMLENBQWEsSUFBYixDQUFrQixJQUFJLFdBQUosQ0FBZ0IsS0FBSyxPQUFMLEVBQWhCLEVBQWdDLEtBQWhDLENBQWxCOztBQUNBLFdBQUssd0JBQUw7QUFDRDs7QUFDRCxJQUFBLE1BQUEsQ0FBQSxTQUFBLENBQU0sSUFBTixDQUFVLElBQVYsQ0FBVSxJQUFWLEVBQVcsS0FBWDtBQUNELEdBTk87O0FBU1IsRUFBQSxhQUFBLENBQUEsU0FBQSxDQUFBLFVBQUEsR0FBQSxVQUFXLFVBQVgsRUFBb0M7QUFFbEMsUUFBTSxtQkFBbUIsR0FBRyxLQUFLLG1CQUFqQzs7QUFDQSxRQUFNLE9BQU8sR0FBRyxtQkFBbUIsR0FBRyxLQUFLLE9BQVIsR0FBa0IsS0FBSyx3QkFBTCxFQUFyRDs7QUFDQSxRQUFNLFNBQVMsR0FBRyxLQUFLLFNBQXZCO0FBQ0EsUUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQXBCO0FBQ0EsUUFBSSxZQUFKOztBQUVBLFFBQUksS0FBSyxNQUFULEVBQWlCO0FBQ2YsWUFBTSxJQUFJLHlCQUFBLENBQUEsdUJBQUosRUFBTjtBQUNELEtBRkQsTUFFTyxJQUFJLEtBQUssU0FBTCxJQUFrQixLQUFLLFFBQTNCLEVBQXFDO0FBQzFDLE1BQUEsWUFBWSxHQUFHLGNBQUEsQ0FBQSxZQUFBLENBQWEsS0FBNUI7QUFDRCxLQUZNLE1BRUE7QUFDTCxXQUFLLFNBQUwsQ0FBZSxJQUFmLENBQW9CLFVBQXBCO0FBQ0EsTUFBQSxZQUFZLEdBQUcsSUFBSSxxQkFBQSxDQUFBLG1CQUFKLENBQXdCLElBQXhCLEVBQThCLFVBQTlCLENBQWY7QUFDRDs7QUFFRCxRQUFJLFNBQUosRUFBZTtBQUNiLE1BQUEsVUFBVSxDQUFDLEdBQVgsQ0FBZSxVQUFVLEdBQUcsSUFBSSxXQUFBLENBQUEsbUJBQUosQ0FBMkIsVUFBM0IsRUFBdUMsU0FBdkMsQ0FBNUI7QUFDRDs7QUFFRCxRQUFJLG1CQUFKLEVBQXlCO0FBQ3ZCLFdBQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsR0FBSixJQUFXLENBQUMsVUFBVSxDQUFDLE1BQXZDLEVBQStDLENBQUMsRUFBaEQsRUFBb0Q7QUFDbEQsUUFBQSxVQUFVLENBQUMsSUFBWCxDQUFtQixPQUFPLENBQUMsQ0FBRCxDQUExQjtBQUNEO0FBQ0YsS0FKRCxNQUlPO0FBQ0wsV0FBSyxJQUFJLENBQUMsR0FBRyxDQUFiLEVBQWdCLENBQUMsR0FBRyxHQUFKLElBQVcsQ0FBQyxVQUFVLENBQUMsTUFBdkMsRUFBK0MsQ0FBQyxFQUFoRCxFQUFvRDtBQUNsRCxRQUFBLFVBQVUsQ0FBQyxJQUFYLENBQWlDLE9BQU8sQ0FBQyxDQUFELENBQVAsQ0FBWSxLQUE3QztBQUNEO0FBQ0Y7O0FBRUQsUUFBSSxLQUFLLFFBQVQsRUFBbUI7QUFDakIsTUFBQSxVQUFVLENBQUMsS0FBWCxDQUFpQixLQUFLLFdBQXRCO0FBQ0QsS0FGRCxNQUVPLElBQUksS0FBSyxTQUFULEVBQW9CO0FBQ3pCLE1BQUEsVUFBVSxDQUFDLFFBQVg7QUFDRDs7QUFFRCxXQUFPLFlBQVA7QUFDRCxHQXRDRDs7QUF3Q0EsRUFBQSxhQUFBLENBQUEsU0FBQSxDQUFBLE9BQUEsR0FBQSxZQUFBO0FBQ0UsV0FBTyxDQUFDLEtBQUssU0FBTCxJQUFrQixPQUFBLENBQUEsS0FBbkIsRUFBMEIsR0FBMUIsRUFBUDtBQUNELEdBRkQ7O0FBSVEsRUFBQSxhQUFBLENBQUEsU0FBQSxDQUFBLHdCQUFBLEdBQVIsWUFBQTtBQUNFLFFBQU0sR0FBRyxHQUFHLEtBQUssT0FBTCxFQUFaOztBQUNBLFFBQU0sV0FBVyxHQUFHLEtBQUssV0FBekI7QUFDQSxRQUFNLFdBQVcsR0FBRyxLQUFLLFdBQXpCO0FBQ0EsUUFBTSxPQUFPLEdBQXFCLEtBQUssT0FBdkM7QUFFQSxRQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsTUFBNUI7QUFDQSxRQUFJLFdBQVcsR0FBRyxDQUFsQjs7QUFLQSxXQUFPLFdBQVcsR0FBRyxXQUFyQixFQUFrQztBQUNoQyxVQUFLLEdBQUcsR0FBRyxPQUFPLENBQUMsV0FBRCxDQUFQLENBQXFCLElBQTVCLEdBQW9DLFdBQXhDLEVBQXFEO0FBQ25EO0FBQ0Q7O0FBQ0QsTUFBQSxXQUFXO0FBQ1o7O0FBRUQsUUFBSSxXQUFXLEdBQUcsV0FBbEIsRUFBK0I7QUFDN0IsTUFBQSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUwsQ0FBUyxXQUFULEVBQXNCLFdBQVcsR0FBRyxXQUFwQyxDQUFkO0FBQ0Q7O0FBRUQsUUFBSSxXQUFXLEdBQUcsQ0FBbEIsRUFBcUI7QUFDbkIsTUFBQSxPQUFPLENBQUMsTUFBUixDQUFlLENBQWYsRUFBa0IsV0FBbEI7QUFDRDs7QUFFRCxXQUFPLE9BQVA7QUFDRCxHQTVCTzs7QUE4QlYsU0FBQSxhQUFBO0FBQUMsQ0FySEQsQ0FBc0MsU0FBQSxDQUFBLE9BQXRDLENBQUE7O0FBQWEsT0FBQSxDQUFBLGFBQUEsR0FBQSxhQUFBOztBQXVIYixJQUFBLFdBQUEsR0FBQSxZQUFBO0FBQ0UsV0FBQSxXQUFBLENBQW1CLElBQW5CLEVBQXdDLEtBQXhDLEVBQWdEO0FBQTdCLFNBQUEsSUFBQSxHQUFBLElBQUE7QUFBcUIsU0FBQSxLQUFBLEdBQUEsS0FBQTtBQUN2Qzs7QUFDSCxTQUFBLFdBQUE7QUFBQyxDQUhELEVBQUEifQ==