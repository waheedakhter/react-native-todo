{"version":3,"sources":["argsPass.js"],"names":["exports","__esModule","_ramda","require","_list","_interopRequireDefault","_isTruthy","obj","argsPass","curry","combiningPredicate","predicates","useWith","compose","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,KAAK,GAAGC,sBAAsB,CAACF,OAAO,CAAC,QAAD,CAAR,CAAlC;;AAEA,IAAIG,SAAS,GAAGD,sBAAsB,CAACF,OAAO,CAAC,YAAD,CAAR,CAAtC;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACN,UAAX,GAAwBM,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAgCjG,IAAIC,QAAQ,GAAG,CAAC,GAAGN,MAAM,CAACO,KAAX,EAAkB,UAAUC,kBAAV,EAA8BC,UAA9B,EAA0C;AACzE,SAAO,CAAC,GAAGT,MAAM,CAACU,OAAX,EAAoB,CAAC,GAAGV,MAAM,CAACW,OAAX,EAAoBH,kBAAkB,CAACJ,SAAS,CAAC,SAAD,CAAV,CAAtC,EAA8DF,KAAK,CAAC,SAAD,CAAnE,CAApB,EAAqGO,UAArG,CAAP;AACD,CAFc,CAAf;AAGA,IAAIG,QAAQ,GAAGN,QAAf;AACAR,OAAO,CAAC,SAAD,CAAP,GAAqBc,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _list = _interopRequireDefault(require(\"./list\"));\n\nvar _isTruthy = _interopRequireDefault(require(\"./isTruthy\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Takes a combining predicate and a list of functions and returns a function which will map the\n * arguments it receives to the list of functions and returns the result of passing the values\n * returned from each function to the combining predicate. A combining predicate is a function that\n * combines a list of Boolean values into a single Boolean value, such as `R.any` or `R.all`. It\n * will test each value using `RA.isTruthy`, meaning the functions don't necessarily have to be\n * predicates.\n *\n * The function returned is curried to the number of functions supplied, and if called with more\n * arguments than functions, any remaining arguments are passed in to the combining predicate\n * untouched.\n *\n * @func argsPass\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.7.0|v2.7.0}\n * @category Logic\n * @sig ((* -> Boolean) -> [*] -> Boolean) -> [(* -> Boolean), ...] -> (*...) -> Boolean\n * @param {Function} combiningPredicate The predicate used to combine the values returned from the\n * list of functions\n * @param {Array} functions List of functions\n * @return {boolean} Returns the combined result of mapping arguments to functions\n * @example\n *\n * RA.argsPass(R.all, [RA.isArray, RA.isBoolean, RA.isString])([], false, 'abc') //=> true\n * RA.argsPass(R.all, [RA.isArray, RA.isBoolean, RA.isString])([], false, 1) //=> false\n * RA.argsPass(R.any, [RA.isArray, RA.isBoolean, RA.isString])({}, 1, 'abc') //=> true\n * RA.argsPass(R.any, [RA.isArray, RA.isBoolean, RA.isString])({}, 1, false) //=> false\n * RA.argsPass(R.none, [RA.isArray, RA.isBoolean, RA.isString])({}, 1, false) //=> true\n * RA.argsPass(R.none, [RA.isArray, RA.isBoolean, RA.isString])({}, 1, 'abc') //=> false\n */\nvar argsPass = (0, _ramda.curry)(function (combiningPredicate, predicates) {\n  return (0, _ramda.useWith)((0, _ramda.compose)(combiningPredicate(_isTruthy[\"default\"]), _list[\"default\"]), predicates);\n});\nvar _default = argsPass;\nexports[\"default\"] = _default;"]}