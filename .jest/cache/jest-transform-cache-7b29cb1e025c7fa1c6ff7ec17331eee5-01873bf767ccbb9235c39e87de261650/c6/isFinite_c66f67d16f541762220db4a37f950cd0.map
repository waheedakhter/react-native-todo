{"version":3,"sources":["isFinite.js"],"names":["exports","__esModule","isFinitePonyfill","_ramda","require","_isFunction","_interopRequireDefault","_Number","obj","curryN","_isFinite","Number","isFinite","bind","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,gBAAR,GAA2BF,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAArD;;AAEA,IAAIG,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACF,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIG,OAAO,GAAGD,sBAAsB,CAACF,OAAO,CAAC,sCAAD,CAAR,CAApC;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACP,UAAX,GAAwBO,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,IAAIN,gBAAgB,GAAG,CAAC,GAAGC,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsBF,OAAO,CAAC,SAAD,CAA7B,CAAvB;AA2BAP,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B;;AAEA,IAAIQ,SAAS,GAAG,CAAC,GAAGL,WAAW,CAAC,SAAD,CAAf,EAA4BM,MAAM,CAACC,QAAnC,IAA+C,CAAC,GAAGT,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsB,CAAC,GAAGN,MAAM,CAACU,IAAX,EAAiBF,MAAM,CAACC,QAAxB,EAAkCD,MAAlC,CAAtB,CAA/C,GAAkHT,gBAAlI;;AAEA,IAAIY,QAAQ,GAAGJ,SAAf;AACAV,OAAO,CAAC,SAAD,CAAP,GAAqBc,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.isFinitePonyfill = exports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isFunction = _interopRequireDefault(require(\"./isFunction\"));\n\nvar _Number = _interopRequireDefault(require(\"./internal/ponyfills/Number.isFinite\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar isFinitePonyfill = (0, _ramda.curryN)(1, _Number[\"default\"]);\n/**\n * Checks whether the passed value is a finite `Number`.\n *\n * @func isFinite\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.7.0|v0.7.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotFinite|isNotFinite}\n * @example\n *\n * RA.isFinite(Infinity); //=> false\n * RA.isFinite(NaN); //=> false\n * RA.isFinite(-Infinity); //=> false\n *\n * RA.isFinite(0); // true\n * RA.isFinite(2e64); // true\n *\n * RA.isFinite('0');  // => false\n *                    // would've been true with global isFinite('0')\n * RA.isFinite(null); // => false\n *                    // would've been true with global isFinite(null)\n */\n\nexports.isFinitePonyfill = isFinitePonyfill;\n\nvar _isFinite = (0, _isFunction[\"default\"])(Number.isFinite) ? (0, _ramda.curryN)(1, (0, _ramda.bind)(Number.isFinite, Number)) : isFinitePonyfill;\n\nvar _default = _isFinite;\nexports[\"default\"] = _default;"]}