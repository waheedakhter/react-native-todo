{"version":3,"sources":["util.js"],"names":["exports","__esModule","typeEquals","type","isSameType","isNotSameType","_ramda","require","either","path","curry","typeIdent","monad","curryN","useWith","equals","complement"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,UAAR,GAAqBF,OAAO,CAACG,IAAR,GAAeH,OAAO,CAACI,UAAR,GAAqBJ,OAAO,CAACK,aAAR,GAAwB,KAAK,CAAtF;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAGA,IAAIJ,IAAI,GAAG,CAAC,GAAGG,MAAM,CAACE,MAAX,EAAmB,CAAC,GAAGF,MAAM,CAACG,IAAX,EAAiB,CAAC,QAAD,CAAjB,CAAnB,EAAiD,CAAC,GAAGH,MAAM,CAACG,IAAX,EAAiB,CAAC,aAAD,EAAgB,QAAhB,CAAjB,CAAjD,CAAX;AAEAT,OAAO,CAACG,IAAR,GAAeA,IAAf;AACA,IAAID,UAAU,GAAG,CAAC,GAAGI,MAAM,CAACI,KAAX,EAAkB,UAAUC,SAAV,EAAqBC,KAArB,EAA4B;AAC7D,SAAOT,IAAI,CAACS,KAAD,CAAJ,KAAgBD,SAAvB;AACD,CAFgB,CAAjB;AAIAX,OAAO,CAACE,UAAR,GAAqBA,UAArB;AACA,IAAIE,UAAU,GAAG,CAAC,GAAGE,MAAM,CAACO,MAAX,EAAmB,CAAnB,EAAsB,CAAC,GAAGP,MAAM,CAACQ,OAAX,EAAoBR,MAAM,CAACS,MAA3B,EAAmC,CAACZ,IAAD,EAAOA,IAAP,CAAnC,CAAtB,CAAjB;AAEAH,OAAO,CAACI,UAAR,GAAqBA,UAArB;AACA,IAAIC,aAAa,GAAG,CAAC,GAAGC,MAAM,CAACU,UAAX,EAAuBZ,UAAvB,CAApB;AACAJ,OAAO,CAACK,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.typeEquals = exports.type = exports.isSameType = exports.isNotSameType = void 0;\n\nvar _ramda = require(\"ramda\");\n\n// type :: Monad a => a -> String\nvar type = (0, _ramda.either)((0, _ramda.path)(['@@type']), (0, _ramda.path)(['constructor', '@@type'])); // typeEquals :: Monad a => String -> a -> Boolean\n\nexports.type = type;\nvar typeEquals = (0, _ramda.curry)(function (typeIdent, monad) {\n  return type(monad) === typeIdent;\n}); // isSameType :: (Monad a, Monad b) => a -> b -> Boolean\n\nexports.typeEquals = typeEquals;\nvar isSameType = (0, _ramda.curryN)(2, (0, _ramda.useWith)(_ramda.equals, [type, type])); // isNotSameType :: (Monad a, Monad b) => a -> b -> Boolean\n\nexports.isSameType = isSameType;\nvar isNotSameType = (0, _ramda.complement)(isSameType);\nexports.isNotSameType = isNotSameType;"]}