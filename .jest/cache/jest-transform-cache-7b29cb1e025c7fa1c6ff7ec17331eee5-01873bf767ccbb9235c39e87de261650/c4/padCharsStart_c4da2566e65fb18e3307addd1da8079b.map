{"version":3,"sources":["padCharsStart.js"],"names":["exports","__esModule","padStartPonyfill","padStartInvoker","_ramda","require","_isFunction","_interopRequireDefault","_String","obj","flip","invoker","curry","padCharsStart","String","prototype","padStart","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,gBAAR,GAA2BF,OAAO,CAACG,eAAR,GAA0BH,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA/E;;AAEA,IAAII,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACF,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIG,OAAO,GAAGD,sBAAsB,CAACF,OAAO,CAAC,sCAAD,CAAR,CAApC;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACR,UAAX,GAAwBQ,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,IAAIN,eAAe,GAAG,CAAC,GAAGC,MAAM,CAACM,IAAX,EAAiB,CAAC,GAAGN,MAAM,CAACO,OAAX,EAAoB,CAApB,EAAuB,UAAvB,CAAjB,CAAtB;AACAX,OAAO,CAACG,eAAR,GAA0BA,eAA1B;AACA,IAAID,gBAAgB,GAAG,CAAC,GAAGE,MAAM,CAACQ,KAAX,EAAkBJ,OAAO,CAAC,SAAD,CAAzB,CAAvB;AAuBAR,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B;AACA,IAAIW,aAAa,GAAG,CAAC,GAAGP,WAAW,CAAC,SAAD,CAAf,EAA4BQ,MAAM,CAACC,SAAP,CAAiBC,QAA7C,IAAyDb,eAAzD,GAA2ED,gBAA/F;AACA,IAAIe,QAAQ,GAAGJ,aAAf;AACAb,OAAO,CAAC,SAAD,CAAP,GAAqBiB,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.padStartPonyfill = exports.padStartInvoker = exports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isFunction = _interopRequireDefault(require(\"./isFunction\"));\n\nvar _String = _interopRequireDefault(require(\"./internal/ponyfills/String.padStart\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar padStartInvoker = (0, _ramda.flip)((0, _ramda.invoker)(2, 'padStart'));\nexports.padStartInvoker = padStartInvoker;\nvar padStartPonyfill = (0, _ramda.curry)(_String[\"default\"]);\n/**\n * The function pads the current string with a given string\n * (repeated, if needed) so that the resulting string reaches a given length.\n * The padding is applied from the start of the current string.\n *\n * @func padCharsStart\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category String\n * @sig String -> Number -> String -> String\n * @param {string} padString The string to pad the current string with\n * @param {number} targetLength The length of the resulting string once the current string has been padded\n * @param {string} value String value to be padded\n * @return {string} A new string of the specified length with the pad string on the start of current string\n * @see {@link RA.padStart|padStart}, {@link RA.padEnd|padEnd}, {@link RA.padCharsEnd|padCharsEnd}\n * @example\n *\n * RA.padCharsStart('-', 3, 'a'); // => '--a'\n * RA.padCharsStart('foo', 10, 'abc'); // => 'foofoofabc'\n * RA.padCharsStart('123456', 6, 'abc'); // => '123abc'\n */\n\nexports.padStartPonyfill = padStartPonyfill;\nvar padCharsStart = (0, _isFunction[\"default\"])(String.prototype.padStart) ? padStartInvoker : padStartPonyfill;\nvar _default = padCharsStart;\nexports[\"default\"] = _default;"]}