{"version":3,"sources":["AnimatedCall.js"],"names":["NODE_MAPPING","node","data","AnimatedNode","constructor","args","el","type","input","toString","__attach","ReanimatedEventEmitter","__detach","__onEvaluate","val"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,2BAAA,CAAA,CAAA;;AACA,IAAA,IAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,YAAY,GAAG,IAArB,GAAqB,EAArB;;AAEA,SAAA,QAAA,CAAA,IAAA,EAAwB;AACtB,MAAMC,IAAI,GAAGD,YAAY,CAAZA,GAAAA,CAAiBE,IAAI,CAAlC,EAAaF,CAAb;AACAC,EAAAA,IAAI,IAAIA,IAAI,CAAJA,SAAAA,CAAeC,IAAI,CAA3BD,IAAQA,CAARA;AACD;;IAED,Y;;;;;AAIEG,wBAAW,IAAXA,EAAW,UAAXA,EAA8B;AAAA;;AAAA;AAC5B,KAAA,GAAA,UAAA,CAAA,OAAA,EACEC,IAAI,CAAJA,KAAAA,CAAWC,UAAAA,EAAE;AAAA,aAAIA,EAAE,YAAYH,aAAAA,CADjC,OACe;AAAA,KAAbE,CADF,EAAA,sIAAA;AAIA,8BAAM;AAAEE,MAAAA,IAAI,EAAN,MAAA;AAAgBC,MAAAA,KAAK,EAAEH;AAAvB,KAAN,EAAA,IAAA;;AAL4B,IAAA,eAAA,8CAAA,WAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,8CAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;AAM5B,UAAA,SAAA,GAAA,UAAA;AACA,UAAA,KAAA,GAAA,IAAA;AAP4B;AAQ7B;;;;WAEDI,oBAAW;AACT,aAAA,qBAAA,MAAA,CAA4B,KAA5B,QAAA,CAAA;AACD;;;WAEDC,oBAAW;AACT;AACAV,MAAAA,YAAY,CAAZA,GAAAA,CAAiB,KAAjBA,QAAAA,EAAAA,IAAAA;;AACA,UAAIA,YAAY,CAAZA,IAAAA,KAAJ,CAAA,EAA6B;AAC3BW,QAAAA,uBAAAA,CAAAA,OAAAA,CAAAA,WAAAA,CAAAA,kBAAAA,EAAAA,QAAAA;AACD;AACF;;;WAEDC,oBAAW;AACTZ,MAAAA,YAAY,CAAZA,MAAAA,CAAoB,KAApBA,QAAAA;;AACA,UAAIA,YAAY,CAAZA,IAAAA,KAAJ,CAAA,EAA6B;AAC3BW,QAAAA,uBAAAA,CAAAA,OAAAA,CAAAA,kBAAAA,CAAAA,kBAAAA;AACD;;AACD;AACD;;;WAEDE,wBAAe;AACb,WAAA,SAAA,CAAe,KAAA,KAAA,CAAA,GAAA,CAAeC,IAAAA,CAA9B,GAAe,CAAf;;AACA,aAAA,CAAA;AACD;;;EArCwBX,aAAAA,CAA3B,O;;AAwCO,SAAA,kBAAA,CAAA,IAAA,EAAA,IAAA,EAAwC;AAC7C,SAAO,IAAA,YAAA,CAAA,IAAA,EAAP,IAAO,CAAP;AACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport ReanimatedEventEmitter from '../ReanimatedEventEmitter';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nconst NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  const node = NODE_MAPPING.get(data.id);\n  node && node._callback(data.args);\n}\n\nclass AnimatedCall extends AnimatedNode {\n  _callback;\n  _args;\n\n  constructor(args, jsFunction) {\n    invariant(\n      args.every(el => el instanceof AnimatedNode),\n      `Reanimated: Animated.call node args should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`\n    );\n    super({ type: 'call', input: args }, args);\n    this._callback = jsFunction;\n    this._args = args;\n  }\n\n  toString() {\n    return `AnimatedCall, id: ${this.__nodeID}`;\n  }\n\n  __attach() {\n    super.__attach();\n    NODE_MAPPING.set(this.__nodeID, this);\n    if (NODE_MAPPING.size === 1) {\n      ReanimatedEventEmitter.addListener('onReanimatedCall', listener);\n    }\n  }\n\n  __detach() {\n    NODE_MAPPING.delete(this.__nodeID);\n    if (NODE_MAPPING.size === 0) {\n      ReanimatedEventEmitter.removeAllListeners('onReanimatedCall');\n    }\n    super.__detach();\n  }\n\n  __onEvaluate() {\n    this._callback(this._args.map(val));\n    return 0;\n  }\n}\n\nexport function createAnimatedCall(args, func) {\n  return new AnimatedCall(args, func);\n}\n"]}