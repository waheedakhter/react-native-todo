93f6c9a4a260b86bc4d9d0fe9e487e1a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _nonSecure = require("nanoid/non-secure");

var BaseRouter = {
  getStateForAction: function getStateForAction(state, action) {
    switch (action.type) {
      case 'SET_PARAMS':
        {
          var index = action.source ? state.routes.findIndex(function (r) {
            return r.key === action.source;
          }) : state.index;

          if (index === -1) {
            return null;
          }

          return (0, _extends2.default)({}, state, {
            routes: state.routes.map(function (r, i) {
              return i === index ? (0, _extends2.default)({}, r, {
                params: (0, _extends2.default)({}, r.params, action.payload.params)
              }) : r;
            })
          });
        }

      case 'RESET':
        {
          var nextState = action.payload;

          if (nextState.routes.length === 0 || nextState.routes.some(function (route) {
            return !state.routeNames.includes(route.name);
          })) {
            return null;
          }

          if (nextState.stale === false) {
            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(function (name) {
              return !state.routeNames.includes(name);
            })) {
              return null;
            }

            return (0, _extends2.default)({}, nextState, {
              routes: nextState.routes.map(function (route) {
                return route.key ? route : (0, _extends2.default)({}, route, {
                  key: "".concat(route.name, "-").concat((0, _nonSecure.nanoid)())
                });
              })
            });
          }

          return nextState;
        }

      default:
        return null;
    }
  },
  shouldActionChangeFocus: function shouldActionChangeFocus(action) {
    return action.type === 'NAVIGATE';
  }
};
var _default = BaseRouter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJhc2VSb3V0ZXIudHN4Il0sIm5hbWVzIjpbIkJhc2VSb3V0ZXIiLCJnZXRTdGF0ZUZvckFjdGlvbiIsImFjdGlvbiIsImluZGV4Iiwic3RhdGUiLCJyIiwicm91dGVzIiwicGFyYW1zIiwibmV4dFN0YXRlIiwicm91dGUiLCJuYW1lIiwia2V5Iiwic2hvdWxkQWN0aW9uQ2hhbmdlRm9jdXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxVQUFBLEdBQUEsT0FBQSxDQUFBLG1CQUFBLENBQUE7O0FBV0EsSUFBTUEsVUFBVSxHQUFHO0FBQ2pCQyxFQUFBQSxpQkFEaUIsNkJBQ0EsS0FEQSxFQUNBLE1BREEsRUFJcUI7QUFDcEMsWUFBUUMsTUFBTSxDQUFkLElBQUE7QUFDRSxXQUFBLFlBQUE7QUFBbUI7QUFDakIsY0FBTUMsS0FBSyxHQUFHRCxNQUFNLENBQU5BLE1BQUFBLEdBQ1ZFLEtBQUssQ0FBTEEsTUFBQUEsQ0FBQUEsU0FBQUEsQ0FBd0JDLFVBQUFBLENBQUQ7QUFBQSxtQkFBT0EsQ0FBQyxDQUFEQSxHQUFBQSxLQUFVSCxNQUFNLENBRHBDQSxNQUNhO0FBQUEsV0FBdkJFLENBRFVGLEdBRVZFLEtBQUssQ0FGVCxLQUFBOztBQUlBLGNBQUlELEtBQUssS0FBSyxDQUFkLENBQUEsRUFBa0I7QUFDaEIsbUJBQUEsSUFBQTtBQUNEOztBQUVELDRDQUFPLEtBQVA7QUFFRUcsWUFBQUEsTUFBTSxFQUFFLEtBQUssQ0FBTCxNQUFBLENBQUEsR0FBQSxDQUFpQixVQUFBLENBQUEsRUFBQSxDQUFBO0FBQUEscUJBQ3ZCLENBQUMsS0FBRCxLQUFBLDhCQUNJLENBREo7QUFDWUMsZ0JBQUFBLE1BQU0sNkJBQU9GLENBQUMsQ0FBTixNQUFGLEVBQW9CSCxNQUFNLENBQU5BLE9BQUFBLENBQWVLLE1BQW5DO0FBRGxCLG1CQURNLENBQWlCO0FBQUEsYUFBakI7QUFGVjtBQVFEOztBQUVELFdBQUEsT0FBQTtBQUFjO0FBQ1osY0FBTUMsU0FBUyxHQUFHTixNQUFNLENBQXhCLE9BQUE7O0FBRUEsY0FDRU0sU0FBUyxDQUFUQSxNQUFBQSxDQUFBQSxNQUFBQSxLQUFBQSxDQUFBQSxJQUNBQSxTQUFTLENBQVRBLE1BQUFBLENBQUFBLElBQUFBLENBQ0dDLFVBQUFBLEtBQUQ7QUFBQSxtQkFBNkIsQ0FBQ0wsS0FBSyxDQUFMQSxVQUFBQSxDQUFBQSxRQUFBQSxDQUEwQkssS0FBSyxDQUhqRSxJQUdrQ0wsQ0FBOUI7QUFBQSxXQURGSSxDQUZGLEVBS0U7QUFDQSxtQkFBQSxJQUFBO0FBQ0Q7O0FBRUQsY0FBSUEsU0FBUyxDQUFUQSxLQUFBQSxLQUFKLEtBQUEsRUFBK0I7QUFDN0IsZ0JBQ0VKLEtBQUssQ0FBTEEsVUFBQUEsQ0FBQUEsTUFBQUEsS0FBNEJJLFNBQVMsQ0FBVEEsVUFBQUEsQ0FBNUJKLE1BQUFBLElBQ0FJLFNBQVMsQ0FBVEEsVUFBQUEsQ0FBQUEsSUFBQUEsQ0FDR0UsVUFBQUEsSUFBRDtBQUFBLHFCQUFVLENBQUNOLEtBQUssQ0FBTEEsVUFBQUEsQ0FBQUEsUUFBQUEsQ0FIZixJQUdlQSxDQUFYO0FBQUEsYUFERkksQ0FGRixFQUtFO0FBQ0EscUJBQUEsSUFBQTtBQUNEOztBQUVELDhDQUFPLFNBQVA7QUFFRUYsY0FBQUEsTUFBTSxFQUFFLFNBQVMsQ0FBVCxNQUFBLENBQUEsR0FBQSxDQUFzQkcsVUFBQUEsS0FBRDtBQUFBLHVCQUMzQkEsS0FBSyxDQUFMQSxHQUFBQSxHQUFBQSxLQUFBQSw4QkFBb0IsS0FBcEJBO0FBQWdDRSxrQkFBQUEsR0FBRyxFQUFBLEdBQUEsTUFBQSxDQUFLRixLQUFLLENBQVYsSUFBQSxFQUFBLEdBQUEsRUFBQSxNQUFBLENBQW1CLENBQUEsR0FBQSxVQUFBLENBQW5CLE1BQW1CLEdBQW5CO0FBQW5DQSxrQkFEMkI7QUFBQSxlQUFyQjtBQUZWO0FBTUQ7O0FBRUQsaUJBQUEsU0FBQTtBQUNEOztBQUVEO0FBQ0UsZUFBQSxJQUFBO0FBdERKO0FBTGUsR0FBQTtBQStEakJHLEVBQUFBLHVCQS9EaUIsbUNBK0RNLE1BL0ROLEVBK0R1QztBQUN0RCxXQUFPVixNQUFNLENBQU5BLElBQUFBLEtBQVAsVUFBQTtBQUNEO0FBakVnQixDQUFuQjtlQW9FZUYsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5hbm9pZCB9IGZyb20gJ25hbm9pZC9ub24tc2VjdXJlJztcbmltcG9ydCB0eXBlIHtcbiAgQ29tbW9uTmF2aWdhdGlvbkFjdGlvbixcbiAgTmF2aWdhdGlvblN0YXRlLFxuICBQYXJ0aWFsU3RhdGUsXG59IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIEJhc2Ugcm91dGVyIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHdoZW4gd3JpdGluZyBjdXN0b20gcm91dGVycy5cbiAqIFRoaXMgcHJvdmlkZXMgZmV3IGhlbHBlciBtZXRob2RzIHRvIGhhbmRsZSBjb21tb24gYWN0aW9ucyBzdWNoIGFzIGBSRVNFVGAuXG4gKi9cbmNvbnN0IEJhc2VSb3V0ZXIgPSB7XG4gIGdldFN0YXRlRm9yQWN0aW9uPFN0YXRlIGV4dGVuZHMgTmF2aWdhdGlvblN0YXRlPihcbiAgICBzdGF0ZTogU3RhdGUsXG4gICAgYWN0aW9uOiBDb21tb25OYXZpZ2F0aW9uQWN0aW9uXG4gICk6IFN0YXRlIHwgUGFydGlhbFN0YXRlPFN0YXRlPiB8IG51bGwge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgIGNhc2UgJ1NFVF9QQVJBTVMnOiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gYWN0aW9uLnNvdXJjZVxuICAgICAgICAgID8gc3RhdGUucm91dGVzLmZpbmRJbmRleCgocikgPT4gci5rZXkgPT09IGFjdGlvbi5zb3VyY2UpXG4gICAgICAgICAgOiBzdGF0ZS5pbmRleDtcblxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgIHJvdXRlczogc3RhdGUucm91dGVzLm1hcCgociwgaSkgPT5cbiAgICAgICAgICAgIGkgPT09IGluZGV4XG4gICAgICAgICAgICAgID8geyAuLi5yLCBwYXJhbXM6IHsgLi4uci5wYXJhbXMsIC4uLmFjdGlvbi5wYXlsb2FkLnBhcmFtcyB9IH1cbiAgICAgICAgICAgICAgOiByXG4gICAgICAgICAgKSxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgY2FzZSAnUkVTRVQnOiB7XG4gICAgICAgIGNvbnN0IG5leHRTdGF0ZSA9IGFjdGlvbi5wYXlsb2FkIGFzIFN0YXRlIHwgUGFydGlhbFN0YXRlPFN0YXRlPjtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgbmV4dFN0YXRlLnJvdXRlcy5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgICBuZXh0U3RhdGUucm91dGVzLnNvbWUoXG4gICAgICAgICAgICAocm91dGU6IHsgbmFtZTogc3RyaW5nIH0pID0+ICFzdGF0ZS5yb3V0ZU5hbWVzLmluY2x1ZGVzKHJvdXRlLm5hbWUpXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0U3RhdGUuc3RhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgc3RhdGUucm91dGVOYW1lcy5sZW5ndGggIT09IG5leHRTdGF0ZS5yb3V0ZU5hbWVzLmxlbmd0aCB8fFxuICAgICAgICAgICAgbmV4dFN0YXRlLnJvdXRlTmFtZXMuc29tZShcbiAgICAgICAgICAgICAgKG5hbWUpID0+ICFzdGF0ZS5yb3V0ZU5hbWVzLmluY2x1ZGVzKG5hbWUpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ubmV4dFN0YXRlLFxuICAgICAgICAgICAgcm91dGVzOiBuZXh0U3RhdGUucm91dGVzLm1hcCgocm91dGUpID0+XG4gICAgICAgICAgICAgIHJvdXRlLmtleSA/IHJvdXRlIDogeyAuLi5yb3V0ZSwga2V5OiBgJHtyb3V0ZS5uYW1lfS0ke25hbm9pZCgpfWAgfVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9LFxuXG4gIHNob3VsZEFjdGlvbkNoYW5nZUZvY3VzKGFjdGlvbjogQ29tbW9uTmF2aWdhdGlvbkFjdGlvbikge1xuICAgIHJldHVybiBhY3Rpb24udHlwZSA9PT0gJ05BVklHQVRFJztcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2VSb3V0ZXI7XG4iXX0=