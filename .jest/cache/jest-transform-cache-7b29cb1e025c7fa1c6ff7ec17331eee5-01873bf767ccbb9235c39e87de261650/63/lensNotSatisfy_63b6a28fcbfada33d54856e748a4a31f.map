{"version":3,"sources":["lensNotSatisfy.js"],"names":["exports","__esModule","_ramda","require","_lensSatisfies","_interopRequireDefault","obj","lensNotSatisfy","complement","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,cAAc,GAAGC,sBAAsB,CAACF,OAAO,CAAC,iBAAD,CAAR,CAA3C;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAyBjG,IAAIC,cAAc,GAAG,CAAC,GAAGL,MAAM,CAACM,UAAX,EAAuBJ,cAAc,CAAC,SAAD,CAArC,CAArB;AACA,IAAIK,QAAQ,GAAGF,cAAf;AACAP,OAAO,CAAC,SAAD,CAAP,GAAqBS,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _lensSatisfies = _interopRequireDefault(require(\"./lensSatisfies\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Returns `true` if data structure focused by the given lens doesn't satisfy the predicate.\n * Note that the predicate is expected to return boolean value.\n *\n * @func lensNotSatisfy\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|1.13.0}\n * @category Relation\n * @typedef Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig  Boolean b => (a -> b) -> Lens s a -> s -> b\n * @see {@link RA.lensSatisfies|lensSatisfies}\n * @param {Function} predicate The predicate function\n * @param {Function} lens Van Laarhoven lens\n * @param {*} data The data structure\n * @return {boolean} `false` if the focused data structure satisfies the predicate, `true` otherwise\n *\n * @example\n *\n * RA.lensNotSatisfy(RA.isTrue, R.lensIndex(0), [false, true, 1]); // => true\n * RA.lensNotSatisfy(RA.isTrue, R.lensIndex(1), [false, true, 1]); // => false\n * RA.lensNotSatisfy(RA.isTrue, R.lensIndex(2), [false, true, 1]); // => true\n * RA.lensNotSatisfy(R.identity, R.lensProp('x'), { x: 1 }); // => true\n */\nvar lensNotSatisfy = (0, _ramda.complement)(_lensSatisfies[\"default\"]);\nvar _default = lensNotSatisfy;\nexports[\"default\"] = _default;"]}