{"version":3,"sources":["AnimatedParam.js"],"names":["AnimatedNode","constructor","type","beginContext","endContext","_getTopNode","top","setValue","callID","__onEvaluate","value","start","node","AnimatedClock","stop","isRunning"],"mappings":"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","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport AnimatedNode, { getCallID, setCallID } from './AnimatedNode';\nimport AnimatedClock from './AnimatedClock';\nimport { val } from '../val';\n\nexport class AnimatedParam extends AnimatedNode {\n  argsStack = [];\n  _prevCallID;\n  \n  constructor() {\n    super({ type: 'param' }, []);\n    this.__attach();\n  }\n\n  beginContext(ref, prevCallID) {\n    this._prevCallID = prevCallID;\n    this.argsStack.push(ref);\n  }\n\n  endContext() {\n    this.argsStack.pop();\n  }\n\n  _getTopNode() {\n    if (this.argsStack.length === 0) throw new Error(`param: Invocation failed because argsStack is empty`);\n    const top = this.argsStack[this.argsStack.length - 1];\n    return top;\n  }\n\n  setValue(value) {\n    const top = this._getTopNode();\n    if (top.setValue) {\n      const callID = getCallID();\n      setCallID(this._prevCallID);\n      top.setValue(value);\n      setCallID(callID);\n    } else {\n      throw new Error(`param: setValue(${value}) failed because the top element has no known method for updating it's current value.`)\n    }\n  }\n  \n  __onEvaluate() {\n    const callID = getCallID();\n    setCallID(this._prevCallID);\n    const top = this._getTopNode();\n    const value = val(top);\n    setCallID(callID);\n    return value;\n  }\n\n  start() {\n    const node = this._getTopNode();\n    invariant(\n      node instanceof AnimatedClock || node instanceof AnimatedParam,\n      `param: top node should be of type AnimatedClock but got ${node}`\n    );\n    node.start();\n  }\n\n  stop() {\n    const node = this._getTopNode();\n    invariant(\n      node instanceof AnimatedClock || node instanceof AnimatedParam,\n      `param: top node should be of type AnimatedClock but got ${node}`\n    );\n    node.stop();\n  }\n\n  isRunning() {\n    const node = this._getTopNode();\n\n    if (node instanceof AnimatedParam) {\n      return node.isRunning()\n    }\n    invariant(\n      node instanceof AnimatedClock,\n      `param: top node should be of type AnimatedClock but got ${node}`\n    );\n    return node.isStarted();\n  }\n}\n\nexport function createAnimatedParam() {\n  return new AnimatedParam();\n}\n"]}