{"version":3,"sources":["notAllPass.js"],"names":["exports","__esModule","_ramda","require","notAllPass","curry","compose","complement","allPass","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AA6BA,IAAIC,UAAU,GAAG,CAAC,GAAGF,MAAM,CAACG,KAAX,EAAkB,CAAC,GAAGH,MAAM,CAACI,OAAX,EAAoBJ,MAAM,CAACK,UAA3B,EAAuCL,MAAM,CAACM,OAA9C,CAAlB,CAAjB;AACA,IAAIC,QAAQ,GAAGL,UAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBS,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a given list of\n * arguments if one or more of the provided predicates is not satisfied by those arguments. It is\n * the complement of Ramda's allPass.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func notAllPass\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.4.0|v2.4.0}\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see {@link http://ramdajs.com/docs/#allPass|R.allPass}\n * @example\n *\n * const gt10 = R.gt(R.__, 10)\n * const even = (x) => x % 2 === 0;\n * const f = RA.notAllPass([gt10, even]);\n *\n * f(12); //=> false\n * f(8); //=> true\n * f(11); //=> true\n * f(9); //=> true\n */\nvar notAllPass = (0, _ramda.curry)((0, _ramda.compose)(_ramda.complement, _ramda.allPass));\nvar _default = notAllPass;\nexports[\"default\"] = _default;"]}