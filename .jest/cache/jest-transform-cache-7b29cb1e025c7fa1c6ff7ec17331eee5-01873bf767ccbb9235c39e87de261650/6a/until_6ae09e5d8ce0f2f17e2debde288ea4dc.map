{"version":3,"sources":["until.js"],"names":["_curry3","require","until","pred","fn","init","val","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAEXC,OAAO,CAAC,oBAAD,CAFP;;AAwBA,IAAIC,KAAK,GAETF,OAAO,CAAC,SAASE,KAAT,CAAeC,IAAf,EAAqBC,EAArB,EAAyBC,IAAzB,EAA+B;AACrC,MAAIC,GAAG,GAAGD,IAAV;;AAEA,SAAO,CAACF,IAAI,CAACG,GAAD,CAAZ,EAAmB;AACjBA,IAAAA,GAAG,GAAGF,EAAE,CAACE,GAAD,CAAR;AACD;;AAED,SAAOA,GAAP;AACD,CARM,CAFP;;AAYAC,MAAM,CAACC,OAAP,GAAiBN,KAAjB","sourcesContent":["var _curry3 =\n/*#__PURE__*/\nrequire(\"./internal/_curry3\");\n/**\n * Takes a predicate, a transformation function, and an initial value,\n * and returns a value of the same type as the initial value.\n * It does so by applying the transformation until the predicate is satisfied,\n * at which point it returns the satisfactory value.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred A predicate function\n * @param {Function} fn The iterator function\n * @param {*} init Initial value\n * @return {*} Final value that satisfies predicate\n * @example\n *\n *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n */\n\n\nvar until =\n/*#__PURE__*/\n_curry3(function until(pred, fn, init) {\n  var val = init;\n\n  while (!pred(val)) {\n    val = fn(val);\n  }\n\n  return val;\n});\n\nmodule.exports = until;"]}