{"version":3,"sources":["createHandler.ts"],"names":["Platform","UIManager","NativeModules","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","UIManagerConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","RNGestureHandlerModule","handlerTag","handlerIDToTag","param","Object","name","defaults","res","validProps","key","value","props","isConfigParam","transformIntoHandlerTags","top","left","bottom","right","Array","handlerIDs","current","handle","handlerID","extract","refs","r","stateToPropMappings","State","allowedProps","config","customNativeProps","React","constructor","componentDidMount","hasUnresolvedRefs","setImmediate","filterConfig","transformProps","findNodeHandle","componentDidUpdate","viewTag","componentWillUnmount","clearImmediate","event","state","stateEventName","eventHandler","node","child","ref","newConfig","newViewTag","update","setNativeProps","mergedProps","updates","render","gestureEventHandler","onGestureEvent","gestureStateEventHandler","onHandlerStateChange","events","grandChildren","Touchable","color","hitSlop","collapsable"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  findNodeHandle as findNodeHandleRN,\n  NativeModules,\n  Platform,\n  Touchable,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlers';\nimport { ValueOf } from '../typeUtils';\n\nfunction findNodeHandle(\n  node: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number | React.Component<any, any> | React.ComponentClass<any> {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nconst { UIManager = {} } = NativeModules;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManager.genericDirectEventTypes = {\n  ...UIManager.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManager.getViewManagerConfig?.('getConstants') ??\n  UIManager.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManager;\nUIManager.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManager.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet handlerTag = 1;\nconst handlerIDToTag: Record<string, number> = {};\n\nfunction isConfigParam(param: unknown, name: string) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) ||\n      !('__isNative' in (param as Record<string, unknown>))) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nfunction filterConfig(\n  props: Record<string, unknown>,\n  validProps: string[],\n  defaults: Record<string, unknown> = {}\n) {\n  const res = { ...defaults };\n  validProps.forEach((key) => {\n    const value = props[key];\n    if (isConfigParam(value, key)) {\n      let value = props[key];\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof value !== 'object') {\n          value = { top: value, left: value, bottom: value, right: value };\n        }\n      }\n      res[key] = value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs: any) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (Platform.OS === 'web') {\n    return handlerIDs\n      .map(({ current }: { current: any }) => current)\n      .filter((handle: any) => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      (handlerID: any) =>\n        handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1\n    )\n    .filter((handlerTag: number) => handlerTag > 0);\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  class Handler extends React.Component<T & InternalEventHandlers> {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = handlerTag++;\n      this.config = {};\n      this.propsRef = React.createRef();\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so _update function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: gestureEventHandler,\n        onGestureHandlerStateChange: gestureStateEventHandler,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]}