{"version":3,"sources":["ceil.js"],"names":["exports","__esModule","_ramda","require","ceil","curryN","bind","Math","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAwBA,IAAIC,IAAI,GAAG,CAAC,GAAGF,MAAM,CAACG,MAAX,EAAmB,CAAnB,EAAsB,CAAC,GAAGH,MAAM,CAACI,IAAX,EAAiBC,IAAI,CAACH,IAAtB,EAA4BG,IAA5B,CAAtB,CAAX;AACA,IAAIC,QAAQ,GAAGJ,IAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBQ,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\n/**\n * Returns the smallest integer greater than or equal to a given number.\n *\n * Note: ceil(null) returns integer 0 and does not give a NaN error.\n *\n * @func ceil\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.15.0|v2.15.0}\n * @category Math\n * @sig Number -> Number\n * @param {number} number The number to ceil\n * @return {number} The smallest integer greater than or equal to the given number\n * @example\n *\n * RA.ceil(.95); //=> 1\n * RA.ceil(4); //=> 4\n * RA.ceil(7.004); //=> 8\n * RA.ceil(-0.95); //=> -0\n * RA.ceil(-4); //=> -4\n * RA.ceil(-7.004); //=> -7\n * RA.ceil(null); //=> 0\n */\nvar ceil = (0, _ramda.curryN)(1, (0, _ramda.bind)(Math.ceil, Math));\nvar _default = ceil;\nexports[\"default\"] = _default;"]}