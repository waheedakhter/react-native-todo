452212150f6a72a21fb519d0da63efd2
"use strict";

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Subject_1 = require("../Subject");

var Observable_1 = require("../Observable");

var Subscriber_1 = require("../Subscriber");

var Subscription_1 = require("../Subscription");

var refCount_1 = require("../operators/refCount");

var ConnectableObservable = function (_super) {
  __extends(ConnectableObservable, _super);

  function ConnectableObservable(source, subjectFactory) {
    var _this = _super.call(this) || this;

    _this.source = source;
    _this.subjectFactory = subjectFactory;
    _this._refCount = 0;
    _this._isComplete = false;
    return _this;
  }

  ConnectableObservable.prototype._subscribe = function (subscriber) {
    return this.getSubject().subscribe(subscriber);
  };

  ConnectableObservable.prototype.getSubject = function () {
    var subject = this._subject;

    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }

    return this._subject;
  };

  ConnectableObservable.prototype.connect = function () {
    var connection = this._connection;

    if (!connection) {
      this._isComplete = false;
      connection = this._connection = new Subscription_1.Subscription();
      connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));

      if (connection.closed) {
        this._connection = null;
        connection = Subscription_1.Subscription.EMPTY;
      }
    }

    return connection;
  };

  ConnectableObservable.prototype.refCount = function () {
    return refCount_1.refCount()(this);
  };

  return ConnectableObservable;
}(Observable_1.Observable);

exports.ConnectableObservable = ConnectableObservable;

exports.connectableObservableDescriptor = function () {
  var connectableProto = ConnectableObservable.prototype;
  return {
    operator: {
      value: null
    },
    _refCount: {
      value: 0,
      writable: true
    },
    _subject: {
      value: null,
      writable: true
    },
    _connection: {
      value: null,
      writable: true
    },
    _subscribe: {
      value: connectableProto._subscribe
    },
    _isComplete: {
      value: connectableProto._isComplete,
      writable: true
    },
    getSubject: {
      value: connectableProto.getSubject
    },
    connect: {
      value: connectableProto.connect
    },
    refCount: {
      value: connectableProto.refCount
    }
  };
}();

var ConnectableSubscriber = function (_super) {
  __extends(ConnectableSubscriber, _super);

  function ConnectableSubscriber(destination, connectable) {
    var _this = _super.call(this, destination) || this;

    _this.connectable = connectable;
    return _this;
  }

  ConnectableSubscriber.prototype._error = function (err) {
    this._unsubscribe();

    _super.prototype._error.call(this, err);
  };

  ConnectableSubscriber.prototype._complete = function () {
    this.connectable._isComplete = true;

    this._unsubscribe();

    _super.prototype._complete.call(this);
  };

  ConnectableSubscriber.prototype._unsubscribe = function () {
    var connectable = this.connectable;

    if (connectable) {
      this.connectable = null;
      var connection = connectable._connection;
      connectable._refCount = 0;
      connectable._subject = null;
      connectable._connection = null;

      if (connection) {
        connection.unsubscribe();
      }
    }
  };

  return ConnectableSubscriber;
}(Subject_1.SubjectSubscriber);

var RefCountOperator = function () {
  function RefCountOperator(connectable) {
    this.connectable = connectable;
  }

  RefCountOperator.prototype.call = function (subscriber, source) {
    var connectable = this.connectable;
    connectable._refCount++;
    var refCounter = new RefCountSubscriber(subscriber, connectable);
    var subscription = source.subscribe(refCounter);

    if (!refCounter.closed) {
      refCounter.connection = connectable.connect();
    }

    return subscription;
  };

  return RefCountOperator;
}();

var RefCountSubscriber = function (_super) {
  __extends(RefCountSubscriber, _super);

  function RefCountSubscriber(destination, connectable) {
    var _this = _super.call(this, destination) || this;

    _this.connectable = connectable;
    return _this;
  }

  RefCountSubscriber.prototype._unsubscribe = function () {
    var connectable = this.connectable;

    if (!connectable) {
      this.connection = null;
      return;
    }

    this.connectable = null;
    var refCount = connectable._refCount;

    if (refCount <= 0) {
      this.connection = null;
      return;
    }

    connectable._refCount = refCount - 1;

    if (refCount > 1) {
      this.connection = null;
      return;
    }

    var connection = this.connection;
    var sharedConnection = connectable._connection;
    this.connection = null;

    if (sharedConnection && (!connection || sharedConnection === connection)) {
      sharedConnection.unsubscribe();
    }
  };

  return RefCountSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcm5hbC9vYnNlcnZhYmxlL0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsU0FBQSxHQUFBLE9BQUEsQ0FBQSxZQUFBLENBQUE7O0FBRUEsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQTs7QUFDQSxJQUFBLFlBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBOztBQUNBLElBQUEsY0FBQSxHQUFBLE9BQUEsQ0FBQSxpQkFBQSxDQUFBOztBQUVBLElBQUEsVUFBQSxHQUFBLE9BQUEsQ0FBQSx1QkFBQSxDQUFBOztBQUtBLElBQUEscUJBQUEsR0FBQSxVQUFBLE1BQUEsRUFBQTtBQUE4QyxFQUFBLFNBQUEsQ0FBQSxxQkFBQSxFQUFBLE1BQUEsQ0FBQTs7QUFRNUMsV0FBQSxxQkFBQSxDQUFtQixNQUFuQixFQUNzQixjQUR0QixFQUNzRDtBQUR0RCxRQUFBLEtBQUEsR0FFRSxNQUFBLENBQUEsSUFBQSxDQUFBLElBQUEsS0FBTyxJQUZUOztBQUFtQixJQUFBLEtBQUEsQ0FBQSxNQUFBLEdBQUEsTUFBQTtBQUNHLElBQUEsS0FBQSxDQUFBLGNBQUEsR0FBQSxjQUFBO0FBTlosSUFBQSxLQUFBLENBQUEsU0FBQSxHQUFvQixDQUFwQjtBQUdWLElBQUEsS0FBQSxDQUFBLFdBQUEsR0FBYyxLQUFkOztBQUtDOztBQUdELEVBQUEscUJBQUEsQ0FBQSxTQUFBLENBQUEsVUFBQSxHQUFBLFVBQVcsVUFBWCxFQUFvQztBQUNsQyxXQUFPLEtBQUssVUFBTCxHQUFrQixTQUFsQixDQUE0QixVQUE1QixDQUFQO0FBQ0QsR0FGRDs7QUFJVSxFQUFBLHFCQUFBLENBQUEsU0FBQSxDQUFBLFVBQUEsR0FBVixZQUFBO0FBQ0UsUUFBTSxPQUFPLEdBQUcsS0FBSyxRQUFyQjs7QUFDQSxRQUFJLENBQUMsT0FBRCxJQUFZLE9B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