{"version":3,"sources":["isOdd.js"],"names":["exports","__esModule","_ramda","require","_isInteger","_interopRequireDefault","obj","isOdd","curryN","both","pipe","flip","modulo","complement","equals","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACF,OAAO,CAAC,aAAD,CAAR,CAAvC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACL,UAAX,GAAwBK,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAqBjG,IAAIC,KAAK,GAAG,CAAC,GAAGL,MAAM,CAACM,MAAX,EAAmB,CAAnB,EAAsB,CAAC,GAAGN,MAAM,CAACO,IAAX,EAAiBL,UAAU,CAAC,SAAD,CAA3B,EAAwC,CAAC,GAAGF,MAAM,CAACQ,IAAX,EAAiB,CAAC,GAAGR,MAAM,CAACS,IAAX,EAAiBT,MAAM,CAACU,MAAxB,EAAgC,CAAhC,CAAjB,EAAqD,CAAC,GAAGV,MAAM,CAACW,UAAX,EAAuBX,MAAM,CAACY,MAA9B,EAAsC,CAAtC,CAArD,CAAxC,CAAtB,CAAZ;AACA,IAAIC,QAAQ,GAAGR,KAAf;AACAP,OAAO,CAAC,SAAD,CAAP,GAAqBe,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isInteger = _interopRequireDefault(require(\"./isInteger\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Checks if value is odd integer number.\n * An odd number is an integer which is not a multiple DIVISIBLE of two.\n *\n * @func isOdd\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.18.0|v1.18.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isEven|isEven}\n * @example\n *\n * RA.isOdd(1); // => true\n * RA.isOdd(-Infinity); // => false\n * RA.isOdd(4); // => false\n * RA.isOdd(3); // => true\n */\nvar isOdd = (0, _ramda.curryN)(1, (0, _ramda.both)(_isInteger[\"default\"], (0, _ramda.pipe)((0, _ramda.flip)(_ramda.modulo)(2), (0, _ramda.complement)(_ramda.equals)(0))));\nvar _default = isOdd;\nexports[\"default\"] = _default;"]}