1612c464893bb4b116bcdba3d10b791d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _DeprecatedTextPropTypes = _interopRequireDefault(require("../DeprecatedPropTypes/DeprecatedTextPropTypes"));

var PressabilityDebug = _interopRequireWildcard(require("../Pressability/PressabilityDebug"));

var _usePressability = _interopRequireDefault(require("../Pressability/usePressability"));

var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));

var _processColor = _interopRequireDefault(require("../StyleSheet/processColor"));

var _TextAncestor = _interopRequireDefault(require("./TextAncestor"));

var _TextNativeComponent = require("./TextNativeComponent");

var React = _interopRequireWildcard(require("react"));

var _invariant = _interopRequireDefault(require("invariant"));

var _excluded = ["accessible", "allowFontScaling", "ellipsizeMode", "onLongPress", "onPress", "onPressIn", "onPressOut", "onResponderGrant", "onResponderMove", "onResponderRelease", "onResponderTerminate", "onResponderTerminationRequest", "onStartShouldSetResponder", "pressRetentionOffset", "suppressHighlighting"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Text = React.forwardRef(function (props, forwardedRef) {
  var accessible = props.accessible,
      allowFontScaling = props.allowFontScaling,
      ellipsizeMode = props.ellipsizeMode,
      onLongPress = props.onLongPress,
      onPress = props.onPress,
      _onPressIn = props.onPressIn,
      _onPressOut = props.onPressOut,
      _onResponderGrant = props.onResponderGrant,
      _onResponderMove = props.onResponderMove,
      _onResponderRelease = props.onResponderRelease,
      _onResponderTerminate = props.onResponderTerminate,
      onResponderTerminationRequest = props.onResponderTerminationRequest,
      onStartShouldSetResponder = props.onStartShouldSetResponder,
      pressRetentionOffset = props.pressRetentionOffset,
      suppressHighlighting = props.suppressHighlighting,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);

  var _useState = (0, React.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isHighlighted = _useState2[0],
      setHighlighted = _useState2[1];

  var isPressable = (onPress != null || onLongPress != null || onStartShouldSetResponder != null) && restProps.disabled !== true;
  var initialized = useLazyInitialization(isPressable);
  var config = (0, React.useMemo)(function () {
    return initialized ? {
      disabled: !isPressable,
      pressRectOffset: pressRetentionOffset,
      onLongPress: onLongPress,
      onPress: onPress,
      onPressIn: function onPressIn(event) {
        setHighlighted(!suppressHighlighting);
        _onPressIn == null ? void 0 : _onPressIn(event);
      },
      onPressOut: function onPressOut(event) {
        setHighlighted(false);
        _onPressOut == null ? void 0 : _onPressOut(event);
      },
      onResponderTerminationRequest_DEPRECATED: onResponderTerminationRequest,
      onStartShouldSetResponder_DEPRECATED: onStartShouldSetResponder
    } : null;
  }, [initialized, isPressable, pressRetentionOffset, onLongPress, onPress, _onPressIn, _onPressOut, onResponderTerminationRequest, onStartShouldSetResponder, suppressHighlighting]);
  var eventHandlers = (0, _usePressability.default)(config);
  var eventHandlersForText = (0, React.useMemo)(function () {
    return eventHandlers == null ? null : {
      onResponderGrant: function onResponderGrant(event) {
        eventHandlers.onResponderGrant(event);

        if (_onResponderGrant != null) {
          _onResponderGrant(event);
        }
      },
      onResponderMove: function onResponderMove(event) {
        eventHandlers.onResponderMove(event);

        if (_onResponderMove != null) {
          _onResponderMove(event);
        }
      },
      onResponderRelease: function onResponderRelease(event) {
        eventHandlers.onResponderRelease(event);

        if (_onResponderRelease != null) {
          _onResponderRelease(event);
        }
      },
      onResponderTerminate: function onResponderTerminate(event) {
        eventHandlers.onResponderTerminate(event);

        if (_onResponderTerminate != null) {
          _onResponderTerminate(event);
        }
      },
      onResponderTerminationRequest: eventHandlers.onResponderTerminationRequest,
      onStartShouldSetResponder: eventHandlers.onStartShouldSetResponder
    };
  }, [eventHandlers, _onResponderGrant, _onResponderMove, _onResponderRelease, _onResponderTerminate]);
  var selectionColor = restProps.selectionColor == null ? null : (0, _processColor.default)(restProps.selectionColor);
  var style = restProps.style;

  if (__DEV__) {
    if (PressabilityDebug.isEnabled() && onPress != null) {
      style = _StyleSheet.default.compose(restProps.style, {
        color: 'magenta'
      });
    }
  }

  var numberOfLines = restProps.numberOfLines;

  if (numberOfLines != null && !(numberOfLines >= 0)) {
    console.error("'numberOfLines' in <Text> must be a non-negative number, received: " + numberOfLines + ". The value will be set to 0.");
    numberOfLines = 0;
  }

  var hasTextAncestor = (0, React.useContext)(_TextAncestor.default);
  return hasTextAncestor ? React.createElement(_TextNativeComponent.NativeVirtualText, (0, _extends2.default)({}, restProps, eventHandlersForText, {
    isHighlighted: isHighlighted,
    numberOfLines: numberOfLines,
    selectionColor: selectionColor,
    style: style,
    ref: forwardedRef
  })) : React.createElement(_TextAncestor.default.Provider, {
    value: true
  }, React.createElement(_TextNativeComponent.NativeText, (0, _extends2.default)({}, restProps, eventHandlersForText, {
    accessible: accessible !== false,
    allowFontScaling: allowFontScaling !== false,
    ellipsizeMode: ellipsizeMode != null ? ellipsizeMode : 'tail',
    isHighlighted: isHighlighted,
    numberOfLines: numberOfLines,
    selectionColor: selectionColor,
    style: style,
    ref: forwardedRef
  })));
});
Text.displayName = 'Text';
Text.propTypes = _DeprecatedTextPropTypes.default;

function useLazyInitialization(newValue) {
  var _useState3 = (0, React.useState)(newValue),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      oldValue = _useState4[0],
      setValue = _useState4[1];

  if (!oldValue && newValue) {
    setValue(newValue);
  }

  return oldValue;
}

module.exports = Text;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHQuanMiXSwibmFtZXMiOlsiVGV4dCIsIlJlYWN0IiwiZm9yd2FyZFJlZiIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwiYWNjZXNzaWJsZSIsImFsbG93Rm9udFNjYWxpbmciLCJlbGxpcHNpemVNb2RlIiwib25Mb25nUHJlc3MiLCJvblByZXNzIiwib25QcmVzc0luIiwib25QcmVzc091dCIsIm9uUmVzcG9uZGVyR3JhbnQiLCJvblJlc3BvbmRlck1vdmUiLCJvblJlc3BvbmRlclJlbGVhc2UiLCJvblJlc3BvbmRlclRlcm1pbmF0ZSIsIm9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0Iiwib25TdGFydFNob3VsZFNldFJlc3BvbmRlciIsInByZXNzUmV0ZW50aW9uT2Zmc2V0Iiwic3VwcHJlc3NIaWdobGlnaHRpbmciLCJyZXN0UHJvcHMiLCJpc0hpZ2hsaWdodGVkIiwic2V0SGlnaGxpZ2h0ZWQiLCJpc1ByZXNzYWJsZSIsImRpc2FibGVkIiwiaW5pdGlhbGl6ZWQiLCJ1c2VMYXp5SW5pdGlhbGl6YXRpb24iLCJjb25maWciLCJwcmVzc1JlY3RPZmZzZXQiLCJldmVudCIsIm9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0X0RFUFJFQ0FURUQiLCJvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyX0RFUFJFQ0FURUQiLCJldmVudEhhbmRsZXJzIiwiZXZlbnRIYW5kbGVyc0ZvclRleHQiLCJzZWxlY3Rpb25Db2xvciIsInN0eWxlIiwiX19ERVZfXyIsIlByZXNzYWJpbGl0eURlYnVnIiwiaXNFbmFibGVkIiwiU3R5bGVTaGVldCIsImNvbXBvc2UiLCJjb2xvciIsIm51bWJlck9mTGluZXMiLCJjb25zb2xlIiwiZXJyb3IiLCJoYXNUZXh0QW5jZXN0b3IiLCJUZXh0QW5jZXN0b3IiLCJkaXNwbGF5TmFtZSIsInByb3BUeXBlcyIsIkRlcHJlY2F0ZWRUZXh0UHJvcFR5cGVzIiwibmV3VmFsdWUiLCJvbGRWYWx1ZSIsInNldFZhbHVlIiwibW9kdWxl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QUg3QjtBQUlFLElBQUEsZ0JBQWdCLEVBQUVDLGdCQUFnQixLQUFLLEtBSnpDO0FBS0UsSUFBQSxhQUFhLEVBQUVDLGFBQUYsV0FBRUEsYUFBRixHQUFtQixNQUxsQztBQU1FLElBQUEsYUFBYSxFQUFFYyxhQU5qQjtBQU9FLElBQUEsYUFBYSxFQUFFcUIsYUFQakI7QUFRRSxJQUFBLGNBQWMsRUFBRVIsY0FSbEI7QUFTRSxJQUFBLEtBQUssRUFBRUMsS0FUVDtBQVVFLElBQUEsR0FBRyxFQUFFL0I7QUFWUCxLQURGLENBWEY7QUEwQkQsQ0E3SkcsQ0FISjtBQWtLQUosSUFBSSxDQUFDK0MsV0FBTCxHQUFtQixNQUFuQjtBQUdBL0MsSUFBSSxDQUFDZ0QsU0FBTCxHQUFpQkMsZ0NBQWpCOztBQU9BLFNBQVN2QixxQkFBVCxDQUErQndCLFFBQS9CLEVBQTJEO0FBQ3pELG1CQUE2QixvQkFBU0EsUUFBVCxDQUE3QjtBQUFBO0FBQUEsTUFBT0MsUUFBUDtBQUFBLE1BQWlCQyxRQUFqQjs7QUFDQSxNQUFJLENBQUNELFFBQUQsSUFBYUQsUUFBakIsRUFBMkI7QUFDekJFLElBQUFBLFFBQVEsQ0FBQ0YsUUFBRCxDQUFSO0FBQ0Q7O0FBQ0QsU0FBT0MsUUFBUDtBQUNEOztBQUdERSxNQUFNLENBQUNDLE9BQVAsR0FBa0J0RCxJQUFsQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IERlcHJlY2F0ZWRUZXh0UHJvcFR5cGVzIGZyb20gJy4uL0RlcHJlY2F0ZWRQcm9wVHlwZXMvRGVwcmVjYXRlZFRleHRQcm9wVHlwZXMnO1xuaW1wb3J0ICogYXMgUHJlc3NhYmlsaXR5RGVidWcgZnJvbSAnLi4vUHJlc3NhYmlsaXR5L1ByZXNzYWJpbGl0eURlYnVnJztcbmltcG9ydCB1c2VQcmVzc2FiaWxpdHkgZnJvbSAnLi4vUHJlc3NhYmlsaXR5L3VzZVByZXNzYWJpbGl0eSc7XG5pbXBvcnQgU3R5bGVTaGVldCBmcm9tICcuLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IHByb2Nlc3NDb2xvciBmcm9tICcuLi9TdHlsZVNoZWV0L3Byb2Nlc3NDb2xvcic7XG5pbXBvcnQgVGV4dEFuY2VzdG9yIGZyb20gJy4vVGV4dEFuY2VzdG9yJztcbmltcG9ydCB7TmF0aXZlVGV4dCwgTmF0aXZlVmlydHVhbFRleHR9IGZyb20gJy4vVGV4dE5hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQge3R5cGUgVGV4dFByb3BzfSBmcm9tICcuL1RleHRQcm9wcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3VzZUNvbnRleHQsIHVzZU1lbW8sIHVzZVN0YXRlfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbi8qKlxuICogVGV4dCBpcyB0aGUgZnVuZGFtZW50YWwgY29tcG9uZW50IGZvciBkaXNwbGF5aW5nIHRleHQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3RleHQuaHRtbFxuICovXG5jb25zdCBUZXh0OiBSZWFjdC5BYnN0cmFjdENvbXBvbmVudDxcbiAgVGV4dFByb3BzLFxuICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBOYXRpdmVUZXh0IHwgdHlwZW9mIE5hdGl2ZVZpcnR1YWxUZXh0Pixcbj4gPSBSZWFjdC5mb3J3YXJkUmVmKChwcm9wczogVGV4dFByb3BzLCBmb3J3YXJkZWRSZWYpID0+IHtcbiAgY29uc3Qge1xuICAgIGFjY2Vzc2libGUsXG4gICAgYWxsb3dGb250U2NhbGluZyxcbiAgICBlbGxpcHNpemVNb2RlLFxuICAgIG9uTG9uZ1ByZXNzLFxuICAgIG9uUHJlc3MsXG4gICAgb25QcmVzc0luLFxuICAgIG9uUHJlc3NPdXQsXG4gICAgb25SZXNwb25kZXJHcmFudCxcbiAgICBvblJlc3BvbmRlck1vdmUsXG4gICAgb25SZXNwb25kZXJSZWxlYXNlLFxuICAgIG9uUmVzcG9uZGVyVGVybWluYXRlLFxuICAgIG9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0LFxuICAgIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXIsXG4gICAgcHJlc3NSZXRlbnRpb25PZmZzZXQsXG4gICAgc3VwcHJlc3NIaWdobGlnaHRpbmcsXG4gICAgLi4ucmVzdFByb3BzXG4gIH0gPSBwcm9wcztcblxuICBjb25zdCBbaXNIaWdobGlnaHRlZCwgc2V0SGlnaGxpZ2h0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGlzUHJlc3NhYmxlID1cbiAgICAob25QcmVzcyAhPSBudWxsIHx8XG4gICAgICBvbkxvbmdQcmVzcyAhPSBudWxsIHx8XG4gICAgICBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyICE9IG51bGwpICYmXG4gICAgcmVzdFByb3BzLmRpc2FibGVkICE9PSB0cnVlO1xuXG4gIGNvbnN0IGluaXRpYWxpemVkID0gdXNlTGF6eUluaXRpYWxpemF0aW9uKGlzUHJlc3NhYmxlKTtcbiAgY29uc3QgY29uZmlnID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgaW5pdGlhbGl6ZWRcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBkaXNhYmxlZDogIWlzUHJlc3NhYmxlLFxuICAgICAgICAgICAgcHJlc3NSZWN0T2Zmc2V0OiBwcmVzc1JldGVudGlvbk9mZnNldCxcbiAgICAgICAgICAgIG9uTG9uZ1ByZXNzLFxuICAgICAgICAgICAgb25QcmVzcyxcbiAgICAgICAgICAgIG9uUHJlc3NJbihldmVudCkge1xuICAgICAgICAgICAgICBzZXRIaWdobGlnaHRlZCghc3VwcHJlc3NIaWdobGlnaHRpbmcpO1xuICAgICAgICAgICAgICBvblByZXNzSW4/LihldmVudCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25QcmVzc091dChldmVudCkge1xuICAgICAgICAgICAgICBzZXRIaWdobGlnaHRlZChmYWxzZSk7XG4gICAgICAgICAgICAgIG9uUHJlc3NPdXQ/LihldmVudCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3RfREVQUkVDQVRFRDogb25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3QsXG4gICAgICAgICAgICBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyX0RFUFJFQ0FURUQ6IG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXIsXG4gICAgICAgICAgfVxuICAgICAgICA6IG51bGwsXG4gICAgW1xuICAgICAgaW5pdGlhbGl6ZWQsXG4gICAgICBpc1ByZXNzYWJsZSxcbiAgICAgIHByZXNzUmV0ZW50aW9uT2Zmc2V0LFxuICAgICAgb25Mb25nUHJlc3MsXG4gICAgICBvblByZXNzLFxuICAgICAgb25QcmVzc0luLFxuICAgICAgb25QcmVzc091dCxcbiAgICAgIG9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0LFxuICAgICAgb25TdGFydFNob3VsZFNldFJlc3BvbmRlcixcbiAgICAgIHN1cHByZXNzSGlnaGxpZ2h0aW5nLFxuICAgIF0sXG4gICk7XG5cbiAgY29uc3QgZXZlbnRIYW5kbGVycyA9IHVzZVByZXNzYWJpbGl0eShjb25maWcpO1xuICBjb25zdCBldmVudEhhbmRsZXJzRm9yVGV4dCA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIGV2ZW50SGFuZGxlcnMgPT0gbnVsbFxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiB7XG4gICAgICAgICAgICBvblJlc3BvbmRlckdyYW50KGV2ZW50KSB7XG4gICAgICAgICAgICAgIGV2ZW50SGFuZGxlcnMub25SZXNwb25kZXJHcmFudChldmVudCk7XG4gICAgICAgICAgICAgIGlmIChvblJlc3BvbmRlckdyYW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBvblJlc3BvbmRlckdyYW50KGV2ZW50KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uUmVzcG9uZGVyTW92ZShldmVudCkge1xuICAgICAgICAgICAgICBldmVudEhhbmRsZXJzLm9uUmVzcG9uZGVyTW92ZShldmVudCk7XG4gICAgICAgICAgICAgIGlmIChvblJlc3BvbmRlck1vdmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG9uUmVzcG9uZGVyTW92ZShldmVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblJlc3BvbmRlclJlbGVhc2UoZXZlbnQpIHtcbiAgICAgICAgICAgICAgZXZlbnRIYW5kbGVycy5vblJlc3BvbmRlclJlbGVhc2UoZXZlbnQpO1xuICAgICAgICAgICAgICBpZiAob25SZXNwb25kZXJSZWxlYXNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBvblJlc3BvbmRlclJlbGVhc2UoZXZlbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25SZXNwb25kZXJUZXJtaW5hdGUoZXZlbnQpIHtcbiAgICAgICAgICAgICAgZXZlbnRIYW5kbGVycy5vblJlc3BvbmRlclRlcm1pbmF0ZShldmVudCk7XG4gICAgICAgICAgICAgIGlmIChvblJlc3BvbmRlclRlcm1pbmF0ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb25SZXNwb25kZXJUZXJtaW5hdGUoZXZlbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3Q6XG4gICAgICAgICAgICAgIGV2ZW50SGFuZGxlcnMub25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3QsXG4gICAgICAgICAgICBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyOiBldmVudEhhbmRsZXJzLm9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXIsXG4gICAgICAgICAgfSxcbiAgICBbXG4gICAgICBldmVudEhhbmRsZXJzLFxuICAgICAgb25SZXNwb25kZXJHcmFudCxcbiAgICAgIG9uUmVzcG9uZGVyTW92ZSxcbiAgICAgIG9uUmVzcG9uZGVyUmVsZWFzZSxcbiAgICAgIG9uUmVzcG9uZGVyVGVybWluYXRlLFxuICAgIF0sXG4gICk7XG5cbiAgLy8gVE9ETzogTW92ZSB0aGlzIHByb2Nlc3NpbmcgdG8gdGhlIHZpZXcgY29uZmlndXJhdGlvbi5cbiAgY29uc3Qgc2VsZWN0aW9uQ29sb3IgPVxuICAgIHJlc3RQcm9wcy5zZWxlY3Rpb25Db2xvciA9PSBudWxsXG4gICAgICA/IG51bGxcbiAgICAgIDogcHJvY2Vzc0NvbG9yKHJlc3RQcm9wcy5zZWxlY3Rpb25Db2xvcik7XG5cbiAgbGV0IHN0eWxlID0gcmVzdFByb3BzLnN0eWxlO1xuICBpZiAoX19ERVZfXykge1xuICAgIGlmIChQcmVzc2FiaWxpdHlEZWJ1Zy5pc0VuYWJsZWQoKSAmJiBvblByZXNzICE9IG51bGwpIHtcbiAgICAgIHN0eWxlID0gU3R5bGVTaGVldC5jb21wb3NlKHJlc3RQcm9wcy5zdHlsZSwge1xuICAgICAgICBjb2xvcjogJ21hZ2VudGEnLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbGV0IG51bWJlck9mTGluZXMgPSByZXN0UHJvcHMubnVtYmVyT2ZMaW5lcztcbiAgaWYgKG51bWJlck9mTGluZXMgIT0gbnVsbCAmJiAhKG51bWJlck9mTGluZXMgPj0gMCkpIHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgYCdudW1iZXJPZkxpbmVzJyBpbiA8VGV4dD4gbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIsIHJlY2VpdmVkOiAke251bWJlck9mTGluZXN9LiBUaGUgdmFsdWUgd2lsbCBiZSBzZXQgdG8gMC5gLFxuICAgICk7XG4gICAgbnVtYmVyT2ZMaW5lcyA9IDA7XG4gIH1cblxuICBjb25zdCBoYXNUZXh0QW5jZXN0b3IgPSB1c2VDb250ZXh0KFRleHRBbmNlc3Rvcik7XG5cbiAgcmV0dXJuIGhhc1RleHRBbmNlc3RvciA/IChcbiAgICA8TmF0aXZlVmlydHVhbFRleHRcbiAgICAgIHsuLi5yZXN0UHJvcHN9XG4gICAgICB7Li4uZXZlbnRIYW5kbGVyc0ZvclRleHR9XG4gICAgICBpc0hpZ2hsaWdodGVkPXtpc0hpZ2hsaWdodGVkfVxuICAgICAgbnVtYmVyT2ZMaW5lcz17bnVtYmVyT2ZMaW5lc31cbiAgICAgIHNlbGVjdGlvbkNvbG9yPXtzZWxlY3Rpb25Db2xvcn1cbiAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAgIHJlZj17Zm9yd2FyZGVkUmVmfVxuICAgIC8+XG4gICkgOiAoXG4gICAgPFRleHRBbmNlc3Rvci5Qcm92aWRlciB2YWx1ZT17dHJ1ZX0+XG4gICAgICA8TmF0aXZlVGV4dFxuICAgICAgICB7Li4ucmVzdFByb3BzfVxuICAgICAgICB7Li4uZXZlbnRIYW5kbGVyc0ZvclRleHR9XG4gICAgICAgIGFjY2Vzc2libGU9e2FjY2Vzc2libGUgIT09IGZhbHNlfVxuICAgICAgICBhbGxvd0ZvbnRTY2FsaW5nPXthbGxvd0ZvbnRTY2FsaW5nICE9PSBmYWxzZX1cbiAgICAgICAgZWxsaXBzaXplTW9kZT17ZWxsaXBzaXplTW9kZSA/PyAndGFpbCd9XG4gICAgICAgIGlzSGlnaGxpZ2h0ZWQ9e2lzSGlnaGxpZ2h0ZWR9XG4gICAgICAgIG51bWJlck9mTGluZXM9e251bWJlck9mTGluZXN9XG4gICAgICAgIHNlbGVjdGlvbkNvbG9yPXtzZWxlY3Rpb25Db2xvcn1cbiAgICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgICByZWY9e2ZvcndhcmRlZFJlZn1cbiAgICAgIC8+XG4gICAgPC9UZXh0QW5jZXN0b3IuUHJvdmlkZXI+XG4gICk7XG59KTtcblxuVGV4dC5kaXNwbGF5TmFtZSA9ICdUZXh0JztcblxuLy8gVE9ETzogRGVsZXRlIHRoaXMuXG5UZXh0LnByb3BUeXBlcyA9IERlcHJlY2F0ZWRUZXh0UHJvcFR5cGVzO1xuXG4vKipcbiAqIFJldHVybnMgZmFsc2UgdW50aWwgdGhlIGZpcnN0IHRpbWUgYG5ld1ZhbHVlYCBpcyB0cnVlLCBhZnRlciB3aGljaCB0aGlzIHdpbGxcbiAqIGFsd2F5cyByZXR1cm4gdHJ1ZS4gVGhpcyBpcyBuZWNlc3NhcnkgdG8gbGF6aWx5IGluaXRpYWxpemUgYFByZXNzYWJpbGl0eWAgc29cbiAqIHdlIGRvIG5vdCBlYWdlcmx5IGNyZWF0ZSBvbmUgZm9yIGV2ZXJ5IHByZXNzYWJsZSBgVGV4dGAgY29tcG9uZW50LlxuICovXG5mdW5jdGlvbiB1c2VMYXp5SW5pdGlhbGl6YXRpb24obmV3VmFsdWU6IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgY29uc3QgW29sZFZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTdGF0ZShuZXdWYWx1ZSk7XG4gIGlmICghb2xkVmFsdWUgJiYgbmV3VmFsdWUpIHtcbiAgICBzZXRWYWx1ZShuZXdWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG9sZFZhbHVlO1xufVxuXG4vLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYXN0XSAtIE5vIGdvb2Qgd2F5IHRvIHR5cGUgYSBSZWFjdC5BYnN0cmFjdENvbXBvbmVudCB3aXRoIHN0YXRpY3MuXG5tb2R1bGUuZXhwb3J0cyA9IChUZXh0OiB0eXBlb2YgVGV4dCAmXG4gICRSZWFkT25seTx7XG4gICAgcHJvcFR5cGVzOiB0eXBlb2YgRGVwcmVjYXRlZFRleHRQcm9wVHlwZXMsXG4gIH0+KTtcbiJdfQ==