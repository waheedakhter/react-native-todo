7984ed6d7f27a3de384d1decf01d5238
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var NativeComponentRegistry = _interopRequireWildcard(require("../../NativeComponent/NativeComponentRegistry"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var ScrollViewNativeComponent = NativeComponentRegistry.get('RCTScrollView', function () {
  return {
    uiViewClassName: 'RCTScrollView',
    bubblingEventTypes: {},
    directEventTypes: {
      topScrollToTop: {
        registrationName: 'onScrollToTop'
      }
    },
    validAttributes: {
      alwaysBounceHorizontal: true,
      alwaysBounceVertical: true,
      automaticallyAdjustContentInsets: true,
      automaticallyAdjustsScrollIndicatorInsets: true,
      bounces: true,
      bouncesZoom: true,
      canCancelContentTouches: true,
      centerContent: true,
      contentInset: {
        diff: require('../../Utilities/differ/pointsDiffer')
      },
      contentOffset: {
        diff: require('../../Utilities/differ/pointsDiffer')
      },
      contentInsetAdjustmentBehavior: true,
      decelerationRate: true,
      directionalLockEnabled: true,
      disableIntervalMomentum: true,
      endFillColor: {
        process: require('../../StyleSheet/processColor')
      },
      fadingEdgeLength: true,
      indicatorStyle: true,
      inverted: true,
      keyboardDismissMode: true,
      maintainVisibleContentPosition: true,
      maximumZoomScale: true,
      minimumZoomScale: true,
      nestedScrollEnabled: true,
      onMomentumScrollBegin: true,
      onMomentumScrollEnd: true,
      onScroll: true,
      onScrollBeginDrag: true,
      onScrollEndDrag: true,
      onScrollToTop: true,
      overScrollMode: true,
      pagingEnabled: true,
      persistentScrollbar: true,
      pinchGestureEnabled: true,
      scrollEnabled: true,
      scrollEventThrottle: true,
      scrollIndicatorInsets: {
        diff: require('../../Utilities/differ/pointsDiffer')
      },
      scrollPerfTag: true,
      scrollToOverflowEnabled: true,
      scrollsToTop: true,
      sendMomentumEvents: true,
      showsHorizontalScrollIndicator: true,
      showsVerticalScrollIndicator: true,
      snapToAlignment: true,
      snapToEnd: true,
      snapToInterval: true,
      snapToOffsets: true,
      snapToStart: true,
      zoomScale: true
    }
  };
});
var _default = ScrollViewNativeComponent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjcm9sbFZpZXdOYXRpdmVDb21wb25lbnQuanMiXSwibmFtZXMiOlsiU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudCIsIk5hdGl2ZUNvbXBvbmVudFJlZ2lzdHJ5IiwiZ2V0IiwidWlWaWV3Q2xhc3NOYW1lIiwiYnViYmxpbmdFdmVudFR5cGVzIiwiZGlyZWN0RXZlbnRUeXBlcyIsInRvcFNjcm9sbFRvVG9wIiwicmVnaXN0cmF0aW9uTmFtZSIsInZhbGlkQXR0cmlidXRlcyIsImFsd2F5c0JvdW5jZUhvcml6b250YWwiLCJhbHdheXNCb3VuY2VWZXJ0aWNhbCIsImF1dG9tYXRpY2FsbHlBZGp1c3RDb250ZW50SW5zZXRzIiwiYXV0b21hdGljYWxseUFkanVzdHNTY3JvbGxJbmRpY2F0b3JJbnNldHMiLCJib3VuY2VzIiwiYm91bmNlc1pvb20iLCJjYW5DYW5jZWxDb250ZW50VG91Y2hlcyIsImNlbnRlckNvbnRlbnQiLCJjb250ZW50SW5zZXQiLCJkaWZmIiwicmVxdWlyZSIsImNvbnRlbnRPZmZzZXQiLCJjb250ZW50SW5zZXRBZGp1c3RtZW50QmVoYXZpb3IiLCJkZWNlbGVyYXRpb25SYXRlIiwiZGlyZWN0aW9uYWxMb2NrRW5hYmxlZCIsImRpc2FibGVJbnRlcnZhbE1vbWVudHVtIiwiZW5kRmlsbENvbG9yIiwicHJvY2VzcyIsImZhZGluZ0VkZ2VMZW5ndGgiLCJpbmRpY2F0b3JTdHlsZSIsImludmVydGVkIiwia2V5Ym9hcmREaXNtaXNzTW9kZSIsIm1haW50YWluVmlzaWJsZUNvbnRlbnRQb3NpdGlvbiIsIm1heGltdW1ab29tU2NhbGUiLCJtaW5pbXVtWm9vbVNjYWxlIiwibmVzdGVkU2Nyb2xsRW5hYmxlZCIsIm9uTW9tZW50dW1TY3JvbGxCZWdpbiIsIm9uTW9tZW50dW1TY3JvbGxFbmQiLCJvblNjcm9sbCIsIm9uU2Nyb2xsQmVnaW5EcmFnIiwib25TY3JvbGxFbmREcmFnIiwib25TY3JvbGxUb1RvcCIsIm92ZXJTY3JvbGxNb2RlIiwicGFnaW5nRW5hYmxlZCIsInBlcnNpc3RlbnRTY3JvbGxiYXIiLCJwaW5jaEdlc3R1cmVFbmFibGVkIiwic2Nyb2xsRW5hYmxlZCIsInNjcm9sbEV2ZW50VGhyb3R0bGUiLCJzY3JvbGxJbmRpY2F0b3JJbnNldHMiLCJzY3JvbGxQZXJmVGFnIiwic2Nyb2xsVG9PdmVyZmxvd0VuYWJsZWQiLCJzY3JvbGxzVG9Ub3AiLCJzZW5kTW9tZW50dW1FdmVudHMiLCJzaG93c0hvcml6b250YWxTY3JvbGxJbmRpY2F0b3IiLCJzaG93c1ZlcnRpY2FsU2Nyb2xsSW5kaWNhdG9yIiwic25hcFRvQWxpZ25tZW50Iiwic25hcFRvRW5kIiwic25hcFRvSW50ZXJ2YWwiLCJzbmFwVG9PZmZzZXRzIiwic25hcFRvU3RhcnQiLCJ6b29tU2NhbGUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBWUE7Ozs7OztBQUVBLElBQU1BLHlCQUErQyxHQUFHQyx1QkFBdUIsQ0FBQ0MsR0FBeEIsQ0FDdEQsZUFEc0QsRUFFdEQ7QUFBQSxTQUFPO0FBQ0xDLElBQUFBLGVBQWUsRUFBRSxlQURaO0FBRUxDLElBQUFBLGtCQUFrQixFQUFFLEVBRmY7QUFHTEMsSUFBQUEsZ0JBQWdCLEVBQUU7QUFDaEJDLE1BQUFBLGNBQWMsRUFBRTtBQUNkQyxRQUFBQSxnQkFBZ0IsRUFBRTtBQURKO0FBREEsS0FIYjtBQVFMQyxJQUFBQSxlQUFlLEVBQUU7QUFDZkMsTUFBQUEsc0JBQXNCLEVBQUUsSUFEVDtBQUVmQyxNQUFBQSxvQkFBb0IsRUFBRSxJQUZQO0FBR2ZDLE1BQUFBLGdDQUFnQyxFQUFFLElBSG5CO0FBSWZDLE1BQUFBLHlDQUF5QyxFQUFFLElBSjVCO0FBS2ZDLE1BQUFBLE9BQU8sRUFBRSxJQUxNO0FBTWZDLE1BQUFBLFdBQVcsRUFBRSxJQU5FO0FBT2ZDLE1BQUFBLHVCQUF1QixFQUFFLElBUFY7QUFRZkMsTUFBQUEsYUFBYSxFQUFFLElBUkE7QUFTZkMsTUFBQUEsWUFBWSxFQUFFO0FBQ1pDLFFBQUFBLElBQUksRUFBRUMsT0FBTyxDQUFDLHFDQUFEO0FBREQsT0FUQztBQVlmQyxNQUFBQSxhQUFhLEVBQUU7QUFDYkYsUUFBQUEsSUFBSSxFQUFFQyxPQUFPLENBQUMscUNBQUQ7QUFEQSxPQVpBO0FBZWZFLE1BQUFBLDhCQUE4QixFQUFFLElBZmpCO0FBZ0JmQyxNQUFBQSxnQkFBZ0IsRUFBRSxJQWhCSDtBQWlCZkMsTUFBQUEsc0JBQXNCLEVBQUUsSUFqQlQ7QUFrQmZDLE1BQUFBLHVCQUF1QixFQUFFLElBbEJWO0FBbUJmQyxNQUFBQSxZQUFZLEVBQUU7QUFDWkMsUUFBQUEsT0FBTyxFQUFFUCxPQUFPLENBQUMsK0JBQUQ7QUFESixPQW5CQztBQXNCZlEsTUFBQUEsZ0JBQWdCLEVBQUUsSUF0Qkg7QUF1QmZDLE1BQUFBLGNBQWMsRUFBRSxJQXZCRDtBQXdCZkMsTUFBQUEsUUFBUSxFQUFFLElBeEJLO0FBeUJmQyxNQUFBQSxtQkFBbUIsRUFBRSxJQXpCTjtBQTBCZkMsTUFBQUEsOEJBQThCLEVBQUUsSUExQmpCO0FBMkJmQyxNQUFBQSxnQkFBZ0IsRUFBRSxJQTNCSDtBQTRCZkMsTUFBQUEsZ0JBQWdCLEVBQUUsSUE1Qkg7QUE2QmZDLE1BQUFBLG1CQUFtQixFQUFFLElBN0JOO0FBOEJmQyxNQUFBQSxxQkFBcUIsRUFBRSxJQTlCUjtBQStCZkMsTUFBQUEsbUJBQW1CLEVBQUUsSUEvQk47QUFnQ2ZDLE1BQUFBLFFBQVEsRUFBRSxJQWhDSztBQWlDZkMsTUFBQUEsaUJBQWlCLEVBQUUsSUFqQ0o7QUFrQ2ZDLE1BQUFBLGVBQWUsRUFBRSxJQWxDRjtBQW1DZkMsTUFBQUEsYUFBYSxFQUFFLElBbkNBO0FBb0NmQyxNQUFBQSxjQUFjLEVBQUUsSUFwQ0Q7QUFxQ2ZDLE1BQUFBLGFBQWEsRUFBRSxJQXJDQTtBQXNDZkMsTUFBQUEsbUJBQW1CLEVBQUUsSUF0Q047QUF1Q2ZDLE1BQUFBLG1CQUFtQixFQUFFLElBdkNOO0FBd0NmQyxNQUFBQSxhQUFhLEVBQUUsSUF4Q0E7QUF5Q2ZDLE1BQUFBLG1CQUFtQixFQUFFLElBekNOO0FBMENmQyxNQUFBQSxxQkFBcUIsRUFBRTtBQUNyQjdCLFFBQUFBLElBQUksRUFBRUMsT0FBTyxDQUFDLHFDQUFEO0FBRFEsT0ExQ1I7QUE2Q2Y2QixNQUFBQSxhQUFhLEVBQUUsSUE3Q0E7QUE4Q2ZDLE1BQUFBLHVCQUF1QixFQUFFLElBOUNWO0FBK0NmQyxNQUFBQSxZQUFZLEVBQUUsSUEvQ0M7QUFnRGZDLE1BQUFBLGtCQUFrQixFQUFFLElBaERMO0FBaURmQyxNQUFBQSw4QkFBOEIsRUFBRSxJQWpEakI7QUFrRGZDLE1BQUFBLDRCQUE0QixFQUFFLElBbERmO0FBbURmQyxNQUFBQSxlQUFlLEVBQUUsSUFuREY7QUFvRGZDLE1BQUFBLFNBQVMsRUFBRSxJQXBESTtBQXFEZkMsTUFBQUEsY0FBYyxFQUFFLElBckREO0FBc0RmQyxNQUFBQSxhQUFhLEVBQUUsSUF0REE7QUF1RGZDLE1BQUFBLFdBQVcsRUFBRSxJQXZERTtBQXdEZkMsTUFBQUEsU0FBUyxFQUFFO0FBeERJO0FBUlosR0FBUDtBQUFBLENBRnNELENBQXhEO2VBdUVlM0QseUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtTY3JvbGxWaWV3TmF0aXZlUHJvcHMgYXMgUHJvcHN9IGZyb20gJy4vU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudFR5cGUnO1xuaW1wb3J0IHR5cGUge0hvc3RDb21wb25lbnR9IGZyb20gJy4uLy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0ICogYXMgTmF0aXZlQ29tcG9uZW50UmVnaXN0cnkgZnJvbSAnLi4vLi4vTmF0aXZlQ29tcG9uZW50L05hdGl2ZUNvbXBvbmVudFJlZ2lzdHJ5JztcblxuY29uc3QgU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudDogSG9zdENvbXBvbmVudDxQcm9wcz4gPSBOYXRpdmVDb21wb25lbnRSZWdpc3RyeS5nZXQ8UHJvcHM+KFxuICAnUkNUU2Nyb2xsVmlldycsXG4gICgpID0+ICh7XG4gICAgdWlWaWV3Q2xhc3NOYW1lOiAnUkNUU2Nyb2xsVmlldycsXG4gICAgYnViYmxpbmdFdmVudFR5cGVzOiB7fSxcbiAgICBkaXJlY3RFdmVudFR5cGVzOiB7XG4gICAgICB0b3BTY3JvbGxUb1RvcDoge1xuICAgICAgICByZWdpc3RyYXRpb25OYW1lOiAnb25TY3JvbGxUb1RvcCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAgdmFsaWRBdHRyaWJ1dGVzOiB7XG4gICAgICBhbHdheXNCb3VuY2VIb3Jpem9udGFsOiB0cnVlLFxuICAgICAgYWx3YXlzQm91bmNlVmVydGljYWw6IHRydWUsXG4gICAgICBhdXRvbWF0aWNhbGx5QWRqdXN0Q29udGVudEluc2V0czogdHJ1ZSxcbiAgICAgIGF1dG9tYXRpY2FsbHlBZGp1c3RzU2Nyb2xsSW5kaWNhdG9ySW5zZXRzOiB0cnVlLFxuICAgICAgYm91bmNlczogdHJ1ZSxcbiAgICAgIGJvdW5jZXNab29tOiB0cnVlLFxuICAgICAgY2FuQ2FuY2VsQ29udGVudFRvdWNoZXM6IHRydWUsXG4gICAgICBjZW50ZXJDb250ZW50OiB0cnVlLFxuICAgICAgY29udGVudEluc2V0OiB7XG4gICAgICAgIGRpZmY6IHJlcXVpcmUoJy4uLy4uL1V0aWxpdGllcy9kaWZmZXIvcG9pbnRzRGlmZmVyJyksXG4gICAgICB9LFxuICAgICAgY29udGVudE9mZnNldDoge1xuICAgICAgICBkaWZmOiByZXF1aXJlKCcuLi8uLi9VdGlsaXRpZXMvZGlmZmVyL3BvaW50c0RpZmZlcicpLFxuICAgICAgfSxcbiAgICAgIGNvbnRlbnRJbnNldEFkanVzdG1lbnRCZWhhdmlvcjogdHJ1ZSxcbiAgICAgIGRlY2VsZXJhdGlvblJhdGU6IHRydWUsXG4gICAgICBkaXJlY3Rpb25hbExvY2tFbmFibGVkOiB0cnVlLFxuICAgICAgZGlzYWJsZUludGVydmFsTW9tZW50dW06IHRydWUsXG4gICAgICBlbmRGaWxsQ29sb3I6IHtcbiAgICAgICAgcHJvY2VzczogcmVxdWlyZSgnLi4vLi4vU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InKSxcbiAgICAgIH0sXG4gICAgICBmYWRpbmdFZGdlTGVuZ3RoOiB0cnVlLFxuICAgICAgaW5kaWNhdG9yU3R5bGU6IHRydWUsXG4gICAgICBpbnZlcnRlZDogdHJ1ZSxcbiAgICAgIGtleWJvYXJkRGlzbWlzc01vZGU6IHRydWUsXG4gICAgICBtYWludGFpblZpc2libGVDb250ZW50UG9zaXRpb246IHRydWUsXG4gICAgICBtYXhpbXVtWm9vbVNjYWxlOiB0cnVlLFxuICAgICAgbWluaW11bVpvb21TY2FsZTogdHJ1ZSxcbiAgICAgIG5lc3RlZFNjcm9sbEVuYWJsZWQ6IHRydWUsXG4gICAgICBvbk1vbWVudHVtU2Nyb2xsQmVnaW46IHRydWUsXG4gICAgICBvbk1vbWVudHVtU2Nyb2xsRW5kOiB0cnVlLFxuICAgICAgb25TY3JvbGw6IHRydWUsXG4gICAgICBvblNjcm9sbEJlZ2luRHJhZzogdHJ1ZSxcbiAgICAgIG9uU2Nyb2xsRW5kRHJhZzogdHJ1ZSxcbiAgICAgIG9uU2Nyb2xsVG9Ub3A6IHRydWUsXG4gICAgICBvdmVyU2Nyb2xsTW9kZTogdHJ1ZSxcbiAgICAgIHBhZ2luZ0VuYWJsZWQ6IHRydWUsXG4gICAgICBwZXJzaXN0ZW50U2Nyb2xsYmFyOiB0cnVlLFxuICAgICAgcGluY2hHZXN0dXJlRW5hYmxlZDogdHJ1ZSxcbiAgICAgIHNjcm9sbEVuYWJsZWQ6IHRydWUsXG4gICAgICBzY3JvbGxFdmVudFRocm90dGxlOiB0cnVlLFxuICAgICAgc2Nyb2xsSW5kaWNhdG9ySW5zZXRzOiB7XG4gICAgICAgIGRpZmY6IHJlcXVpcmUoJy4uLy4uL1V0aWxpdGllcy9kaWZmZXIvcG9pbnRzRGlmZmVyJyksXG4gICAgICB9LFxuICAgICAgc2Nyb2xsUGVyZlRhZzogdHJ1ZSxcbiAgICAgIHNjcm9sbFRvT3ZlcmZsb3dFbmFibGVkOiB0cnVlLFxuICAgICAgc2Nyb2xsc1RvVG9wOiB0cnVlLFxuICAgICAgc2VuZE1vbWVudHVtRXZlbnRzOiB0cnVlLFxuICAgICAgc2hvd3NIb3Jpem9udGFsU2Nyb2xsSW5kaWNhdG9yOiB0cnVlLFxuICAgICAgc2hvd3NWZXJ0aWNhbFNjcm9sbEluZGljYXRvcjogdHJ1ZSxcbiAgICAgIHNuYXBUb0FsaWdubWVudDogdHJ1ZSxcbiAgICAgIHNuYXBUb0VuZDogdHJ1ZSxcbiAgICAgIHNuYXBUb0ludGVydmFsOiB0cnVlLFxuICAgICAgc25hcFRvT2Zmc2V0czogdHJ1ZSxcbiAgICAgIHNuYXBUb1N0YXJ0OiB0cnVlLFxuICAgICAgem9vbVNjYWxlOiB0cnVlLFxuICAgIH0sXG4gIH0pLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudDtcbiJdfQ==