{"version":3,"sources":["isValidNumber.js"],"names":["exports","__esModule","_ramda","require","_isFloat","_interopRequireDefault","_isInteger","obj","isValidNumber","curryN","either","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,QAAQ,GAAGC,sBAAsB,CAACF,OAAO,CAAC,WAAD,CAAR,CAArC;;AAEA,IAAIG,UAAU,GAAGD,sBAAsB,CAACF,OAAO,CAAC,aAAD,CAAR,CAAvC;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACN,UAAX,GAAwBM,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAsBjG,IAAIC,aAAa,GAAG,CAAC,GAAGN,MAAM,CAACO,MAAX,EAAmB,CAAnB,EAAsB,CAAC,GAAGP,MAAM,CAACQ,MAAX,EAAmBJ,UAAU,CAAC,SAAD,CAA7B,EAA0CF,QAAQ,CAAC,SAAD,CAAlD,CAAtB,CAApB;AACA,IAAIO,QAAQ,GAAGH,aAAf;AACAR,OAAO,CAAC,SAAD,CAAP,GAAqBW,QAArB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _isFloat = _interopRequireDefault(require(\"./isFloat\"));\n\nvar _isInteger = _interopRequireDefault(require(\"./isInteger\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Checks if value is a valid `Number`. A valid `Number` is a number that is not `NaN`, `Infinity`\n * or `-Infinity`.\n *\n * @func isValidNumber\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.2.0|v2.2.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotValidNumber|isNotValidNumber}\n * @example\n *\n * RA.isValidNumber(1); //=> true\n * RA.isValidNumber(''); //=> false\n * RA.isValidNumber(NaN); //=> false\n * RA.isValidNumber(Infinity); //=> false\n * RA.isValidNumber(-Infinity); //=> false\n */\nvar isValidNumber = (0, _ramda.curryN)(1, (0, _ramda.either)(_isInteger[\"default\"], _isFloat[\"default\"]));\nvar _default = isValidNumber;\nexports[\"default\"] = _default;"]}